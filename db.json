{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/robots.txt","hash":"ad543797a1bcfbea048ded02597236ddc79cd044","modified":1522589015000},{"_id":"source/README.md","hash":"494a3fe70dfbba307ec48e0ce012e9016837b4a1","modified":1522589015000},{"_id":"source/CNAME","hash":"b17720316b6dc65eeabaa90f99a3e236c163daae","modified":1522589015000},{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1522592525000},{"_id":"themes/next/.DS_Store","hash":"b4031ca706d0e344ab2ab686d4decf4474d9e602","modified":1522592068000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1513426296000},{"_id":"themes/next/_config.yml","hash":"c76019fca9628b4b56c6087c05dc08ab71eb3b7f","modified":1517389188000},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1513426296000},{"_id":"themes/next/README.md","hash":"aa2fb15ef016074b10755323c99025df506d5ca3","modified":1513426296000},{"_id":"themes/next/bower.json","hash":"6d6ae7531cf3fedc97c58cdad664f5793eb3cc88","modified":1513426296000},{"_id":"source/_posts/Charles-Response-error.md","hash":"1c91868ec9827a7079d6a7fe7d9a3fbdb415851a","modified":1522592427000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1513426296000},{"_id":"source/_posts/GV-python-api.md","hash":"6913ab07cdbca14df916d7a24c08bfc207e266fa","modified":1522589015000},{"_id":"source/_posts/aes-rsa-jiami-jiemi.md","hash":"164722757813f5db7ebf0e8170e53555c0945778","modified":1522589015000},{"_id":"source/_posts/Phantomjs.md","hash":"9d4e0e3f9b2bbed3a764742eb86e1663b19ac081","modified":1522592348000},{"_id":"source/_posts/algorithm-complexity.md","hash":"6b7831db3f22d07b1be793a9877ae05c538954a7","modified":1522589015000},{"_id":"themes/next/package.json","hash":"93a74dbc0fe3a1208a02e9cec3c15c2375339cc1","modified":1513426296000},{"_id":"source/_posts/basis-of-cryptography.md","hash":"e3a9fd55f712b3cadfb074295544bd34e02a8629","modified":1522589015000},{"_id":"source/_posts/data-structure-basis.md","hash":"4038d2ba4b8ed77b2255684475fdfcf37ab946ad","modified":1522592417000},{"_id":"source/_posts/data-structure-tree.md","hash":"27d411ad3da57a9d4afe74511cb9bf549d541ea9","modified":1522592407000},{"_id":"source/_posts/design-patterns.md","hash":"dae50cd576efc0bca6f953ed5517a3bdf73c9670","modified":1522589015000},{"_id":"source/_posts/django-rest-framwork.md","hash":"405cc1fe9edbea51bbb0dc00ee85180b418b762e","modified":1522589015000},{"_id":"source/_posts/django-admin-cn.md","hash":"dfa3a343271e5f1124113be91ba252c1a27c123d","modified":1522589015000},{"_id":"source/_posts/google-voice-keep.md","hash":"7c6af8e80b6b9c7b571013ccedd533780bb9b24f","modified":1522589015000},{"_id":"source/_posts/hexo-ERROR-Process-failed-posts.md","hash":"ddfebabf6c2f17a015e526846a50d2a9bf0cb9c2","modified":1522589015000},{"_id":"source/_posts/linux-cmd.md","hash":"3e3490d68e5748a21861f5dc2dc7baba4e3a8417","modified":1522589015000},{"_id":"source/_posts/linux-dir.md","hash":"c7ce069ddecbd2a6a116bcecd88fd4391e1d965d","modified":1522589015000},{"_id":"source/_posts/linux-user.md","hash":"58a06bb46b8725661b5df7d95b8c8856f85ef813","modified":1522589015000},{"_id":"source/_posts/list-algorithm.md","hash":"8f17a385226f7aae7b5df16a6dec2331ae150958","modified":1522589015000},{"_id":"source/_posts/linux-process.md","hash":"c8526d3cf3d0e93ee0455e35c2c2533fb732f652","modified":1522589015000},{"_id":"source/_posts/list-search.md","hash":"655021d9eb8b907dc0c0648cda25213ff0a833ec","modified":1522589015000},{"_id":"source/_posts/my-docker-note.md","hash":"cc5d91afc13dd5261d2fb23a1a1a55ecfcbea7be","modified":1522589015000},{"_id":"source/_posts/node-express.md","hash":"90853ccf201afce356f43194dcea054050fb284b","modified":1522589015000},{"_id":"source/_posts/linux-permissions.md","hash":"6136d5120529165a28c40453ed62fbc785828f4d","modified":1522589015000},{"_id":"source/_posts/node-hello.md","hash":"1e935b3fecc60e8f13b2c01f955f89b2c3bae404","modified":1522589015000},{"_id":"source/_posts/rabbitmq-apply.md","hash":"94b3547d5738dd6b9058f0a9528902314f7cbcba","modified":1522592341000},{"_id":"source/_posts/recursion.md","hash":"8b55190a6adddea39ab5cc79b0f0e182fb39e98f","modified":1522589015000},{"_id":"source/_posts/top-list-algorithm.md","hash":"4276947043953187ae6cfe4cf46df5d3baa9310d","modified":1522589015000},{"_id":"source/_posts/linux-shell.md","hash":"ca8f68b3b20d74efe0e0a35210e9c72094bf6240","modified":1522589015000},{"_id":"source/categories/index.md","hash":"0390bd309b884b3df664231c0b481251e5685172","modified":1522589015000},{"_id":"source/tags/index.md","hash":"75a6c596b2ff8ef1b5a92502db86f4f15459b13b","modified":1522589015000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1513426296000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1513426296000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1513426296000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1513426296000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1513426296000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1513426296000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1513426296000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1513426296000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1513426296000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1513426296000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1513426296000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1513426296000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1513426296000},{"_id":"themes/next/layout/.DS_Store","hash":"7900c78b0567d349a0fa775929f6b77124eae816","modified":1513666822000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1513426296000},{"_id":"themes/next/languages/zh-CN.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1513426296000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1513426296000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1513426296000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1513426296000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1513426296000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1513426296000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1513426296000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1513426296000},{"_id":"themes/next/scripts/merge-configs.js","hash":"cb617ddf692f56e6b6129564d52e302f50b28243","modified":1513426296000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1513426296000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1513426296000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1513426296000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1513426296000},{"_id":"themes/next/source/.DS_Store","hash":"90ef62d5a0837905aa311eb78cfbbf68942c9b1e","modified":1516952327000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1513426296000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1513426296000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1513426296000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1513426296000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1513426296000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1513426296000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1513426296000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1513426296000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b5ebbbb5d51f21d277bacb18564aea3decc5ed3f","modified":1513666584000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1513426296000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1513426296000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1513426296000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1513426296000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"ea1c49f1da3b72d9e7d347b5fa7cde33b7fa28cb","modified":1513666469000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1513426296000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1513426296000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1513426296000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1513426296000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1513426296000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1513426296000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1513426296000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1513426296000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1513426296000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1513426296000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1513426296000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1513426296000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1513426296000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1513426296000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1513426296000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1513426296000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1513426296000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1513426296000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1513426296000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1513426296000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1513426296000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1513426296000},{"_id":"themes/next/source/css/.DS_Store","hash":"8c6d7cf99c28d5a28334335c88c8eb40fe1bbb40","modified":1513430012000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1513426296000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1513426296000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1513426296000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1513426296000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1513426296000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1513426296000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1513426296000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1513426296000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1513426296000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1513426296000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1513426296000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1513426296000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1513426296000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1513426296000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1513426296000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1513426296000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1513426296000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1513426296000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1513426296000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1513426296000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1513426296000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1513426296000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1513426296000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1513426296000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1513426296000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1513426296000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1513426296000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1513426296000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1513426296000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1513426296000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1513426296000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1513426296000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1513426296000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1513426296000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1513426296000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1513426296000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1513426296000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1513426296000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1513426296000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1513426296000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1513426296000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1513426296000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1513426296000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1513426296000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1513426296000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1513426296000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1513426296000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1513426296000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1513426296000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1513426296000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1513426296000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1513426296000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1513426296000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1513426296000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1513426296000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1513426296000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1513426296000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1513426296000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1513426296000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1513426296000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1513426296000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1513426296000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1513426296000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1513426296000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1513426296000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1513429845000},{"_id":"themes/next/source/css/_common/.DS_Store","hash":"877e8cf77586cdd1e885d77d937afd85d9011911","modified":1513429614000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1513426296000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1513426296000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1513426296000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1513426296000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1513426296000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1513426296000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1513426296000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1513426296000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1513426296000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1513426296000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1513426296000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1513426296000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1513426296000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1513426296000},{"_id":"themes/next/source/js/src/utils.js","hash":"dbdc3d1300eec7da9632608ebc0e5b697779dad7","modified":1513426296000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1513426296000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1513426296000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1513426296000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1513426296000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1513426296000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1513426296000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1513426296000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1513426296000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1513426296000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1513426296000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1513426296000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1513426296000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1513426296000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1513426296000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1513426296000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1513426296000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1513426296000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1513426296000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1513426296000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1513426296000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1513426296000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1513426296000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1513426296000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1513426296000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1513426296000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1513426296000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1513426296000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1513426296000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1513426296000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1513426296000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1513426296000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1513426296000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1513426296000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1513426296000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1513426296000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1513426296000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1513426296000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1513426296000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1513426296000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1513426296000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1513426296000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1513426296000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1513426296000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1513426296000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1513426296000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1513426296000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1513426296000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1513426296000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1513426296000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1513426296000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1513426296000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1513426296000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1513426296000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1513426296000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1513426296000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1513426296000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1513426296000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1513426296000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/.DS_Store","hash":"5817f64aeb0a7bcf8d2206e4d92022dab193906f","modified":1513429529000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1513426296000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1513426296000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1513426296000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1513426296000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1513426296000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1513426296000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1513426296000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1513426296000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1513426296000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1513426296000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1513426296000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1513426296000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1513426296000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1513426296000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1513426296000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1513426296000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1513426296000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1513426296000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"bcf52192942c0afc410c74a0fb458e7936ddc3d5","modified":1513426296000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1513426296000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1513426296000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1513426296000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1513426296000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1513426296000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1513426296000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1513426296000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1513426296000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1513426296000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1513426296000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1513426296000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1513426296000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1513426296000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1513426296000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1513426296000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1513426296000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1513426296000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1513426296000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1513426296000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1513426296000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1513426296000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1513426296000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1513426296000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1513426296000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1513426296000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1513426296000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1513426296000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1513426296000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1513426296000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1513426296000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1513426296000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1513426296000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1513426296000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1513426296000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1513426296000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1513426296000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1513426296000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1513426296000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1513426296000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1513426296000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1513426296000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1513426296000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1513426296000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1513426296000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1513426296000}],"Category":[{"name":"Project","_id":"cjfgx5owf0005mxgognozgdo5"},{"name":"算法","_id":"cjfgx5owl000bmxgoihgktvj6"},{"name":"数据结构","_id":"cjfgx5owr000hmxgo53k6ztxl"},{"name":"linux","_id":"cjfgx5ox1000umxgo5tjpi96a"},{"name":"node","_id":"cjfgx5oxa001cmxgow4oxh7c6"}],"Data":[],"Page":[{"_content":"# cvno.github.io\n\n[cvno.github.io](https://cvno.github.io)\n\n[blog.cvno.me](http://blog.cvno.me)\n\n\n","source":"README.md","raw":"# cvno.github.io\n\n[cvno.github.io](https://cvno.github.io)\n\n[blog.cvno.me](http://blog.cvno.me)\n\n\n","date":"2018-04-01T13:23:35.000Z","updated":"2018-04-01T13:23:35.000Z","path":"README.html","title":"","comments":1,"layout":"page","_id":"cjfgx5oud0000mxgoskwssboq","content":"<h1 id=\"cvno-github-io\"><a href=\"#cvno-github-io\" class=\"headerlink\" title=\"cvno.github.io\"></a>cvno.github.io</h1><p><a href=\"https://cvno.github.io\" target=\"_blank\" rel=\"noopener\">cvno.github.io</a></p>\n<p><a href=\"http://blog.cvno.me\" target=\"_blank\" rel=\"noopener\">blog.cvno.me</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"cvno-github-io\"><a href=\"#cvno-github-io\" class=\"headerlink\" title=\"cvno.github.io\"></a>cvno.github.io</h1><p><a href=\"https://cvno.github.io\" target=\"_blank\" rel=\"noopener\">cvno.github.io</a></p>\n<p><a href=\"http://blog.cvno.me\" target=\"_blank\" rel=\"noopener\">blog.cvno.me</a></p>\n"},{"title":"categories","date":"2017-12-18T07:21:56.000Z","type":"categories","_content":"\n\n","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-12-18 15:21:56\ntype: \"categories\"\n---\n\n\n","updated":"2018-04-01T13:23:35.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjfgx5p610022mxgodrluqgkj","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-12-18T07:20:12.000Z","type":"tags","_content":"\n\n","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-12-18 15:20:12\ntype: \"tags\"\n---\n\n\n","updated":"2018-04-01T13:23:35.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjfgx5p620023mxgopqjn1yl7","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Charles: Response 出现乱码","date":"2017-09-18T13:19:42.000Z","_content":"使用 Charles 抓 https 包的时候, Reponse 出现乱码\n<!-- more -->\n\n系统环境: MAC\n软件版本: 4.2.1\n浏览器: Google Chrome\n\n# 原因\n没有信任 Charles 的证书,信任 Charles 的证书就好了\n\n# 解决方法\n\n## 安装 Charles 证书\n`Help` > `SSL Proxying` > `Install Charles Root Certificate`\n\n![安装 Charles 证书](https://i.imgur.com/JavIfh7.jpg)\n\n## 信任 Charles 证书\n安装完成后会自动弹出钥匙串,找到 Charles 的证书信任即可\n\n![信任 Charles 证书1](https://i.imgur.com/gATUIEf.jpg)\n\n![信任 Charles 证书2](https://i.imgur.com/4xU3IVQ.jpg)\n\n\n\n## Charles 设置\n`Proxy` > `SSL Proxying Settings`\n\n![Charles 设置](https://i.imgur.com/BqoK9Hy.jpg)\n\n\n## ok\n\n\n# 后记\n发布这篇文章的时候问题已经被解决,但是没有问题截图,有时间的话再补上.\n\n\n","source":"_posts/Charles-Response-error.md","raw":"---\ntitle: 'Charles: Response 出现乱码'\ndate: 2017-9-18 21:19:42\ntags: charles\n---\n使用 Charles 抓 https 包的时候, Reponse 出现乱码\n<!-- more -->\n\n系统环境: MAC\n软件版本: 4.2.1\n浏览器: Google Chrome\n\n# 原因\n没有信任 Charles 的证书,信任 Charles 的证书就好了\n\n# 解决方法\n\n## 安装 Charles 证书\n`Help` > `SSL Proxying` > `Install Charles Root Certificate`\n\n![安装 Charles 证书](https://i.imgur.com/JavIfh7.jpg)\n\n## 信任 Charles 证书\n安装完成后会自动弹出钥匙串,找到 Charles 的证书信任即可\n\n![信任 Charles 证书1](https://i.imgur.com/gATUIEf.jpg)\n\n![信任 Charles 证书2](https://i.imgur.com/4xU3IVQ.jpg)\n\n\n\n## Charles 设置\n`Proxy` > `SSL Proxying Settings`\n\n![Charles 设置](https://i.imgur.com/BqoK9Hy.jpg)\n\n\n## ok\n\n\n# 后记\n发布这篇文章的时候问题已经被解决,但是没有问题截图,有时间的话再补上.\n\n\n","slug":"Charles-Response-error","published":1,"updated":"2018-04-01T14:20:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfgx5ow60001mxgo0c7e9xmr","content":"<p>使用 Charles 抓 https 包的时候, Reponse 出现乱码<br><a id=\"more\"></a></p>\n<p>系统环境: MAC<br>软件版本: 4.2.1<br>浏览器: Google Chrome</p>\n<h1 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h1><p>没有信任 Charles 的证书,信任 Charles 的证书就好了</p>\n<h1 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h1><h2 id=\"安装-Charles-证书\"><a href=\"#安装-Charles-证书\" class=\"headerlink\" title=\"安装 Charles 证书\"></a>安装 Charles 证书</h2><p><code>Help</code> &gt; <code>SSL Proxying</code> &gt; <code>Install Charles Root Certificate</code></p>\n<p><img src=\"https://i.imgur.com/JavIfh7.jpg\" alt=\"安装 Charles 证书\"></p>\n<h2 id=\"信任-Charles-证书\"><a href=\"#信任-Charles-证书\" class=\"headerlink\" title=\"信任 Charles 证书\"></a>信任 Charles 证书</h2><p>安装完成后会自动弹出钥匙串,找到 Charles 的证书信任即可</p>\n<p><img src=\"https://i.imgur.com/gATUIEf.jpg\" alt=\"信任 Charles 证书1\"></p>\n<p><img src=\"https://i.imgur.com/4xU3IVQ.jpg\" alt=\"信任 Charles 证书2\"></p>\n<h2 id=\"Charles-设置\"><a href=\"#Charles-设置\" class=\"headerlink\" title=\"Charles 设置\"></a>Charles 设置</h2><p><code>Proxy</code> &gt; <code>SSL Proxying Settings</code></p>\n<p><img src=\"https://i.imgur.com/BqoK9Hy.jpg\" alt=\"Charles 设置\"></p>\n<h2 id=\"ok\"><a href=\"#ok\" class=\"headerlink\" title=\"ok\"></a>ok</h2><h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>发布这篇文章的时候问题已经被解决,但是没有问题截图,有时间的话再补上.</p>\n","site":{"data":{}},"excerpt":"<p>使用 Charles 抓 https 包的时候, Reponse 出现乱码<br>","more":"</p>\n<p>系统环境: MAC<br>软件版本: 4.2.1<br>浏览器: Google Chrome</p>\n<h1 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h1><p>没有信任 Charles 的证书,信任 Charles 的证书就好了</p>\n<h1 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h1><h2 id=\"安装-Charles-证书\"><a href=\"#安装-Charles-证书\" class=\"headerlink\" title=\"安装 Charles 证书\"></a>安装 Charles 证书</h2><p><code>Help</code> &gt; <code>SSL Proxying</code> &gt; <code>Install Charles Root Certificate</code></p>\n<p><img src=\"https://i.imgur.com/JavIfh7.jpg\" alt=\"安装 Charles 证书\"></p>\n<h2 id=\"信任-Charles-证书\"><a href=\"#信任-Charles-证书\" class=\"headerlink\" title=\"信任 Charles 证书\"></a>信任 Charles 证书</h2><p>安装完成后会自动弹出钥匙串,找到 Charles 的证书信任即可</p>\n<p><img src=\"https://i.imgur.com/gATUIEf.jpg\" alt=\"信任 Charles 证书1\"></p>\n<p><img src=\"https://i.imgur.com/4xU3IVQ.jpg\" alt=\"信任 Charles 证书2\"></p>\n<h2 id=\"Charles-设置\"><a href=\"#Charles-设置\" class=\"headerlink\" title=\"Charles 设置\"></a>Charles 设置</h2><p><code>Proxy</code> &gt; <code>SSL Proxying Settings</code></p>\n<p><img src=\"https://i.imgur.com/BqoK9Hy.jpg\" alt=\"Charles 设置\"></p>\n<h2 id=\"ok\"><a href=\"#ok\" class=\"headerlink\" title=\"ok\"></a>ok</h2><h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>发布这篇文章的时候问题已经被解决,但是没有问题截图,有时间的话再补上.</p>"},{"title":"基于 GV 的 Python api","date":"2018-01-15T05:25:59.000Z","keywords":null,"description":"用 Google Voice 来做短信验证码。布局海外业务的廉价验证码方案。","_content":"\n使用 Python3 来操作 Google Voice 的 API。 \n\n>Git: [code here](https://github.com/cvno/GV-Python-API)\n\n# 2018-02-01\n- 修复重写某些方法时的 bug\n\n# 2018-01-15 代码发布\n\n功能列表:\n\n- 发送 SMS\n- 拨打电话\n- 取消拨打电话\n- 标记为已读或未读\n- 下载语音留言\n- 后台自动检测是否有新信息\n- 根据 SMS 的设置自动回复\n\n\n它也可能是一个廉价的短信验证码方案，目前国内至少有两家大型的互联网公司使用这种方案。\n\n**依赖模块:**\n\n- `pip install selenium`\n- `pip install requests`\n- `pip install BeautifulSoup`\n- `PhantomJS` 一款无界面模拟浏览器, 不同的操作系统安装方法有差异\n\n","source":"_posts/GV-python-api.md","raw":"---\ntitle: 基于 GV 的 Python api\ndate: 2018-01-15 13:25:59\ntags:\ncategories: Project\nkeywords:\ndescription: 用 Google Voice 来做短信验证码。布局海外业务的廉价验证码方案。\n---\n\n使用 Python3 来操作 Google Voice 的 API。 \n\n>Git: [code here](https://github.com/cvno/GV-Python-API)\n\n# 2018-02-01\n- 修复重写某些方法时的 bug\n\n# 2018-01-15 代码发布\n\n功能列表:\n\n- 发送 SMS\n- 拨打电话\n- 取消拨打电话\n- 标记为已读或未读\n- 下载语音留言\n- 后台自动检测是否有新信息\n- 根据 SMS 的设置自动回复\n\n\n它也可能是一个廉价的短信验证码方案，目前国内至少有两家大型的互联网公司使用这种方案。\n\n**依赖模块:**\n\n- `pip install selenium`\n- `pip install requests`\n- `pip install BeautifulSoup`\n- `PhantomJS` 一款无界面模拟浏览器, 不同的操作系统安装方法有差异\n\n","slug":"GV-python-api","published":1,"updated":"2018-04-01T13:23:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfgx5owa0002mxgow3zhkttr","content":"<p>使用 Python3 来操作 Google Voice 的 API。 </p>\n<blockquote>\n<p>Git: <a href=\"https://github.com/cvno/GV-Python-API\" target=\"_blank\" rel=\"noopener\">code here</a></p>\n</blockquote>\n<h1 id=\"2018-02-01\"><a href=\"#2018-02-01\" class=\"headerlink\" title=\"2018-02-01\"></a>2018-02-01</h1><ul>\n<li>修复重写某些方法时的 bug</li>\n</ul>\n<h1 id=\"2018-01-15-代码发布\"><a href=\"#2018-01-15-代码发布\" class=\"headerlink\" title=\"2018-01-15 代码发布\"></a>2018-01-15 代码发布</h1><p>功能列表:</p>\n<ul>\n<li>发送 SMS</li>\n<li>拨打电话</li>\n<li>取消拨打电话</li>\n<li>标记为已读或未读</li>\n<li>下载语音留言</li>\n<li>后台自动检测是否有新信息</li>\n<li>根据 SMS 的设置自动回复</li>\n</ul>\n<p>它也可能是一个廉价的短信验证码方案，目前国内至少有两家大型的互联网公司使用这种方案。</p>\n<p><strong>依赖模块:</strong></p>\n<ul>\n<li><code>pip install selenium</code></li>\n<li><code>pip install requests</code></li>\n<li><code>pip install BeautifulSoup</code></li>\n<li><code>PhantomJS</code> 一款无界面模拟浏览器, 不同的操作系统安装方法有差异</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>使用 Python3 来操作 Google Voice 的 API。 </p>\n<blockquote>\n<p>Git: <a href=\"https://github.com/cvno/GV-Python-API\" target=\"_blank\" rel=\"noopener\">code here</a></p>\n</blockquote>\n<h1 id=\"2018-02-01\"><a href=\"#2018-02-01\" class=\"headerlink\" title=\"2018-02-01\"></a>2018-02-01</h1><ul>\n<li>修复重写某些方法时的 bug</li>\n</ul>\n<h1 id=\"2018-01-15-代码发布\"><a href=\"#2018-01-15-代码发布\" class=\"headerlink\" title=\"2018-01-15 代码发布\"></a>2018-01-15 代码发布</h1><p>功能列表:</p>\n<ul>\n<li>发送 SMS</li>\n<li>拨打电话</li>\n<li>取消拨打电话</li>\n<li>标记为已读或未读</li>\n<li>下载语音留言</li>\n<li>后台自动检测是否有新信息</li>\n<li>根据 SMS 的设置自动回复</li>\n</ul>\n<p>它也可能是一个廉价的短信验证码方案，目前国内至少有两家大型的互联网公司使用这种方案。</p>\n<p><strong>依赖模块:</strong></p>\n<ul>\n<li><code>pip install selenium</code></li>\n<li><code>pip install requests</code></li>\n<li><code>pip install BeautifulSoup</code></li>\n<li><code>PhantomJS</code> 一款无界面模拟浏览器, 不同的操作系统安装方法有差异</li>\n</ul>\n"},{"title":"加密解密-[AES-RSA]","date":"2018-01-19T03:17:44.000Z","keywords":null,"description":"通用数据加密","_content":"\n# RSA\n加密数据长度是有限制的\n\n```python\nimport rsa\nimport base64\n \n \n# ######### 1. 生成公钥私钥 #########\npub_key_obj, priv_key_obj = rsa.newkeys(256)\n \npub_key_str = pub_key_obj.save_pkcs1()\npub_key_code = base64.standard_b64encode(pub_key_str)\n \npriv_key_str = priv_key_obj.save_pkcs1()\npriv_key_code = base64.standard_b64encode(priv_key_str)\n \nprint(pub_key_code)\nprint(priv_key_code)\n \n# ######### 2. 加密 #########\ndef encrypt(value):\n    key_str = base64.standard_b64decode(pub_key_code)\n    pk = rsa.PublicKey.load_pkcs1(key_str)\n    val = rsa.encrypt(value.encode('utf-8'), pk)\n    return val\n \n \n# ######### 3. 解密 #########\ndef decrypt(value):\n    key_str = base64.standard_b64decode(priv_key_code)\n    pk = rsa.PrivateKey.load_pkcs1(key_str)\n    val = rsa.decrypt(value, pk)\n    return val\n \n \n# ######### 基本使用 #########\nif __name__ == '__main__':\n    v = 'wupeiqi'\n    v1 = encrypt(v)\n    print(v1)\n    v2 = decrypt(v1)\n    print(v2)\n```\n\n## 参考资料\n- https://www.cnblogs.com/52python/p/6589869.html\n\n\n# AES\n加密数据长度无限制\n\n```sh\n#3.6安装  pip3 install pycryptodome\n#mac     pip3 install pycrypto\n```\n\n\n```python\n############################### 加密 ##############################\n \nfrom Crypto.Cipher import AES\ndef encrypt(message):\n    key = b'dfdsdfsasdfdsdfs'  # key必须是16的整数倍\n    cipher = AES.new(key, AES.MODE_CBC, key)  # 创建对象\n    # ----------------------------------------------\n    # 先转成字节,把数据拼够16字节的整数倍\n    ba_data = bytearray(message, encoding='utf-8')  # 把数据转成bytearray(byte的数组),bytearray只能追加数字,默认把数字转成字节\n    v1 = len(ba_data)\n    v2 = v1 % 16\n    if v2 == 0: # 保证收据长度是 16 的时候数据还是加密的\n        v3 = 16\n    else:\n        v3 = 16 - v2  # v3是追加的长度\n    for i in range(v3):\n        ba_data.append(v3)  # bytearray只能追加数字,默认把数字转成字节\n    final_data = ba_data.decode('utf-8')\n    # ----------------------------------------------\n    msg = cipher.encrypt(final_data)  # 要加密的字符串，必须是16个字节或16个字节的倍数,加密后是byte格式\n    return msg\n\n\n############################### 解密 ##############################\ndef decrypt(msg):\n    key = b'dfdsdfsasdfdsdfs'\n    cipher = AES.new(key, AES.MODE_CBC, key)\n    result = cipher.decrypt(msg)  # 把加密后的字节解密成不加密的字节\n    data = result[0:-result[-1]]\n    return str(data, encoding='utf-8')\n```\n\n## 安装\n- https://github.com/sfbahr/PyCrypto-Wheels\n\n","source":"_posts/aes-rsa-jiami-jiemi.md","raw":"---\ntitle: 加密解密-[AES-RSA]\ndate: 2018-01-19 11:17:44\ntags:\ncategories:\nkeywords:\ndescription: 通用数据加密\n---\n\n# RSA\n加密数据长度是有限制的\n\n```python\nimport rsa\nimport base64\n \n \n# ######### 1. 生成公钥私钥 #########\npub_key_obj, priv_key_obj = rsa.newkeys(256)\n \npub_key_str = pub_key_obj.save_pkcs1()\npub_key_code = base64.standard_b64encode(pub_key_str)\n \npriv_key_str = priv_key_obj.save_pkcs1()\npriv_key_code = base64.standard_b64encode(priv_key_str)\n \nprint(pub_key_code)\nprint(priv_key_code)\n \n# ######### 2. 加密 #########\ndef encrypt(value):\n    key_str = base64.standard_b64decode(pub_key_code)\n    pk = rsa.PublicKey.load_pkcs1(key_str)\n    val = rsa.encrypt(value.encode('utf-8'), pk)\n    return val\n \n \n# ######### 3. 解密 #########\ndef decrypt(value):\n    key_str = base64.standard_b64decode(priv_key_code)\n    pk = rsa.PrivateKey.load_pkcs1(key_str)\n    val = rsa.decrypt(value, pk)\n    return val\n \n \n# ######### 基本使用 #########\nif __name__ == '__main__':\n    v = 'wupeiqi'\n    v1 = encrypt(v)\n    print(v1)\n    v2 = decrypt(v1)\n    print(v2)\n```\n\n## 参考资料\n- https://www.cnblogs.com/52python/p/6589869.html\n\n\n# AES\n加密数据长度无限制\n\n```sh\n#3.6安装  pip3 install pycryptodome\n#mac     pip3 install pycrypto\n```\n\n\n```python\n############################### 加密 ##############################\n \nfrom Crypto.Cipher import AES\ndef encrypt(message):\n    key = b'dfdsdfsasdfdsdfs'  # key必须是16的整数倍\n    cipher = AES.new(key, AES.MODE_CBC, key)  # 创建对象\n    # ----------------------------------------------\n    # 先转成字节,把数据拼够16字节的整数倍\n    ba_data = bytearray(message, encoding='utf-8')  # 把数据转成bytearray(byte的数组),bytearray只能追加数字,默认把数字转成字节\n    v1 = len(ba_data)\n    v2 = v1 % 16\n    if v2 == 0: # 保证收据长度是 16 的时候数据还是加密的\n        v3 = 16\n    else:\n        v3 = 16 - v2  # v3是追加的长度\n    for i in range(v3):\n        ba_data.append(v3)  # bytearray只能追加数字,默认把数字转成字节\n    final_data = ba_data.decode('utf-8')\n    # ----------------------------------------------\n    msg = cipher.encrypt(final_data)  # 要加密的字符串，必须是16个字节或16个字节的倍数,加密后是byte格式\n    return msg\n\n\n############################### 解密 ##############################\ndef decrypt(msg):\n    key = b'dfdsdfsasdfdsdfs'\n    cipher = AES.new(key, AES.MODE_CBC, key)\n    result = cipher.decrypt(msg)  # 把加密后的字节解密成不加密的字节\n    data = result[0:-result[-1]]\n    return str(data, encoding='utf-8')\n```\n\n## 安装\n- https://github.com/sfbahr/PyCrypto-Wheels\n\n","slug":"aes-rsa-jiami-jiemi","published":1,"updated":"2018-04-01T13:23:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfgx5owe0004mxgo69d2ghdt","content":"<h1 id=\"RSA\"><a href=\"#RSA\" class=\"headerlink\" title=\"RSA\"></a>RSA</h1><p>加密数据长度是有限制的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> rsa</span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># ######### 1. 生成公钥私钥 #########</span></span><br><span class=\"line\">pub_key_obj, priv_key_obj = rsa.newkeys(<span class=\"number\">256</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">pub_key_str = pub_key_obj.save_pkcs1()</span><br><span class=\"line\">pub_key_code = base64.standard_b64encode(pub_key_str)</span><br><span class=\"line\"> </span><br><span class=\"line\">priv_key_str = priv_key_obj.save_pkcs1()</span><br><span class=\"line\">priv_key_code = base64.standard_b64encode(priv_key_str)</span><br><span class=\"line\"> </span><br><span class=\"line\">print(pub_key_code)</span><br><span class=\"line\">print(priv_key_code)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># ######### 2. 加密 #########</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">encrypt</span><span class=\"params\">(value)</span>:</span></span><br><span class=\"line\">    key_str = base64.standard_b64decode(pub_key_code)</span><br><span class=\"line\">    pk = rsa.PublicKey.load_pkcs1(key_str)</span><br><span class=\"line\">    val = rsa.encrypt(value.encode(<span class=\"string\">'utf-8'</span>), pk)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># ######### 3. 解密 #########</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decrypt</span><span class=\"params\">(value)</span>:</span></span><br><span class=\"line\">    key_str = base64.standard_b64decode(priv_key_code)</span><br><span class=\"line\">    pk = rsa.PrivateKey.load_pkcs1(key_str)</span><br><span class=\"line\">    val = rsa.decrypt(value, pk)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># ######### 基本使用 #########</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    v = <span class=\"string\">'wupeiqi'</span></span><br><span class=\"line\">    v1 = encrypt(v)</span><br><span class=\"line\">    print(v1)</span><br><span class=\"line\">    v2 = decrypt(v1)</span><br><span class=\"line\">    print(v2)</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://www.cnblogs.com/52python/p/6589869.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/52python/p/6589869.html</a></li>\n</ul>\n<h1 id=\"AES\"><a href=\"#AES\" class=\"headerlink\" title=\"AES\"></a>AES</h1><p>加密数据长度无限制</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#3.6安装  pip3 install pycryptodome</span></span><br><span class=\"line\"><span class=\"comment\">#mac     pip3 install pycrypto</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">############################### 加密 ##############################</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Cipher <span class=\"keyword\">import</span> AES</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">encrypt</span><span class=\"params\">(message)</span>:</span></span><br><span class=\"line\">    key = <span class=\"string\">b'dfdsdfsasdfdsdfs'</span>  <span class=\"comment\"># key必须是16的整数倍</span></span><br><span class=\"line\">    cipher = AES.new(key, AES.MODE_CBC, key)  <span class=\"comment\"># 创建对象</span></span><br><span class=\"line\">    <span class=\"comment\"># ----------------------------------------------</span></span><br><span class=\"line\">    <span class=\"comment\"># 先转成字节,把数据拼够16字节的整数倍</span></span><br><span class=\"line\">    ba_data = bytearray(message, encoding=<span class=\"string\">'utf-8'</span>)  <span class=\"comment\"># 把数据转成bytearray(byte的数组),bytearray只能追加数字,默认把数字转成字节</span></span><br><span class=\"line\">    v1 = len(ba_data)</span><br><span class=\"line\">    v2 = v1 % <span class=\"number\">16</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> v2 == <span class=\"number\">0</span>: <span class=\"comment\"># 保证收据长度是 16 的时候数据还是加密的</span></span><br><span class=\"line\">        v3 = <span class=\"number\">16</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        v3 = <span class=\"number\">16</span> - v2  <span class=\"comment\"># v3是追加的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(v3):</span><br><span class=\"line\">        ba_data.append(v3)  <span class=\"comment\"># bytearray只能追加数字,默认把数字转成字节</span></span><br><span class=\"line\">    final_data = ba_data.decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># ----------------------------------------------</span></span><br><span class=\"line\">    msg = cipher.encrypt(final_data)  <span class=\"comment\"># 要加密的字符串，必须是16个字节或16个字节的倍数,加密后是byte格式</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> msg</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">############################### 解密 ##############################</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decrypt</span><span class=\"params\">(msg)</span>:</span></span><br><span class=\"line\">    key = <span class=\"string\">b'dfdsdfsasdfdsdfs'</span></span><br><span class=\"line\">    cipher = AES.new(key, AES.MODE_CBC, key)</span><br><span class=\"line\">    result = cipher.decrypt(msg)  <span class=\"comment\"># 把加密后的字节解密成不加密的字节</span></span><br><span class=\"line\">    data = result[<span class=\"number\">0</span>:-result[<span class=\"number\">-1</span>]]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str(data, encoding=<span class=\"string\">'utf-8'</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li><a href=\"https://github.com/sfbahr/PyCrypto-Wheels\" target=\"_blank\" rel=\"noopener\">https://github.com/sfbahr/PyCrypto-Wheels</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"RSA\"><a href=\"#RSA\" class=\"headerlink\" title=\"RSA\"></a>RSA</h1><p>加密数据长度是有限制的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> rsa</span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># ######### 1. 生成公钥私钥 #########</span></span><br><span class=\"line\">pub_key_obj, priv_key_obj = rsa.newkeys(<span class=\"number\">256</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">pub_key_str = pub_key_obj.save_pkcs1()</span><br><span class=\"line\">pub_key_code = base64.standard_b64encode(pub_key_str)</span><br><span class=\"line\"> </span><br><span class=\"line\">priv_key_str = priv_key_obj.save_pkcs1()</span><br><span class=\"line\">priv_key_code = base64.standard_b64encode(priv_key_str)</span><br><span class=\"line\"> </span><br><span class=\"line\">print(pub_key_code)</span><br><span class=\"line\">print(priv_key_code)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># ######### 2. 加密 #########</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">encrypt</span><span class=\"params\">(value)</span>:</span></span><br><span class=\"line\">    key_str = base64.standard_b64decode(pub_key_code)</span><br><span class=\"line\">    pk = rsa.PublicKey.load_pkcs1(key_str)</span><br><span class=\"line\">    val = rsa.encrypt(value.encode(<span class=\"string\">'utf-8'</span>), pk)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># ######### 3. 解密 #########</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decrypt</span><span class=\"params\">(value)</span>:</span></span><br><span class=\"line\">    key_str = base64.standard_b64decode(priv_key_code)</span><br><span class=\"line\">    pk = rsa.PrivateKey.load_pkcs1(key_str)</span><br><span class=\"line\">    val = rsa.decrypt(value, pk)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># ######### 基本使用 #########</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    v = <span class=\"string\">'wupeiqi'</span></span><br><span class=\"line\">    v1 = encrypt(v)</span><br><span class=\"line\">    print(v1)</span><br><span class=\"line\">    v2 = decrypt(v1)</span><br><span class=\"line\">    print(v2)</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://www.cnblogs.com/52python/p/6589869.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/52python/p/6589869.html</a></li>\n</ul>\n<h1 id=\"AES\"><a href=\"#AES\" class=\"headerlink\" title=\"AES\"></a>AES</h1><p>加密数据长度无限制</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#3.6安装  pip3 install pycryptodome</span></span><br><span class=\"line\"><span class=\"comment\">#mac     pip3 install pycrypto</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">############################### 加密 ##############################</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Cipher <span class=\"keyword\">import</span> AES</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">encrypt</span><span class=\"params\">(message)</span>:</span></span><br><span class=\"line\">    key = <span class=\"string\">b'dfdsdfsasdfdsdfs'</span>  <span class=\"comment\"># key必须是16的整数倍</span></span><br><span class=\"line\">    cipher = AES.new(key, AES.MODE_CBC, key)  <span class=\"comment\"># 创建对象</span></span><br><span class=\"line\">    <span class=\"comment\"># ----------------------------------------------</span></span><br><span class=\"line\">    <span class=\"comment\"># 先转成字节,把数据拼够16字节的整数倍</span></span><br><span class=\"line\">    ba_data = bytearray(message, encoding=<span class=\"string\">'utf-8'</span>)  <span class=\"comment\"># 把数据转成bytearray(byte的数组),bytearray只能追加数字,默认把数字转成字节</span></span><br><span class=\"line\">    v1 = len(ba_data)</span><br><span class=\"line\">    v2 = v1 % <span class=\"number\">16</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> v2 == <span class=\"number\">0</span>: <span class=\"comment\"># 保证收据长度是 16 的时候数据还是加密的</span></span><br><span class=\"line\">        v3 = <span class=\"number\">16</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        v3 = <span class=\"number\">16</span> - v2  <span class=\"comment\"># v3是追加的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(v3):</span><br><span class=\"line\">        ba_data.append(v3)  <span class=\"comment\"># bytearray只能追加数字,默认把数字转成字节</span></span><br><span class=\"line\">    final_data = ba_data.decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># ----------------------------------------------</span></span><br><span class=\"line\">    msg = cipher.encrypt(final_data)  <span class=\"comment\"># 要加密的字符串，必须是16个字节或16个字节的倍数,加密后是byte格式</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> msg</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">############################### 解密 ##############################</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decrypt</span><span class=\"params\">(msg)</span>:</span></span><br><span class=\"line\">    key = <span class=\"string\">b'dfdsdfsasdfdsdfs'</span></span><br><span class=\"line\">    cipher = AES.new(key, AES.MODE_CBC, key)</span><br><span class=\"line\">    result = cipher.decrypt(msg)  <span class=\"comment\"># 把加密后的字节解密成不加密的字节</span></span><br><span class=\"line\">    data = result[<span class=\"number\">0</span>:-result[<span class=\"number\">-1</span>]]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str(data, encoding=<span class=\"string\">'utf-8'</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li><a href=\"https://github.com/sfbahr/PyCrypto-Wheels\" target=\"_blank\" rel=\"noopener\">https://github.com/sfbahr/PyCrypto-Wheels</a></li>\n</ul>\n"},{"title":"Phantomjs","date":"2018-01-04T03:49:30.000Z","keywords":null,"description":"使用 Phantomjs 过程中遇到的问题","_content":"\n\n# 无法打开https网站\n用 `phantomjs` 自动登陆并爬取一些数据，发现爬取 `https` 类型的网站的时候无法正常操作\n\n`Phantomjs`中有个`service_args`参数可以忽略https错误\n\n```python\ndriver = webdriver.PhantomJS(desired_capabilities=cap, service_args=['--ignore-ssl-errors=true'])\n```\n\n# 获取 cookie\n\n```python\nfrom selenium import webdriver\nimport pickle\ndriver=webdriver.PhantomJS()\ndriver.get(url)  #此处url填写需要访问的地址\n# 获得 cookie信息\ncookie_list = driver.get_cookies()\nprint (cookie_list)\ncookie_dict = {}\nfor cookie in cookie_list:\n    #写入文件\n    f = open('cookie.txt','wb+')\n    pickle.dump(cookie, f)\n    f.close()\n　　　\ncookie_dict[cookie['name']] = cookie['value']\n```\n\n# 引用\n- <http://www.cnblogs.com/fly-kaka/p/6656196.html>\n- <https://www.cnblogs.com/Jacck/p/7675284.html>\n\n","source":"_posts/Phantomjs.md","raw":"---\ntitle: Phantomjs\ndate: 2018-01-04 11:49:30\ntags: phantomjs\ncategories:\nkeywords:\ndescription: 使用 Phantomjs 过程中遇到的问题\n---\n\n\n# 无法打开https网站\n用 `phantomjs` 自动登陆并爬取一些数据，发现爬取 `https` 类型的网站的时候无法正常操作\n\n`Phantomjs`中有个`service_args`参数可以忽略https错误\n\n```python\ndriver = webdriver.PhantomJS(desired_capabilities=cap, service_args=['--ignore-ssl-errors=true'])\n```\n\n# 获取 cookie\n\n```python\nfrom selenium import webdriver\nimport pickle\ndriver=webdriver.PhantomJS()\ndriver.get(url)  #此处url填写需要访问的地址\n# 获得 cookie信息\ncookie_list = driver.get_cookies()\nprint (cookie_list)\ncookie_dict = {}\nfor cookie in cookie_list:\n    #写入文件\n    f = open('cookie.txt','wb+')\n    pickle.dump(cookie, f)\n    f.close()\n　　　\ncookie_dict[cookie['name']] = cookie['value']\n```\n\n# 引用\n- <http://www.cnblogs.com/fly-kaka/p/6656196.html>\n- <https://www.cnblogs.com/Jacck/p/7675284.html>\n\n","slug":"Phantomjs","published":1,"updated":"2018-04-01T14:19:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfgx5owg0006mxgoe7lttnkl","content":"<h1 id=\"无法打开https网站\"><a href=\"#无法打开https网站\" class=\"headerlink\" title=\"无法打开https网站\"></a>无法打开https网站</h1><p>用 <code>phantomjs</code> 自动登陆并爬取一些数据，发现爬取 <code>https</code> 类型的网站的时候无法正常操作</p>\n<p><code>Phantomjs</code>中有个<code>service_args</code>参数可以忽略https错误</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">driver = webdriver.PhantomJS(desired_capabilities=cap, service_args=[<span class=\"string\">'--ignore-ssl-errors=true'</span>])</span><br></pre></td></tr></table></figure>\n<h1 id=\"获取-cookie\"><a href=\"#获取-cookie\" class=\"headerlink\" title=\"获取 cookie\"></a>获取 cookie</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">import</span> pickle</span><br><span class=\"line\">driver=webdriver.PhantomJS()</span><br><span class=\"line\">driver.get(url)  <span class=\"comment\">#此处url填写需要访问的地址</span></span><br><span class=\"line\"><span class=\"comment\"># 获得 cookie信息</span></span><br><span class=\"line\">cookie_list = driver.get_cookies()</span><br><span class=\"line\"><span class=\"keyword\">print</span> (cookie_list)</span><br><span class=\"line\">cookie_dict = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> cookie <span class=\"keyword\">in</span> cookie_list:</span><br><span class=\"line\">    <span class=\"comment\">#写入文件</span></span><br><span class=\"line\">    f = open(<span class=\"string\">'cookie.txt'</span>,<span class=\"string\">'wb+'</span>)</span><br><span class=\"line\">    pickle.dump(cookie, f)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\">　　　</span><br><span class=\"line\">cookie_dict[cookie[<span class=\"string\">'name'</span>]] = cookie[<span class=\"string\">'value'</span>]</span><br></pre></td></tr></table></figure>\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><ul>\n<li><a href=\"http://www.cnblogs.com/fly-kaka/p/6656196.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/fly-kaka/p/6656196.html</a></li>\n<li><a href=\"https://www.cnblogs.com/Jacck/p/7675284.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/Jacck/p/7675284.html</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"无法打开https网站\"><a href=\"#无法打开https网站\" class=\"headerlink\" title=\"无法打开https网站\"></a>无法打开https网站</h1><p>用 <code>phantomjs</code> 自动登陆并爬取一些数据，发现爬取 <code>https</code> 类型的网站的时候无法正常操作</p>\n<p><code>Phantomjs</code>中有个<code>service_args</code>参数可以忽略https错误</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">driver = webdriver.PhantomJS(desired_capabilities=cap, service_args=[<span class=\"string\">'--ignore-ssl-errors=true'</span>])</span><br></pre></td></tr></table></figure>\n<h1 id=\"获取-cookie\"><a href=\"#获取-cookie\" class=\"headerlink\" title=\"获取 cookie\"></a>获取 cookie</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">import</span> pickle</span><br><span class=\"line\">driver=webdriver.PhantomJS()</span><br><span class=\"line\">driver.get(url)  <span class=\"comment\">#此处url填写需要访问的地址</span></span><br><span class=\"line\"><span class=\"comment\"># 获得 cookie信息</span></span><br><span class=\"line\">cookie_list = driver.get_cookies()</span><br><span class=\"line\"><span class=\"keyword\">print</span> (cookie_list)</span><br><span class=\"line\">cookie_dict = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> cookie <span class=\"keyword\">in</span> cookie_list:</span><br><span class=\"line\">    <span class=\"comment\">#写入文件</span></span><br><span class=\"line\">    f = open(<span class=\"string\">'cookie.txt'</span>,<span class=\"string\">'wb+'</span>)</span><br><span class=\"line\">    pickle.dump(cookie, f)</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\">　　　</span><br><span class=\"line\">cookie_dict[cookie[<span class=\"string\">'name'</span>]] = cookie[<span class=\"string\">'value'</span>]</span><br></pre></td></tr></table></figure>\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><ul>\n<li><a href=\"http://www.cnblogs.com/fly-kaka/p/6656196.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/fly-kaka/p/6656196.html</a></li>\n<li><a href=\"https://www.cnblogs.com/Jacck/p/7675284.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/Jacck/p/7675284.html</a></li>\n</ul>\n"},{"title":"时间复杂度与空间复杂度","date":"2017-09-20T04:11:51.000Z","keywords":null,"description":"算法的时间复杂度是一个函数，它定量描述了该算法的运行时间。","_content":"\n算法的时间复杂度是一个函数，它定量描述了该算法的运行时间。用来评估算法运行效率的单位。\n<!-- more -->\n\n# 时间复杂度\n>时间复杂度是用来估计算法运行时间的一个式子（单位） T(n) = O(n^2)\n\n按数量级递增排列，常见的时间复杂度有：常数阶O(1),对数阶O(log2n),线性阶O(n), 线性对数阶O(nlog2n),平方阶O(n2)，立方阶O(n3),...， k次方阶O(nk),指数阶O(2n)。随着问题规模n的不断增大，上述时间复杂度不断增大，算法的执行效率越低。\n\n- 一般来说,时间复杂度高的算法比复杂度底的算法慢.\n\n```python\nprint('Hello World')    # O(1)\n\nfor i in range(n):    # O(n)\n    print('Hello World')\n\nfor i in range(n):    # O(n²)\n    for i in range(n):\n        print('Hello World')\n\nfor i in range(n):    # O(n³)\n    for j in rnage(n):\n        for k in range(n):\n            print('Hello World')\n```\n\n\n## 如何一眼判断时间复杂度\n- 循环减半的过程 -->`O(logn)`\n- 几次循环就是`n`的几次方的复杂度\n\n\n## 时间复杂度排序\n\n- 常见的时间复杂度\n\n```\nO(1)<O(logn)<O(n)<O(nlogn)<O(n²)<O(n²logn)<O(n³)\n```\n\n- 不常见的时间复杂度\n\n```\nO(n!) O(2n) O(nn) …\n```\n\n\n    几秒钟/O(1)\n    几分钟/O(n)\n    几小时/O(n²) // 2 平方\n    高级： 函数 见进阶\n\n## 判断时间复杂度\n\n```python\n# 1    O(1)  时间复杂度\nprint('Hello World')\nprint('Hello Python')\nprint('Hello Algorithm')\n\n# 2    O(n²) 时间复杂度\nfor i in range(n):\n    print('Hello World')\n    for i in range(n):\n        print('Hello World')\n\n# 3    O(n²) 时间复杂度\nfor i in range(n):\n    for j in range(i):\n        print('Hello World')\n```\n\n\n```python\n# 以2为底64的对数\nn = 64\nwhile n > 1:\n    print(n)\n    n = n // 2\n# 时间复杂度 O(log2n) / O(logn)\n# 每次少一半\n```\n\n![](https://i.imgur.com/A0jhF7s.jpg)\n\n\n\n# 空间复杂度\n\n>用来评估算法内存占用大小的式子    S(n) = O(n^2) 表示内存占用\n时间复杂度比空间复杂度更重要\n\n- 空间换时间\n\n一个列表就是 O(n)\n二维列表复杂度就是 O(n²)\n...\n\n","source":"_posts/algorithm-complexity.md","raw":"---\ntitle: 时间复杂度与空间复杂度\ndate: 2017-9-20 12:11:51\ntags:\ncategories: 算法\nkeywords:\ndescription: 算法的时间复杂度是一个函数，它定量描述了该算法的运行时间。\n---\n\n算法的时间复杂度是一个函数，它定量描述了该算法的运行时间。用来评估算法运行效率的单位。\n<!-- more -->\n\n# 时间复杂度\n>时间复杂度是用来估计算法运行时间的一个式子（单位） T(n) = O(n^2)\n\n按数量级递增排列，常见的时间复杂度有：常数阶O(1),对数阶O(log2n),线性阶O(n), 线性对数阶O(nlog2n),平方阶O(n2)，立方阶O(n3),...， k次方阶O(nk),指数阶O(2n)。随着问题规模n的不断增大，上述时间复杂度不断增大，算法的执行效率越低。\n\n- 一般来说,时间复杂度高的算法比复杂度底的算法慢.\n\n```python\nprint('Hello World')    # O(1)\n\nfor i in range(n):    # O(n)\n    print('Hello World')\n\nfor i in range(n):    # O(n²)\n    for i in range(n):\n        print('Hello World')\n\nfor i in range(n):    # O(n³)\n    for j in rnage(n):\n        for k in range(n):\n            print('Hello World')\n```\n\n\n## 如何一眼判断时间复杂度\n- 循环减半的过程 -->`O(logn)`\n- 几次循环就是`n`的几次方的复杂度\n\n\n## 时间复杂度排序\n\n- 常见的时间复杂度\n\n```\nO(1)<O(logn)<O(n)<O(nlogn)<O(n²)<O(n²logn)<O(n³)\n```\n\n- 不常见的时间复杂度\n\n```\nO(n!) O(2n) O(nn) …\n```\n\n\n    几秒钟/O(1)\n    几分钟/O(n)\n    几小时/O(n²) // 2 平方\n    高级： 函数 见进阶\n\n## 判断时间复杂度\n\n```python\n# 1    O(1)  时间复杂度\nprint('Hello World')\nprint('Hello Python')\nprint('Hello Algorithm')\n\n# 2    O(n²) 时间复杂度\nfor i in range(n):\n    print('Hello World')\n    for i in range(n):\n        print('Hello World')\n\n# 3    O(n²) 时间复杂度\nfor i in range(n):\n    for j in range(i):\n        print('Hello World')\n```\n\n\n```python\n# 以2为底64的对数\nn = 64\nwhile n > 1:\n    print(n)\n    n = n // 2\n# 时间复杂度 O(log2n) / O(logn)\n# 每次少一半\n```\n\n![](https://i.imgur.com/A0jhF7s.jpg)\n\n\n\n# 空间复杂度\n\n>用来评估算法内存占用大小的式子    S(n) = O(n^2) 表示内存占用\n时间复杂度比空间复杂度更重要\n\n- 空间换时间\n\n一个列表就是 O(n)\n二维列表复杂度就是 O(n²)\n...\n\n","slug":"algorithm-complexity","published":1,"updated":"2018-04-01T13:23:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfgx5owi0007mxgoxg3w09gy","content":"<p>算法的时间复杂度是一个函数，它定量描述了该算法的运行时间。用来评估算法运行效率的单位。<br><a id=\"more\"></a></p>\n<h1 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h1><blockquote>\n<p>时间复杂度是用来估计算法运行时间的一个式子（单位） T(n) = O(n^2)</p>\n</blockquote>\n<p>按数量级递增排列，常见的时间复杂度有：常数阶O(1),对数阶O(log2n),线性阶O(n), 线性对数阶O(nlog2n),平方阶O(n2)，立方阶O(n3),…， k次方阶O(nk),指数阶O(2n)。随着问题规模n的不断增大，上述时间复杂度不断增大，算法的执行效率越低。</p>\n<ul>\n<li>一般来说,时间复杂度高的算法比复杂度底的算法慢.</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'Hello World'</span>)    <span class=\"comment\"># O(1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):    <span class=\"comment\"># O(n)</span></span><br><span class=\"line\">    print(<span class=\"string\">'Hello World'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):    <span class=\"comment\"># O(n²)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">        print(<span class=\"string\">'Hello World'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):    <span class=\"comment\"># O(n³)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> rnage(n):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">            print(<span class=\"string\">'Hello World'</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何一眼判断时间复杂度\"><a href=\"#如何一眼判断时间复杂度\" class=\"headerlink\" title=\"如何一眼判断时间复杂度\"></a>如何一眼判断时间复杂度</h2><ul>\n<li>循环减半的过程 –&gt;<code>O(logn)</code></li>\n<li>几次循环就是<code>n</code>的几次方的复杂度</li>\n</ul>\n<h2 id=\"时间复杂度排序\"><a href=\"#时间复杂度排序\" class=\"headerlink\" title=\"时间复杂度排序\"></a>时间复杂度排序</h2><ul>\n<li>常见的时间复杂度</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n²)&lt;O(n²logn)&lt;O(n³)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>不常见的时间复杂度</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">O(n!) O(2n) O(nn) …</span><br></pre></td></tr></table></figure>\n<pre><code>几秒钟/O(1)\n几分钟/O(n)\n几小时/O(n²) // 2 平方\n高级： 函数 见进阶\n</code></pre><h2 id=\"判断时间复杂度\"><a href=\"#判断时间复杂度\" class=\"headerlink\" title=\"判断时间复杂度\"></a>判断时间复杂度</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1    O(1)  时间复杂度</span></span><br><span class=\"line\">print(<span class=\"string\">'Hello World'</span>)</span><br><span class=\"line\">print(<span class=\"string\">'Hello Python'</span>)</span><br><span class=\"line\">print(<span class=\"string\">'Hello Algorithm'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2    O(n²) 时间复杂度</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">    print(<span class=\"string\">'Hello World'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">        print(<span class=\"string\">'Hello World'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3    O(n²) 时间复杂度</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(i):</span><br><span class=\"line\">        print(<span class=\"string\">'Hello World'</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 以2为底64的对数</span></span><br><span class=\"line\">n = <span class=\"number\">64</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> n &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">    print(n)</span><br><span class=\"line\">    n = n // <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\"># 时间复杂度 O(log2n) / O(logn)</span></span><br><span class=\"line\"><span class=\"comment\"># 每次少一半</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/A0jhF7s.jpg\" alt=\"\"></p>\n<h1 id=\"空间复杂度\"><a href=\"#空间复杂度\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h1><blockquote>\n<p>用来评估算法内存占用大小的式子    S(n) = O(n^2) 表示内存占用<br>时间复杂度比空间复杂度更重要</p>\n</blockquote>\n<ul>\n<li>空间换时间</li>\n</ul>\n<p>一个列表就是 O(n)<br>二维列表复杂度就是 O(n²)<br>…</p>\n","site":{"data":{}},"excerpt":"<p>算法的时间复杂度是一个函数，它定量描述了该算法的运行时间。用来评估算法运行效率的单位。<br>","more":"</p>\n<h1 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h1><blockquote>\n<p>时间复杂度是用来估计算法运行时间的一个式子（单位） T(n) = O(n^2)</p>\n</blockquote>\n<p>按数量级递增排列，常见的时间复杂度有：常数阶O(1),对数阶O(log2n),线性阶O(n), 线性对数阶O(nlog2n),平方阶O(n2)，立方阶O(n3),…， k次方阶O(nk),指数阶O(2n)。随着问题规模n的不断增大，上述时间复杂度不断增大，算法的执行效率越低。</p>\n<ul>\n<li>一般来说,时间复杂度高的算法比复杂度底的算法慢.</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'Hello World'</span>)    <span class=\"comment\"># O(1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):    <span class=\"comment\"># O(n)</span></span><br><span class=\"line\">    print(<span class=\"string\">'Hello World'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):    <span class=\"comment\"># O(n²)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">        print(<span class=\"string\">'Hello World'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):    <span class=\"comment\"># O(n³)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> rnage(n):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">            print(<span class=\"string\">'Hello World'</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何一眼判断时间复杂度\"><a href=\"#如何一眼判断时间复杂度\" class=\"headerlink\" title=\"如何一眼判断时间复杂度\"></a>如何一眼判断时间复杂度</h2><ul>\n<li>循环减半的过程 –&gt;<code>O(logn)</code></li>\n<li>几次循环就是<code>n</code>的几次方的复杂度</li>\n</ul>\n<h2 id=\"时间复杂度排序\"><a href=\"#时间复杂度排序\" class=\"headerlink\" title=\"时间复杂度排序\"></a>时间复杂度排序</h2><ul>\n<li>常见的时间复杂度</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n²)&lt;O(n²logn)&lt;O(n³)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>不常见的时间复杂度</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">O(n!) O(2n) O(nn) …</span><br></pre></td></tr></table></figure>\n<pre><code>几秒钟/O(1)\n几分钟/O(n)\n几小时/O(n²) // 2 平方\n高级： 函数 见进阶\n</code></pre><h2 id=\"判断时间复杂度\"><a href=\"#判断时间复杂度\" class=\"headerlink\" title=\"判断时间复杂度\"></a>判断时间复杂度</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1    O(1)  时间复杂度</span></span><br><span class=\"line\">print(<span class=\"string\">'Hello World'</span>)</span><br><span class=\"line\">print(<span class=\"string\">'Hello Python'</span>)</span><br><span class=\"line\">print(<span class=\"string\">'Hello Algorithm'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2    O(n²) 时间复杂度</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">    print(<span class=\"string\">'Hello World'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">        print(<span class=\"string\">'Hello World'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3    O(n²) 时间复杂度</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(i):</span><br><span class=\"line\">        print(<span class=\"string\">'Hello World'</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 以2为底64的对数</span></span><br><span class=\"line\">n = <span class=\"number\">64</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> n &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">    print(n)</span><br><span class=\"line\">    n = n // <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\"># 时间复杂度 O(log2n) / O(logn)</span></span><br><span class=\"line\"><span class=\"comment\"># 每次少一半</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/A0jhF7s.jpg\" alt=\"\"></p>\n<h1 id=\"空间复杂度\"><a href=\"#空间复杂度\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h1><blockquote>\n<p>用来评估算法内存占用大小的式子    S(n) = O(n^2) 表示内存占用<br>时间复杂度比空间复杂度更重要</p>\n</blockquote>\n<ul>\n<li>空间换时间</li>\n</ul>\n<p>一个列表就是 O(n)<br>二维列表复杂度就是 O(n²)<br>…</p>"},{"title":"密码学基础","date":"2017-11-01T12:10:33.000Z","_content":"\n平常用的登录密码不叫密码，是登录口令\n\n<!-- more -->\n\n密码有一个加密和解密的过程\n\n\n**video:** <https://youtu.be/loJ62rvH8aE>\n\n## 古典密码\n\n### 凯撒密码\n\n```\nABC\nCDE\n// 往后移动3位或者多位\n```\n非常容易破解\n\n### 维吉尼亚密码\n\n>不知道密钥是非常非常难破解的\n\n![维吉尼亚密码](https://i.imgur.com/OAm1EPk.jpg)\n\n\n- RSA\n    - 公钥\n    - 私钥 \n\n```\n明文--> 公钥 --> 密文\n密文--> 私钥 --> 明文\n```\n\n基于`大数难分解`\n两个质数相乘\n\n```python\np1 = 53\np2 = 59\nn = 3127  # 53 * 59 = 3127\n# 欧拉函数\nΦ(n)(p1-1)*(p2-1)= 3016 # fai 小写 φ\ne = 3   # e 和欧拉函数互质 只要互质随便取\n# 公钥是 n，e\nd = (k*φ(n)+1)/e = 2011 # 私钥 (2**3016+1)/3 = 2011\n\n# 验证\nm = 89 # 加密信息 \nc = (m**e)%n = 1394   # 密文 (89**3)%3127 = 1394\n明文 = (x**d)%n = 89 # 明文 (1394**2011)%3127 = 89\n```\n\n扩展:\n\n**费马小定理**来验证.\n\n","source":"_posts/basis-of-cryptography.md","raw":"title: 密码学基础\ndate: 2017-11-01 20:10:33\ntags:\n---\n\n平常用的登录密码不叫密码，是登录口令\n\n<!-- more -->\n\n密码有一个加密和解密的过程\n\n\n**video:** <https://youtu.be/loJ62rvH8aE>\n\n## 古典密码\n\n### 凯撒密码\n\n```\nABC\nCDE\n// 往后移动3位或者多位\n```\n非常容易破解\n\n### 维吉尼亚密码\n\n>不知道密钥是非常非常难破解的\n\n![维吉尼亚密码](https://i.imgur.com/OAm1EPk.jpg)\n\n\n- RSA\n    - 公钥\n    - 私钥 \n\n```\n明文--> 公钥 --> 密文\n密文--> 私钥 --> 明文\n```\n\n基于`大数难分解`\n两个质数相乘\n\n```python\np1 = 53\np2 = 59\nn = 3127  # 53 * 59 = 3127\n# 欧拉函数\nΦ(n)(p1-1)*(p2-1)= 3016 # fai 小写 φ\ne = 3   # e 和欧拉函数互质 只要互质随便取\n# 公钥是 n，e\nd = (k*φ(n)+1)/e = 2011 # 私钥 (2**3016+1)/3 = 2011\n\n# 验证\nm = 89 # 加密信息 \nc = (m**e)%n = 1394   # 密文 (89**3)%3127 = 1394\n明文 = (x**d)%n = 89 # 明文 (1394**2011)%3127 = 89\n```\n\n扩展:\n\n**费马小定理**来验证.\n\n","slug":"basis-of-cryptography","published":1,"updated":"2018-04-01T13:23:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfgx5owk000amxgov8v1oovh","content":"<p>平常用的登录密码不叫密码，是登录口令</p>\n<a id=\"more\"></a>\n<p>密码有一个加密和解密的过程</p>\n<p><strong>video:</strong> <a href=\"https://youtu.be/loJ62rvH8aE\" target=\"_blank\" rel=\"noopener\">https://youtu.be/loJ62rvH8aE</a></p>\n<h2 id=\"古典密码\"><a href=\"#古典密码\" class=\"headerlink\" title=\"古典密码\"></a>古典密码</h2><h3 id=\"凯撒密码\"><a href=\"#凯撒密码\" class=\"headerlink\" title=\"凯撒密码\"></a>凯撒密码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ABC</span><br><span class=\"line\">CDE</span><br><span class=\"line\">// 往后移动3位或者多位</span><br></pre></td></tr></table></figure>\n<p>非常容易破解</p>\n<h3 id=\"维吉尼亚密码\"><a href=\"#维吉尼亚密码\" class=\"headerlink\" title=\"维吉尼亚密码\"></a>维吉尼亚密码</h3><blockquote>\n<p>不知道密钥是非常非常难破解的</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/OAm1EPk.jpg\" alt=\"维吉尼亚密码\"></p>\n<ul>\n<li>RSA<ul>\n<li>公钥</li>\n<li>私钥 </li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">明文--&gt; 公钥 --&gt; 密文</span><br><span class=\"line\">密文--&gt; 私钥 --&gt; 明文</span><br></pre></td></tr></table></figure>\n<p>基于<code>大数难分解</code><br>两个质数相乘</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p1 = <span class=\"number\">53</span></span><br><span class=\"line\">p2 = <span class=\"number\">59</span></span><br><span class=\"line\">n = <span class=\"number\">3127</span>  <span class=\"comment\"># 53 * 59 = 3127</span></span><br><span class=\"line\"><span class=\"comment\"># 欧拉函数</span></span><br><span class=\"line\">Φ(n)(p1<span class=\"number\">-1</span>)*(p2<span class=\"number\">-1</span>)= <span class=\"number\">3016</span> <span class=\"comment\"># fai 小写 φ</span></span><br><span class=\"line\">e = <span class=\"number\">3</span>   <span class=\"comment\"># e 和欧拉函数互质 只要互质随便取</span></span><br><span class=\"line\"><span class=\"comment\"># 公钥是 n，e</span></span><br><span class=\"line\">d = (k*φ(n)+<span class=\"number\">1</span>)/e = <span class=\"number\">2011</span> <span class=\"comment\"># 私钥 (2**3016+1)/3 = 2011</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证</span></span><br><span class=\"line\">m = <span class=\"number\">89</span> <span class=\"comment\"># 加密信息 </span></span><br><span class=\"line\">c = (m**e)%n = <span class=\"number\">1394</span>   <span class=\"comment\"># 密文 (89**3)%3127 = 1394</span></span><br><span class=\"line\">明文 = (x**d)%n = <span class=\"number\">89</span> <span class=\"comment\"># 明文 (1394**2011)%3127 = 89</span></span><br></pre></td></tr></table></figure>\n<p>扩展:</p>\n<p><strong>费马小定理</strong>来验证.</p>\n","site":{"data":{}},"excerpt":"<p>平常用的登录密码不叫密码，是登录口令</p>","more":"<p>密码有一个加密和解密的过程</p>\n<p><strong>video:</strong> <a href=\"https://youtu.be/loJ62rvH8aE\" target=\"_blank\" rel=\"noopener\">https://youtu.be/loJ62rvH8aE</a></p>\n<h2 id=\"古典密码\"><a href=\"#古典密码\" class=\"headerlink\" title=\"古典密码\"></a>古典密码</h2><h3 id=\"凯撒密码\"><a href=\"#凯撒密码\" class=\"headerlink\" title=\"凯撒密码\"></a>凯撒密码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ABC</span><br><span class=\"line\">CDE</span><br><span class=\"line\">// 往后移动3位或者多位</span><br></pre></td></tr></table></figure>\n<p>非常容易破解</p>\n<h3 id=\"维吉尼亚密码\"><a href=\"#维吉尼亚密码\" class=\"headerlink\" title=\"维吉尼亚密码\"></a>维吉尼亚密码</h3><blockquote>\n<p>不知道密钥是非常非常难破解的</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/OAm1EPk.jpg\" alt=\"维吉尼亚密码\"></p>\n<ul>\n<li>RSA<ul>\n<li>公钥</li>\n<li>私钥 </li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">明文--&gt; 公钥 --&gt; 密文</span><br><span class=\"line\">密文--&gt; 私钥 --&gt; 明文</span><br></pre></td></tr></table></figure>\n<p>基于<code>大数难分解</code><br>两个质数相乘</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p1 = <span class=\"number\">53</span></span><br><span class=\"line\">p2 = <span class=\"number\">59</span></span><br><span class=\"line\">n = <span class=\"number\">3127</span>  <span class=\"comment\"># 53 * 59 = 3127</span></span><br><span class=\"line\"><span class=\"comment\"># 欧拉函数</span></span><br><span class=\"line\">Φ(n)(p1<span class=\"number\">-1</span>)*(p2<span class=\"number\">-1</span>)= <span class=\"number\">3016</span> <span class=\"comment\"># fai 小写 φ</span></span><br><span class=\"line\">e = <span class=\"number\">3</span>   <span class=\"comment\"># e 和欧拉函数互质 只要互质随便取</span></span><br><span class=\"line\"><span class=\"comment\"># 公钥是 n，e</span></span><br><span class=\"line\">d = (k*φ(n)+<span class=\"number\">1</span>)/e = <span class=\"number\">2011</span> <span class=\"comment\"># 私钥 (2**3016+1)/3 = 2011</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证</span></span><br><span class=\"line\">m = <span class=\"number\">89</span> <span class=\"comment\"># 加密信息 </span></span><br><span class=\"line\">c = (m**e)%n = <span class=\"number\">1394</span>   <span class=\"comment\"># 密文 (89**3)%3127 = 1394</span></span><br><span class=\"line\">明文 = (x**d)%n = <span class=\"number\">89</span> <span class=\"comment\"># 明文 (1394**2011)%3127 = 89</span></span><br></pre></td></tr></table></figure>\n<p>扩展:</p>\n<p><strong>费马小定理</strong>来验证.</p>"},{"title":"数据结构：树","date":"2017-12-25T07:04:18.000Z","keywords":"树，二叉树","description":"认识树与二叉树","_content":"\n# 树\n\n![树（数据结构）](https://i.imgur.com/JH2f8TO.jpg)\n\n- 是一种数据结构（如：目录结构） \n- 是一种可以递归定义的数据结构\n- 是由 n 个节点组成的集合\n    - 如果 n=0 ，那么是一颗空树\n    - 如果 n>0 ，那么存在 1 个节点作为树的根节点，其他节点可以分为 m 个集合，每个集合本身又是一棵树。\n\n**概念：**\n\n- 根节点（最顶端的节点）、叶子节点（没有孩子的节点，结构的最末端）\n- 树的深度／高度（也就是树的层数）\n- 节点度（也就是这个节点分了多少叉）\n- 树的度（所有节点度的最大值）\n- 孩子节点/父节点（看字面理解）\n- 子树（根节点的字节点都是独立的树）\n\n# 二叉树\n度不超过 2 的树（节点最多有两个叉），它的孩子是有顺序的：左孩子，右孩子。\n![二叉树的多种形态](https://i.imgur.com/Fq7IcbA.jpg)\n\n重点：满二叉树，完全二叉树\n\n\n## 二叉树的存储方式\n1. 链式存储方式\n2. 顺序存储方式（列表）\n3. 面向对象的存储方式\n\n![](https://i.imgur.com/X5OMYC1.jpg)\n\n父节点和左孩子节点的编号下标有什么关系？\n>0-1 1-3 2-5 3-7 4-9\n规律：i = 2i+1\n\n父节点和右孩子节点的编号下标有什么关系？\n>0-2 1-4 2-6 3-8 4-10\n规律：i = 2i+2\n\n比如，我们要找根节点左孩子的左孩子：（0\\*2+1）\\*2+1 = 3 （下标） 所以是`6`\n\n## 面向对象的存储方式\n\n```python\nclass BinTreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.lchild = None\n        self.rchild = None\n\nk = BinTreeNode('K')\ng = BinTreeNode('G')\nc = BinTreeNode('C')\na = BinTreeNode('A')\nb = BinTreeNode('B')\nd = BinTreeNode('D')\ne = BinTreeNode('E')\nf = BinTreeNode('F')\nh = BinTreeNode('H')\n\n\nroot = a\na.lchild = b\na.rchild = e\nb.lchild = h\nb.rchild = f\nf.lchild = d\ne.rchild = c\nc.lchild = k\nc.rchild = g\n```\n![二叉树](https://i.imgur.com/umYC031.jpg)\n\n- 前序遍历 \n\n```python\n\n\ndef PreBianli(root):\n    p = root\n    if p:\n        print(p.data, end=' ')\n        PreBianli(p.lchild)\n        PreBianli(p.rchild)\n\n# PreBianli(root)   # A B H F D E C K G    前序遍历\n```\n\n- 中序遍历\n\n```python\ndef MidBianli(root):\n    p = root\n    if p:\n        MidBianli(p.lchild)\n        print(p.data, end=' ')\n        MidBianli(p.rchild)\n# MidBianli(root)   # H B D F A E K C G    中序遍历\n```\n\n- 后序遍历\n\n```python\ndef PostBianli(root):\n    p = root\n    if p:\n        PostBianli(p.lchild)\n        PostBianli(p.rchild)\n        print(p.data, end=' ')\n# PostBianli(root)  # H D F B K G C E A    后序遍历\n```\n*在根据任意两个序列来推测第三个序列的时候，有中序比较好推测，因为能一眼看出二叉树的根*\n\n![前序遍历](https://i.imgur.com/4pl3DJs.jpg)\n![中序遍历](https://i.imgur.com/jJGlzo8.jpg)\n![后续遍历](https://i.imgur.com/GyEjLF3.jpg)\n\n#### 层级遍历\n\n```python\ndef LevelBianli(root):\n    curLevel = [root]\n    nextLevel = []\n    while len(curLevel)>0:\n        for node in  curLevel:\n            print(node.data, end=' ')\n            if node.lchild:\n                nextLevel.append(node.lchild)\n            if node.rchild:\n                nextLevel.append(node.rchild)\n        curLevel = nextLevel\n        nextLevel = []\n\nLevelBianli(root)   # A B E H F C D K G\n```\n\n## 二叉树小结\n- 二叉树是度不超过 2 的树\n- 满二叉树与完全二叉树\n- （完全）二叉树可以用列表来存储，通过规律可以从父亲找到孩子或者孩子找到父亲\n- 二叉树遍历方式 : `前序遍历` `中序遍历` `后序遍历`\n\n\n","source":"_posts/data-structure-tree.md","raw":"---\ntitle: 数据结构：树\ndate: 2017-12-25 15:04:18\ntags: \ncategories: 数据结构\nkeywords: 树，二叉树\ndescription: 认识树与二叉树\n---\n\n# 树\n\n![树（数据结构）](https://i.imgur.com/JH2f8TO.jpg)\n\n- 是一种数据结构（如：目录结构） \n- 是一种可以递归定义的数据结构\n- 是由 n 个节点组成的集合\n    - 如果 n=0 ，那么是一颗空树\n    - 如果 n>0 ，那么存在 1 个节点作为树的根节点，其他节点可以分为 m 个集合，每个集合本身又是一棵树。\n\n**概念：**\n\n- 根节点（最顶端的节点）、叶子节点（没有孩子的节点，结构的最末端）\n- 树的深度／高度（也就是树的层数）\n- 节点度（也就是这个节点分了多少叉）\n- 树的度（所有节点度的最大值）\n- 孩子节点/父节点（看字面理解）\n- 子树（根节点的字节点都是独立的树）\n\n# 二叉树\n度不超过 2 的树（节点最多有两个叉），它的孩子是有顺序的：左孩子，右孩子。\n![二叉树的多种形态](https://i.imgur.com/Fq7IcbA.jpg)\n\n重点：满二叉树，完全二叉树\n\n\n## 二叉树的存储方式\n1. 链式存储方式\n2. 顺序存储方式（列表）\n3. 面向对象的存储方式\n\n![](https://i.imgur.com/X5OMYC1.jpg)\n\n父节点和左孩子节点的编号下标有什么关系？\n>0-1 1-3 2-5 3-7 4-9\n规律：i = 2i+1\n\n父节点和右孩子节点的编号下标有什么关系？\n>0-2 1-4 2-6 3-8 4-10\n规律：i = 2i+2\n\n比如，我们要找根节点左孩子的左孩子：（0\\*2+1）\\*2+1 = 3 （下标） 所以是`6`\n\n## 面向对象的存储方式\n\n```python\nclass BinTreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.lchild = None\n        self.rchild = None\n\nk = BinTreeNode('K')\ng = BinTreeNode('G')\nc = BinTreeNode('C')\na = BinTreeNode('A')\nb = BinTreeNode('B')\nd = BinTreeNode('D')\ne = BinTreeNode('E')\nf = BinTreeNode('F')\nh = BinTreeNode('H')\n\n\nroot = a\na.lchild = b\na.rchild = e\nb.lchild = h\nb.rchild = f\nf.lchild = d\ne.rchild = c\nc.lchild = k\nc.rchild = g\n```\n![二叉树](https://i.imgur.com/umYC031.jpg)\n\n- 前序遍历 \n\n```python\n\n\ndef PreBianli(root):\n    p = root\n    if p:\n        print(p.data, end=' ')\n        PreBianli(p.lchild)\n        PreBianli(p.rchild)\n\n# PreBianli(root)   # A B H F D E C K G    前序遍历\n```\n\n- 中序遍历\n\n```python\ndef MidBianli(root):\n    p = root\n    if p:\n        MidBianli(p.lchild)\n        print(p.data, end=' ')\n        MidBianli(p.rchild)\n# MidBianli(root)   # H B D F A E K C G    中序遍历\n```\n\n- 后序遍历\n\n```python\ndef PostBianli(root):\n    p = root\n    if p:\n        PostBianli(p.lchild)\n        PostBianli(p.rchild)\n        print(p.data, end=' ')\n# PostBianli(root)  # H D F B K G C E A    后序遍历\n```\n*在根据任意两个序列来推测第三个序列的时候，有中序比较好推测，因为能一眼看出二叉树的根*\n\n![前序遍历](https://i.imgur.com/4pl3DJs.jpg)\n![中序遍历](https://i.imgur.com/jJGlzo8.jpg)\n![后续遍历](https://i.imgur.com/GyEjLF3.jpg)\n\n#### 层级遍历\n\n```python\ndef LevelBianli(root):\n    curLevel = [root]\n    nextLevel = []\n    while len(curLevel)>0:\n        for node in  curLevel:\n            print(node.data, end=' ')\n            if node.lchild:\n                nextLevel.append(node.lchild)\n            if node.rchild:\n                nextLevel.append(node.rchild)\n        curLevel = nextLevel\n        nextLevel = []\n\nLevelBianli(root)   # A B E H F C D K G\n```\n\n## 二叉树小结\n- 二叉树是度不超过 2 的树\n- 满二叉树与完全二叉树\n- （完全）二叉树可以用列表来存储，通过规律可以从父亲找到孩子或者孩子找到父亲\n- 二叉树遍历方式 : `前序遍历` `中序遍历` `后序遍历`\n\n\n","slug":"data-structure-tree","published":1,"updated":"2018-04-01T14:20:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfgx5owm000cmxgoggo5x7dx","content":"<h1 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h1><p><img src=\"https://i.imgur.com/JH2f8TO.jpg\" alt=\"树（数据结构）\"></p>\n<ul>\n<li>是一种数据结构（如：目录结构） </li>\n<li>是一种可以递归定义的数据结构</li>\n<li>是由 n 个节点组成的集合<ul>\n<li>如果 n=0 ，那么是一颗空树</li>\n<li>如果 n&gt;0 ，那么存在 1 个节点作为树的根节点，其他节点可以分为 m 个集合，每个集合本身又是一棵树。</li>\n</ul>\n</li>\n</ul>\n<p><strong>概念：</strong></p>\n<ul>\n<li>根节点（最顶端的节点）、叶子节点（没有孩子的节点，结构的最末端）</li>\n<li>树的深度／高度（也就是树的层数）</li>\n<li>节点度（也就是这个节点分了多少叉）</li>\n<li>树的度（所有节点度的最大值）</li>\n<li>孩子节点/父节点（看字面理解）</li>\n<li>子树（根节点的字节点都是独立的树）</li>\n</ul>\n<h1 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h1><p>度不超过 2 的树（节点最多有两个叉），它的孩子是有顺序的：左孩子，右孩子。<br><img src=\"https://i.imgur.com/Fq7IcbA.jpg\" alt=\"二叉树的多种形态\"></p>\n<p>重点：满二叉树，完全二叉树</p>\n<h2 id=\"二叉树的存储方式\"><a href=\"#二叉树的存储方式\" class=\"headerlink\" title=\"二叉树的存储方式\"></a>二叉树的存储方式</h2><ol>\n<li>链式存储方式</li>\n<li>顺序存储方式（列表）</li>\n<li>面向对象的存储方式</li>\n</ol>\n<p><img src=\"https://i.imgur.com/X5OMYC1.jpg\" alt=\"\"></p>\n<p>父节点和左孩子节点的编号下标有什么关系？</p>\n<blockquote>\n<p>0-1 1-3 2-5 3-7 4-9<br>规律：i = 2i+1</p>\n</blockquote>\n<p>父节点和右孩子节点的编号下标有什么关系？</p>\n<blockquote>\n<p>0-2 1-4 2-6 3-8 4-10<br>规律：i = 2i+2</p>\n</blockquote>\n<p>比如，我们要找根节点左孩子的左孩子：（0*2+1）*2+1 = 3 （下标） 所以是<code>6</code></p>\n<h2 id=\"面向对象的存储方式\"><a href=\"#面向对象的存储方式\" class=\"headerlink\" title=\"面向对象的存储方式\"></a>面向对象的存储方式</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinTreeNode</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">        self.data = data</span><br><span class=\"line\">        self.lchild = <span class=\"keyword\">None</span></span><br><span class=\"line\">        self.rchild = <span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">k = BinTreeNode(<span class=\"string\">'K'</span>)</span><br><span class=\"line\">g = BinTreeNode(<span class=\"string\">'G'</span>)</span><br><span class=\"line\">c = BinTreeNode(<span class=\"string\">'C'</span>)</span><br><span class=\"line\">a = BinTreeNode(<span class=\"string\">'A'</span>)</span><br><span class=\"line\">b = BinTreeNode(<span class=\"string\">'B'</span>)</span><br><span class=\"line\">d = BinTreeNode(<span class=\"string\">'D'</span>)</span><br><span class=\"line\">e = BinTreeNode(<span class=\"string\">'E'</span>)</span><br><span class=\"line\">f = BinTreeNode(<span class=\"string\">'F'</span>)</span><br><span class=\"line\">h = BinTreeNode(<span class=\"string\">'H'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">root = a</span><br><span class=\"line\">a.lchild = b</span><br><span class=\"line\">a.rchild = e</span><br><span class=\"line\">b.lchild = h</span><br><span class=\"line\">b.rchild = f</span><br><span class=\"line\">f.lchild = d</span><br><span class=\"line\">e.rchild = c</span><br><span class=\"line\">c.lchild = k</span><br><span class=\"line\">c.rchild = g</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/umYC031.jpg\" alt=\"二叉树\"></p>\n<ul>\n<li>前序遍历 </li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">PreBianli</span><span class=\"params\">(root)</span>:</span></span><br><span class=\"line\">    p = root</span><br><span class=\"line\">    <span class=\"keyword\">if</span> p:</span><br><span class=\"line\">        print(p.data, end=<span class=\"string\">' '</span>)</span><br><span class=\"line\">        PreBianli(p.lchild)</span><br><span class=\"line\">        PreBianli(p.rchild)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># PreBianli(root)   # A B H F D E C K G    前序遍历</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>中序遍历</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">MidBianli</span><span class=\"params\">(root)</span>:</span></span><br><span class=\"line\">    p = root</span><br><span class=\"line\">    <span class=\"keyword\">if</span> p:</span><br><span class=\"line\">        MidBianli(p.lchild)</span><br><span class=\"line\">        print(p.data, end=<span class=\"string\">' '</span>)</span><br><span class=\"line\">        MidBianli(p.rchild)</span><br><span class=\"line\"><span class=\"comment\"># MidBianli(root)   # H B D F A E K C G    中序遍历</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>后序遍历</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">PostBianli</span><span class=\"params\">(root)</span>:</span></span><br><span class=\"line\">    p = root</span><br><span class=\"line\">    <span class=\"keyword\">if</span> p:</span><br><span class=\"line\">        PostBianli(p.lchild)</span><br><span class=\"line\">        PostBianli(p.rchild)</span><br><span class=\"line\">        print(p.data, end=<span class=\"string\">' '</span>)</span><br><span class=\"line\"><span class=\"comment\"># PostBianli(root)  # H D F B K G C E A    后序遍历</span></span><br></pre></td></tr></table></figure>\n<p><em>在根据任意两个序列来推测第三个序列的时候，有中序比较好推测，因为能一眼看出二叉树的根</em></p>\n<p><img src=\"https://i.imgur.com/4pl3DJs.jpg\" alt=\"前序遍历\"><br><img src=\"https://i.imgur.com/jJGlzo8.jpg\" alt=\"中序遍历\"><br><img src=\"https://i.imgur.com/GyEjLF3.jpg\" alt=\"后续遍历\"></p>\n<h4 id=\"层级遍历\"><a href=\"#层级遍历\" class=\"headerlink\" title=\"层级遍历\"></a>层级遍历</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">LevelBianli</span><span class=\"params\">(root)</span>:</span></span><br><span class=\"line\">    curLevel = [root]</span><br><span class=\"line\">    nextLevel = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> len(curLevel)&gt;<span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> node <span class=\"keyword\">in</span>  curLevel:</span><br><span class=\"line\">            print(node.data, end=<span class=\"string\">' '</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> node.lchild:</span><br><span class=\"line\">                nextLevel.append(node.lchild)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> node.rchild:</span><br><span class=\"line\">                nextLevel.append(node.rchild)</span><br><span class=\"line\">        curLevel = nextLevel</span><br><span class=\"line\">        nextLevel = []</span><br><span class=\"line\"></span><br><span class=\"line\">LevelBianli(root)   <span class=\"comment\"># A B E H F C D K G</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"二叉树小结\"><a href=\"#二叉树小结\" class=\"headerlink\" title=\"二叉树小结\"></a>二叉树小结</h2><ul>\n<li>二叉树是度不超过 2 的树</li>\n<li>满二叉树与完全二叉树</li>\n<li>（完全）二叉树可以用列表来存储，通过规律可以从父亲找到孩子或者孩子找到父亲</li>\n<li>二叉树遍历方式 : <code>前序遍历</code> <code>中序遍历</code> <code>后序遍历</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h1><p><img src=\"https://i.imgur.com/JH2f8TO.jpg\" alt=\"树（数据结构）\"></p>\n<ul>\n<li>是一种数据结构（如：目录结构） </li>\n<li>是一种可以递归定义的数据结构</li>\n<li>是由 n 个节点组成的集合<ul>\n<li>如果 n=0 ，那么是一颗空树</li>\n<li>如果 n&gt;0 ，那么存在 1 个节点作为树的根节点，其他节点可以分为 m 个集合，每个集合本身又是一棵树。</li>\n</ul>\n</li>\n</ul>\n<p><strong>概念：</strong></p>\n<ul>\n<li>根节点（最顶端的节点）、叶子节点（没有孩子的节点，结构的最末端）</li>\n<li>树的深度／高度（也就是树的层数）</li>\n<li>节点度（也就是这个节点分了多少叉）</li>\n<li>树的度（所有节点度的最大值）</li>\n<li>孩子节点/父节点（看字面理解）</li>\n<li>子树（根节点的字节点都是独立的树）</li>\n</ul>\n<h1 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h1><p>度不超过 2 的树（节点最多有两个叉），它的孩子是有顺序的：左孩子，右孩子。<br><img src=\"https://i.imgur.com/Fq7IcbA.jpg\" alt=\"二叉树的多种形态\"></p>\n<p>重点：满二叉树，完全二叉树</p>\n<h2 id=\"二叉树的存储方式\"><a href=\"#二叉树的存储方式\" class=\"headerlink\" title=\"二叉树的存储方式\"></a>二叉树的存储方式</h2><ol>\n<li>链式存储方式</li>\n<li>顺序存储方式（列表）</li>\n<li>面向对象的存储方式</li>\n</ol>\n<p><img src=\"https://i.imgur.com/X5OMYC1.jpg\" alt=\"\"></p>\n<p>父节点和左孩子节点的编号下标有什么关系？</p>\n<blockquote>\n<p>0-1 1-3 2-5 3-7 4-9<br>规律：i = 2i+1</p>\n</blockquote>\n<p>父节点和右孩子节点的编号下标有什么关系？</p>\n<blockquote>\n<p>0-2 1-4 2-6 3-8 4-10<br>规律：i = 2i+2</p>\n</blockquote>\n<p>比如，我们要找根节点左孩子的左孩子：（0*2+1）*2+1 = 3 （下标） 所以是<code>6</code></p>\n<h2 id=\"面向对象的存储方式\"><a href=\"#面向对象的存储方式\" class=\"headerlink\" title=\"面向对象的存储方式\"></a>面向对象的存储方式</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinTreeNode</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">        self.data = data</span><br><span class=\"line\">        self.lchild = <span class=\"keyword\">None</span></span><br><span class=\"line\">        self.rchild = <span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">k = BinTreeNode(<span class=\"string\">'K'</span>)</span><br><span class=\"line\">g = BinTreeNode(<span class=\"string\">'G'</span>)</span><br><span class=\"line\">c = BinTreeNode(<span class=\"string\">'C'</span>)</span><br><span class=\"line\">a = BinTreeNode(<span class=\"string\">'A'</span>)</span><br><span class=\"line\">b = BinTreeNode(<span class=\"string\">'B'</span>)</span><br><span class=\"line\">d = BinTreeNode(<span class=\"string\">'D'</span>)</span><br><span class=\"line\">e = BinTreeNode(<span class=\"string\">'E'</span>)</span><br><span class=\"line\">f = BinTreeNode(<span class=\"string\">'F'</span>)</span><br><span class=\"line\">h = BinTreeNode(<span class=\"string\">'H'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">root = a</span><br><span class=\"line\">a.lchild = b</span><br><span class=\"line\">a.rchild = e</span><br><span class=\"line\">b.lchild = h</span><br><span class=\"line\">b.rchild = f</span><br><span class=\"line\">f.lchild = d</span><br><span class=\"line\">e.rchild = c</span><br><span class=\"line\">c.lchild = k</span><br><span class=\"line\">c.rchild = g</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/umYC031.jpg\" alt=\"二叉树\"></p>\n<ul>\n<li>前序遍历 </li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">PreBianli</span><span class=\"params\">(root)</span>:</span></span><br><span class=\"line\">    p = root</span><br><span class=\"line\">    <span class=\"keyword\">if</span> p:</span><br><span class=\"line\">        print(p.data, end=<span class=\"string\">' '</span>)</span><br><span class=\"line\">        PreBianli(p.lchild)</span><br><span class=\"line\">        PreBianli(p.rchild)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># PreBianli(root)   # A B H F D E C K G    前序遍历</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>中序遍历</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">MidBianli</span><span class=\"params\">(root)</span>:</span></span><br><span class=\"line\">    p = root</span><br><span class=\"line\">    <span class=\"keyword\">if</span> p:</span><br><span class=\"line\">        MidBianli(p.lchild)</span><br><span class=\"line\">        print(p.data, end=<span class=\"string\">' '</span>)</span><br><span class=\"line\">        MidBianli(p.rchild)</span><br><span class=\"line\"><span class=\"comment\"># MidBianli(root)   # H B D F A E K C G    中序遍历</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>后序遍历</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">PostBianli</span><span class=\"params\">(root)</span>:</span></span><br><span class=\"line\">    p = root</span><br><span class=\"line\">    <span class=\"keyword\">if</span> p:</span><br><span class=\"line\">        PostBianli(p.lchild)</span><br><span class=\"line\">        PostBianli(p.rchild)</span><br><span class=\"line\">        print(p.data, end=<span class=\"string\">' '</span>)</span><br><span class=\"line\"><span class=\"comment\"># PostBianli(root)  # H D F B K G C E A    后序遍历</span></span><br></pre></td></tr></table></figure>\n<p><em>在根据任意两个序列来推测第三个序列的时候，有中序比较好推测，因为能一眼看出二叉树的根</em></p>\n<p><img src=\"https://i.imgur.com/4pl3DJs.jpg\" alt=\"前序遍历\"><br><img src=\"https://i.imgur.com/jJGlzo8.jpg\" alt=\"中序遍历\"><br><img src=\"https://i.imgur.com/GyEjLF3.jpg\" alt=\"后续遍历\"></p>\n<h4 id=\"层级遍历\"><a href=\"#层级遍历\" class=\"headerlink\" title=\"层级遍历\"></a>层级遍历</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">LevelBianli</span><span class=\"params\">(root)</span>:</span></span><br><span class=\"line\">    curLevel = [root]</span><br><span class=\"line\">    nextLevel = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> len(curLevel)&gt;<span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> node <span class=\"keyword\">in</span>  curLevel:</span><br><span class=\"line\">            print(node.data, end=<span class=\"string\">' '</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> node.lchild:</span><br><span class=\"line\">                nextLevel.append(node.lchild)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> node.rchild:</span><br><span class=\"line\">                nextLevel.append(node.rchild)</span><br><span class=\"line\">        curLevel = nextLevel</span><br><span class=\"line\">        nextLevel = []</span><br><span class=\"line\"></span><br><span class=\"line\">LevelBianli(root)   <span class=\"comment\"># A B E H F C D K G</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"二叉树小结\"><a href=\"#二叉树小结\" class=\"headerlink\" title=\"二叉树小结\"></a>二叉树小结</h2><ul>\n<li>二叉树是度不超过 2 的树</li>\n<li>满二叉树与完全二叉树</li>\n<li>（完全）二叉树可以用列表来存储，通过规律可以从父亲找到孩子或者孩子找到父亲</li>\n<li>二叉树遍历方式 : <code>前序遍历</code> <code>中序遍历</code> <code>后序遍历</code></li>\n</ul>\n"},{"title":"数据结构基础","date":"2017-12-26T12:58:31.000Z","keywords":null,"description":"数据结构是设计数据以何种方式组织并存储在计算机中。","_content":"# 概念\n数据结构是设计数据以何种方式组织并存储在计算机中。\n\n比如：`列表`、`集合`与`字典`等都是一种数据结构。\n\n详细的说：\n\n- 物理层面：就是以什么样的物理存储方式\n- 逻辑方式：列表，字典，集合，树\n\n**线性数据结构，树形数据结构，图形数据结构，** 基本是线性数据结构\n\nN.Wirth: “程序=数据结构+算法”\n\n# 列表\n列表：在其他编程语言中称为“数组”，是一种基本的数据结构类型。如果更学术一点的说法是“线性表”。\n\n**数组与列表的不同之处：**\n数组是定长的数组，如果开的内存空间长度为7，就不能再追加，只能存7个，并且这7个元素类型还必须是一样的\n\n**数组：定长，元素类型统一。**\n\nPython中的给一个列表，开一块连续内存空间，开的内存空间的长度不会刚好是列表的长度，一定会多，而内存中：变量指向的列表的元素存的是一个个内存地址（地址的格子才是真正存元素值的地方），每个元素占用的空间都是一样的，大部分编译型的语言直接存的值，而python存的不是值，而是值的内存地址。\n\nPython中一直`append`值的原理：如果之前的空间不够，就再开时原来一倍的内存空间，然后把旧的删掉\n\n>列表`li[2]`寻址的时候是`li+2*内存地址的字节`\n\n32位机器一个地址4个子节\n64位机器一个地址8个字节\n\n**关于列表的问题：**\n\n- 列表中元素使如何存储的？(上述)\n- 列表提供了哪些基本的操作？(下标查找，插入，删除)\n- 这些操作的时间复杂度是多少？\n    - O(1)\n    - O(n)(插入的时候，插入位置之后的值都需要往后挪)\n\n\n# 链表\n链表中每一个元素都是一个对象，每个对象称为一个节点，包含有数据域key和指向下一个节点的指针next。通过各个节点之间的相互连接，最终串联成一个链表。\n\n为什么用链表？\n链表的插入和删除特别快\n\n**节点定义:**\n\n```python\nclass Node(object):\n    def __init__(self,item):\n        self.item = item\n        self.next = None\n\nn1 = Node(1)\nn2 = Node(2)\nn3 = Node(3)\n\nn1.next = n2\nn2.next = n3\n\nprint(n1.next.item) # 2\nprint(n1.next.next.item) # 3\n```\n\n- 头节点\n\n![单向链表](https://i.imgur.com/P1WJgQ8.jpg)\n\n## 链表的遍历\n\n![链表遍历](https://i.imgur.com/xvc5L8B.jpg)\n\n\n```python\ndef traversal(head):\n    curNode = head  # 临时用指针\n    while curNode is not None:\n        print(curNode.data)\n        curNode = curNode.next \n```\n\n## 链表节点的插入和删除\nO1的时间复杂度\n\n- 插入\n\n```python\np.next = curNode.next\ncurNode.next = p\n```\n- 删除\n\n```python\np = curNode.next\ncurNode.next = curNode.next.next\n# 也可以 >> curNode.next = p.next\ndel p\n```\n\n## 建立链表\n\n- 头插法\n\n```python\ndef createLinkList(li):\n    l = Node()\n    for num in li:\n        s = Node(Num)\n        s.next = l.next\n        l.next = s\n    return l\n```\n\n- 尾插法\n\n```python\ndef createLinkList(li):\n    l = Node()\n    r = l   # r 指向尾节点\n    for num in li :\n        s = Node(num)\n        r.next = s\n        r = s\n```\n\n\n## 双链表\n双链表中每个节点有两个指针：一个指向后面节点、一个指向前面节点。\n\n**节点定义：**\n\n```python\nclass Node(object):\n    def __init__(self,item = None):\n        self.item = item\n        self.next = None\n        self.prior = None\n```\n\n### 双链表节点的插入和删除\n- 插入\n\n```python\np.next = curNode.next\ncurNode.next.prior = p\np.prior = curNode\ncurNode.next = p\n```\n\n- 删除\n\n```python\np = curNode.next\ncurNode.next = p.next\np.next.prior = curNode\ndel p\n```\n\n## 链表分析\n\n### 列表与链表\n- 按元素值查找（链表二分是On的复杂度）\n- 按下标查找（链表没有法用下表查找，李列表：O1，链表On）\n- 在某元素后插入（列表：On，链表：O1）\n- 删除某元素（列表：On，链表：O1）\n\n\n树也是以链表的形式存\n\n# 栈\n栈(Stack)是一个数据集合，可以理解为只能在一端进行插入或删除操作的列表。\n\n**特点：** 后进先出（last-in, first-out）LIFO\n\n**概念：**\n\n- 栈顶\n- 栈底\n\n**基本操作：**\n\n- 进栈（压栈）：push\n- 出栈：pop\n- 取栈顶：gettop\n\n**应用实例：**\n\n- Word 的撤销操作（撤销的时候后边的操作）\n- 重做\n\n>两个栈,撤销栈出栈，重做栈压栈；重做操作是记录撤销操作的。\n\n## 栈的简单实现(Python)\n不需要自己定义，使用列表结构即可。\n\n- 进栈函数：append\n- 出栈函数：pop\n- 查看栈顶函数：li[-1]\n\n## 栈的应用 - 括号匹配问题\n给一个字符串，其中包含小括号、中括号、大括号，求该字符串中的括号是否匹配。\n\n- `()()[]{}`\t\t匹配\n- `([{()}])`\t\t匹配\n- `[](`\t\t不匹配\n- `[(])`\t\t不匹配\n\n代码补全，当栈是空的，栈才是合法的\n\n- [代码实现括号匹配](https://github.com/cvno/Note/blob/master/1/code1.py)\n\n# 队列\n队列(Queue)是一个数据集合，仅允许在列表的一端进行插入，另一端进行删除。\n\n- 进行插入的一端称为队尾(rear)，插入动作称为进队或入队\n- 进行删除的一端称为队头(front)，删除动作称为出队\n- 队列的性质：先进先出(First-in, First-out)\n- 双向队列：队列的两端都允许进行进队和出队操作。\n\n![队列](https://i.imgur.com/cct8beO.jpg)\n\n![队列模型](https://i.imgur.com/ruUddhR.jpg)\n\n## 队列的实现\n**用Python的列表来实现出队复杂度太高**\n\n```\n使用方法：from collections import deque\n- 创建队列：queue = deque(li)\n- 进队：append\n- 出队：popleft\n- 双向队列队首进队：appendleft\n- 双向队列队尾进队：pop\n```\n\n## 实现原理\n\n- 初步设想：列表+两个下标指针\n- 创建一个列表和两个变量，front变量指向队首，rear变量指向队尾。初始时，front和rear都为0。\n- 进队操作：元素写到li[rear]的位置，rear自增1。\n- 出队操作：返回li[front]的元素，front自减1。\n\n![队列](https://i.imgur.com/VsKQCZb.jpg)\n\n## 环形队列\n环形队列：当队尾指针front == Maxsize + 1时，再前进一个位置就自动到0。\n**实现方式：求余数运算**\n\n- 队首指针前进1：front = (front + 1) % MaxSize\n- 队尾指针前进1：rear = (rear + 1) % MaxSize\n- 队空条件：rear == front\n- 队满条件：(rear + 1) % MaxSize == front\n\n### 代码实现\n\n- 通过Python自带库\n- [手写循环队列](https://gist.github.com/cvno/eeb1073a4fc23e42885a6112671f0545)\n\n```python\nimport queue    # 线程同步\n########  分割  ########\nfrom collections import deque\nqueue = deque()\nqueue.append(1)\nqueue.append(2)\nqueue.append(3)\nprint( ())\nprint(queue.popleft())\n########  分割  ########\nqueue.appendleft(2)\nqueue.pop()\n```\n\n# 哈希表\n## Python中的集合与字典\n\n哈希表查找\n>哈希表（Hash Table，又称为散列表），是一种线性表的存储结构。通过把每个对象的关键字k作为自变量，通过一个哈希函数h(k)，将k映射到下标h(k)处，并将该对象存储在这个位置。\n\n**例如：**数据集合{1,6,7,9}，假设存在哈希函数h(x)使得h(1) = 0, h(6) = 2, h(7) = 4, h(9) = 5，那么这个哈希表被存储为[1,None, 6, None, 7, 9]。\n\n当我们查找元素6所在的位置时，通过哈希函数h(x)获得该元素所在的下标（h(6) = 2），因此在2位置即可找到该元素。\n\n```python\nli = [1,2,3,4]\ns = {1,2,3,4} # 集合的效率更高\n# 哈希函数设计的再好也避免不了碰撞\n#\n#\n```\n## 哈希冲突\n哈希冲突：由于哈希表的下标范围是有限的，而元素关键字的值是接近无限的，因此可能会出现h(102) = 56， h(2003) = 56这种情况。此时，两个元素映射到同一个下标处，造成哈希冲突。\n\n**解决哈希冲突**\n\n- 拉链法（将所有冲突的元素用链表连接）\n- 开放寻址法（通过哈希冲突函数得到新的地址）\n\n![拉链法](http://onk83djzp.bkt.clouddn.com/2017-12-13-15131769752694.jpg)\n\n## 字典\n**在Python中的字典：**\n\n```\na = {'name': 'Alex', 'age': 18, 'gender': 'Man'}\n```\n使用哈希表存储字典，通过哈希函数将字典的键映射为下标。假设h(‘name’) = 3, h(‘age’) = 1, h(‘gender’) = 4，则哈希表存储为[None, 18, None, ’Alex’, ‘Man’]\n\n在字典键值对数量不多的情况下，几乎不会发生哈希冲突，此时查找一个元素的时间复杂度为O(1)。\n\n# 迷宫问题\n\n给一个二维列表，表示迷宫（0表示通道，1表示围墙）。给出算法，求一条走出迷宫的路径。\n\n## 栈\n\n- [栈-方案](https://github.com/cvno/Note/blob/master/1/maze.py)\n\n深度优先 **DFS（Depth[栈]-First-Search）**\n\n## 队列\n\n- [队列-方案](https://github.com/cvno/Note/blob/master/1/code2.py)\n\n使用二维列表存储多条路径\n**如何是打印出路径是难点**\n\n![迷宫](http://onk83djzp.bkt.clouddn.com/15114913815577.jpg)\n\n```\nmaze = [\n    [1,1,1,1,1,1,1,1,1,1],\n    [1,0,0,1,0,0,0,1,0,1],\n    [1,0,0,1,0,0,0,1,0,1],\n    [1,0,0,0,0,1,1,0,0,1],\n    [1,0,1,1,1,0,0,0,0,1],\n    [1,0,0,0,1,0,0,0,0,1],\n    [1,0,1,0,0,0,1,0,0,1],\n    [1,0,1,1,1,0,1,1,0,1],\n    [1,1,0,0,0,0,0,0,0,1],\n    [1,1,1,1,1,1,1,1,1,1]\n]\n```\n\n本文代码及 md 文件 [Github](https://github.com/cvno/Note/tree/master/1)\n\n","source":"_posts/data-structure-basis.md","raw":"---\ntitle: 数据结构基础\ndate: 2017-12-26 20:58:31\ntags: \ncategories: 数据结构\nkeywords:\ndescription: 数据结构是设计数据以何种方式组织并存储在计算机中。\n---\n# 概念\n数据结构是设计数据以何种方式组织并存储在计算机中。\n\n比如：`列表`、`集合`与`字典`等都是一种数据结构。\n\n详细的说：\n\n- 物理层面：就是以什么样的物理存储方式\n- 逻辑方式：列表，字典，集合，树\n\n**线性数据结构，树形数据结构，图形数据结构，** 基本是线性数据结构\n\nN.Wirth: “程序=数据结构+算法”\n\n# 列表\n列表：在其他编程语言中称为“数组”，是一种基本的数据结构类型。如果更学术一点的说法是“线性表”。\n\n**数组与列表的不同之处：**\n数组是定长的数组，如果开的内存空间长度为7，就不能再追加，只能存7个，并且这7个元素类型还必须是一样的\n\n**数组：定长，元素类型统一。**\n\nPython中的给一个列表，开一块连续内存空间，开的内存空间的长度不会刚好是列表的长度，一定会多，而内存中：变量指向的列表的元素存的是一个个内存地址（地址的格子才是真正存元素值的地方），每个元素占用的空间都是一样的，大部分编译型的语言直接存的值，而python存的不是值，而是值的内存地址。\n\nPython中一直`append`值的原理：如果之前的空间不够，就再开时原来一倍的内存空间，然后把旧的删掉\n\n>列表`li[2]`寻址的时候是`li+2*内存地址的字节`\n\n32位机器一个地址4个子节\n64位机器一个地址8个字节\n\n**关于列表的问题：**\n\n- 列表中元素使如何存储的？(上述)\n- 列表提供了哪些基本的操作？(下标查找，插入，删除)\n- 这些操作的时间复杂度是多少？\n    - O(1)\n    - O(n)(插入的时候，插入位置之后的值都需要往后挪)\n\n\n# 链表\n链表中每一个元素都是一个对象，每个对象称为一个节点，包含有数据域key和指向下一个节点的指针next。通过各个节点之间的相互连接，最终串联成一个链表。\n\n为什么用链表？\n链表的插入和删除特别快\n\n**节点定义:**\n\n```python\nclass Node(object):\n    def __init__(self,item):\n        self.item = item\n        self.next = None\n\nn1 = Node(1)\nn2 = Node(2)\nn3 = Node(3)\n\nn1.next = n2\nn2.next = n3\n\nprint(n1.next.item) # 2\nprint(n1.next.next.item) # 3\n```\n\n- 头节点\n\n![单向链表](https://i.imgur.com/P1WJgQ8.jpg)\n\n## 链表的遍历\n\n![链表遍历](https://i.imgur.com/xvc5L8B.jpg)\n\n\n```python\ndef traversal(head):\n    curNode = head  # 临时用指针\n    while curNode is not None:\n        print(curNode.data)\n        curNode = curNode.next \n```\n\n## 链表节点的插入和删除\nO1的时间复杂度\n\n- 插入\n\n```python\np.next = curNode.next\ncurNode.next = p\n```\n- 删除\n\n```python\np = curNode.next\ncurNode.next = curNode.next.next\n# 也可以 >> curNode.next = p.next\ndel p\n```\n\n## 建立链表\n\n- 头插法\n\n```python\ndef createLinkList(li):\n    l = Node()\n    for num in li:\n        s = Node(Num)\n        s.next = l.next\n        l.next = s\n    return l\n```\n\n- 尾插法\n\n```python\ndef createLinkList(li):\n    l = Node()\n    r = l   # r 指向尾节点\n    for num in li :\n        s = Node(num)\n        r.next = s\n        r = s\n```\n\n\n## 双链表\n双链表中每个节点有两个指针：一个指向后面节点、一个指向前面节点。\n\n**节点定义：**\n\n```python\nclass Node(object):\n    def __init__(self,item = None):\n        self.item = item\n        self.next = None\n        self.prior = None\n```\n\n### 双链表节点的插入和删除\n- 插入\n\n```python\np.next = curNode.next\ncurNode.next.prior = p\np.prior = curNode\ncurNode.next = p\n```\n\n- 删除\n\n```python\np = curNode.next\ncurNode.next = p.next\np.next.prior = curNode\ndel p\n```\n\n## 链表分析\n\n### 列表与链表\n- 按元素值查找（链表二分是On的复杂度）\n- 按下标查找（链表没有法用下表查找，李列表：O1，链表On）\n- 在某元素后插入（列表：On，链表：O1）\n- 删除某元素（列表：On，链表：O1）\n\n\n树也是以链表的形式存\n\n# 栈\n栈(Stack)是一个数据集合，可以理解为只能在一端进行插入或删除操作的列表。\n\n**特点：** 后进先出（last-in, first-out）LIFO\n\n**概念：**\n\n- 栈顶\n- 栈底\n\n**基本操作：**\n\n- 进栈（压栈）：push\n- 出栈：pop\n- 取栈顶：gettop\n\n**应用实例：**\n\n- Word 的撤销操作（撤销的时候后边的操作）\n- 重做\n\n>两个栈,撤销栈出栈，重做栈压栈；重做操作是记录撤销操作的。\n\n## 栈的简单实现(Python)\n不需要自己定义，使用列表结构即可。\n\n- 进栈函数：append\n- 出栈函数：pop\n- 查看栈顶函数：li[-1]\n\n## 栈的应用 - 括号匹配问题\n给一个字符串，其中包含小括号、中括号、大括号，求该字符串中的括号是否匹配。\n\n- `()()[]{}`\t\t匹配\n- `([{()}])`\t\t匹配\n- `[](`\t\t不匹配\n- `[(])`\t\t不匹配\n\n代码补全，当栈是空的，栈才是合法的\n\n- [代码实现括号匹配](https://github.com/cvno/Note/blob/master/1/code1.py)\n\n# 队列\n队列(Queue)是一个数据集合，仅允许在列表的一端进行插入，另一端进行删除。\n\n- 进行插入的一端称为队尾(rear)，插入动作称为进队或入队\n- 进行删除的一端称为队头(front)，删除动作称为出队\n- 队列的性质：先进先出(First-in, First-out)\n- 双向队列：队列的两端都允许进行进队和出队操作。\n\n![队列](https://i.imgur.com/cct8beO.jpg)\n\n![队列模型](https://i.imgur.com/ruUddhR.jpg)\n\n## 队列的实现\n**用Python的列表来实现出队复杂度太高**\n\n```\n使用方法：from collections import deque\n- 创建队列：queue = deque(li)\n- 进队：append\n- 出队：popleft\n- 双向队列队首进队：appendleft\n- 双向队列队尾进队：pop\n```\n\n## 实现原理\n\n- 初步设想：列表+两个下标指针\n- 创建一个列表和两个变量，front变量指向队首，rear变量指向队尾。初始时，front和rear都为0。\n- 进队操作：元素写到li[rear]的位置，rear自增1。\n- 出队操作：返回li[front]的元素，front自减1。\n\n![队列](https://i.imgur.com/VsKQCZb.jpg)\n\n## 环形队列\n环形队列：当队尾指针front == Maxsize + 1时，再前进一个位置就自动到0。\n**实现方式：求余数运算**\n\n- 队首指针前进1：front = (front + 1) % MaxSize\n- 队尾指针前进1：rear = (rear + 1) % MaxSize\n- 队空条件：rear == front\n- 队满条件：(rear + 1) % MaxSize == front\n\n### 代码实现\n\n- 通过Python自带库\n- [手写循环队列](https://gist.github.com/cvno/eeb1073a4fc23e42885a6112671f0545)\n\n```python\nimport queue    # 线程同步\n########  分割  ########\nfrom collections import deque\nqueue = deque()\nqueue.append(1)\nqueue.append(2)\nqueue.append(3)\nprint( ())\nprint(queue.popleft())\n########  分割  ########\nqueue.appendleft(2)\nqueue.pop()\n```\n\n# 哈希表\n## Python中的集合与字典\n\n哈希表查找\n>哈希表（Hash Table，又称为散列表），是一种线性表的存储结构。通过把每个对象的关键字k作为自变量，通过一个哈希函数h(k)，将k映射到下标h(k)处，并将该对象存储在这个位置。\n\n**例如：**数据集合{1,6,7,9}，假设存在哈希函数h(x)使得h(1) = 0, h(6) = 2, h(7) = 4, h(9) = 5，那么这个哈希表被存储为[1,None, 6, None, 7, 9]。\n\n当我们查找元素6所在的位置时，通过哈希函数h(x)获得该元素所在的下标（h(6) = 2），因此在2位置即可找到该元素。\n\n```python\nli = [1,2,3,4]\ns = {1,2,3,4} # 集合的效率更高\n# 哈希函数设计的再好也避免不了碰撞\n#\n#\n```\n## 哈希冲突\n哈希冲突：由于哈希表的下标范围是有限的，而元素关键字的值是接近无限的，因此可能会出现h(102) = 56， h(2003) = 56这种情况。此时，两个元素映射到同一个下标处，造成哈希冲突。\n\n**解决哈希冲突**\n\n- 拉链法（将所有冲突的元素用链表连接）\n- 开放寻址法（通过哈希冲突函数得到新的地址）\n\n![拉链法](http://onk83djzp.bkt.clouddn.com/2017-12-13-15131769752694.jpg)\n\n## 字典\n**在Python中的字典：**\n\n```\na = {'name': 'Alex', 'age': 18, 'gender': 'Man'}\n```\n使用哈希表存储字典，通过哈希函数将字典的键映射为下标。假设h(‘name’) = 3, h(‘age’) = 1, h(‘gender’) = 4，则哈希表存储为[None, 18, None, ’Alex’, ‘Man’]\n\n在字典键值对数量不多的情况下，几乎不会发生哈希冲突，此时查找一个元素的时间复杂度为O(1)。\n\n# 迷宫问题\n\n给一个二维列表，表示迷宫（0表示通道，1表示围墙）。给出算法，求一条走出迷宫的路径。\n\n## 栈\n\n- [栈-方案](https://github.com/cvno/Note/blob/master/1/maze.py)\n\n深度优先 **DFS（Depth[栈]-First-Search）**\n\n## 队列\n\n- [队列-方案](https://github.com/cvno/Note/blob/master/1/code2.py)\n\n使用二维列表存储多条路径\n**如何是打印出路径是难点**\n\n![迷宫](http://onk83djzp.bkt.clouddn.com/15114913815577.jpg)\n\n```\nmaze = [\n    [1,1,1,1,1,1,1,1,1,1],\n    [1,0,0,1,0,0,0,1,0,1],\n    [1,0,0,1,0,0,0,1,0,1],\n    [1,0,0,0,0,1,1,0,0,1],\n    [1,0,1,1,1,0,0,0,0,1],\n    [1,0,0,0,1,0,0,0,0,1],\n    [1,0,1,0,0,0,1,0,0,1],\n    [1,0,1,1,1,0,1,1,0,1],\n    [1,1,0,0,0,0,0,0,0,1],\n    [1,1,1,1,1,1,1,1,1,1]\n]\n```\n\n本文代码及 md 文件 [Github](https://github.com/cvno/Note/tree/master/1)\n\n","slug":"data-structure-basis","published":1,"updated":"2018-04-01T14:20:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfgx5own000dmxgo9jp9m61x","content":"<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p>数据结构是设计数据以何种方式组织并存储在计算机中。</p>\n<p>比如：<code>列表</code>、<code>集合</code>与<code>字典</code>等都是一种数据结构。</p>\n<p>详细的说：</p>\n<ul>\n<li>物理层面：就是以什么样的物理存储方式</li>\n<li>逻辑方式：列表，字典，集合，树</li>\n</ul>\n<p><strong>线性数据结构，树形数据结构，图形数据结构，</strong> 基本是线性数据结构</p>\n<p>N.Wirth: “程序=数据结构+算法”</p>\n<h1 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h1><p>列表：在其他编程语言中称为“数组”，是一种基本的数据结构类型。如果更学术一点的说法是“线性表”。</p>\n<p><strong>数组与列表的不同之处：</strong><br>数组是定长的数组，如果开的内存空间长度为7，就不能再追加，只能存7个，并且这7个元素类型还必须是一样的</p>\n<p><strong>数组：定长，元素类型统一。</strong></p>\n<p>Python中的给一个列表，开一块连续内存空间，开的内存空间的长度不会刚好是列表的长度，一定会多，而内存中：变量指向的列表的元素存的是一个个内存地址（地址的格子才是真正存元素值的地方），每个元素占用的空间都是一样的，大部分编译型的语言直接存的值，而python存的不是值，而是值的内存地址。</p>\n<p>Python中一直<code>append</code>值的原理：如果之前的空间不够，就再开时原来一倍的内存空间，然后把旧的删掉</p>\n<blockquote>\n<p>列表<code>li[2]</code>寻址的时候是<code>li+2*内存地址的字节</code></p>\n</blockquote>\n<p>32位机器一个地址4个子节<br>64位机器一个地址8个字节</p>\n<p><strong>关于列表的问题：</strong></p>\n<ul>\n<li>列表中元素使如何存储的？(上述)</li>\n<li>列表提供了哪些基本的操作？(下标查找，插入，删除)</li>\n<li>这些操作的时间复杂度是多少？<ul>\n<li>O(1)</li>\n<li>O(n)(插入的时候，插入位置之后的值都需要往后挪)</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h1><p>链表中每一个元素都是一个对象，每个对象称为一个节点，包含有数据域key和指向下一个节点的指针next。通过各个节点之间的相互连接，最终串联成一个链表。</p>\n<p>为什么用链表？<br>链表的插入和删除特别快</p>\n<p><strong>节点定义:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,item)</span>:</span></span><br><span class=\"line\">        self.item = item</span><br><span class=\"line\">        self.next = <span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">n1 = Node(<span class=\"number\">1</span>)</span><br><span class=\"line\">n2 = Node(<span class=\"number\">2</span>)</span><br><span class=\"line\">n3 = Node(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">n1.next = n2</span><br><span class=\"line\">n2.next = n3</span><br><span class=\"line\"></span><br><span class=\"line\">print(n1.next.item) <span class=\"comment\"># 2</span></span><br><span class=\"line\">print(n1.next.next.item) <span class=\"comment\"># 3</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>头节点</li>\n</ul>\n<p><img src=\"https://i.imgur.com/P1WJgQ8.jpg\" alt=\"单向链表\"></p>\n<h2 id=\"链表的遍历\"><a href=\"#链表的遍历\" class=\"headerlink\" title=\"链表的遍历\"></a>链表的遍历</h2><p><img src=\"https://i.imgur.com/xvc5L8B.jpg\" alt=\"链表遍历\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">traversal</span><span class=\"params\">(head)</span>:</span></span><br><span class=\"line\">    curNode = head  <span class=\"comment\"># 临时用指针</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> curNode <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">        print(curNode.data)</span><br><span class=\"line\">        curNode = curNode.next</span><br></pre></td></tr></table></figure>\n<h2 id=\"链表节点的插入和删除\"><a href=\"#链表节点的插入和删除\" class=\"headerlink\" title=\"链表节点的插入和删除\"></a>链表节点的插入和删除</h2><p>O1的时间复杂度</p>\n<ul>\n<li>插入</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.next = curNode.next</span><br><span class=\"line\">curNode.next = p</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = curNode.next</span><br><span class=\"line\">curNode.next = curNode.next.next</span><br><span class=\"line\"><span class=\"comment\"># 也可以 &gt;&gt; curNode.next = p.next</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> p</span><br></pre></td></tr></table></figure>\n<h2 id=\"建立链表\"><a href=\"#建立链表\" class=\"headerlink\" title=\"建立链表\"></a>建立链表</h2><ul>\n<li>头插法</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">createLinkList</span><span class=\"params\">(li)</span>:</span></span><br><span class=\"line\">    l = Node()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> li:</span><br><span class=\"line\">        s = Node(Num)</span><br><span class=\"line\">        s.next = l.next</span><br><span class=\"line\">        l.next = s</span><br><span class=\"line\">    <span class=\"keyword\">return</span> l</span><br></pre></td></tr></table></figure>\n<ul>\n<li>尾插法</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">createLinkList</span><span class=\"params\">(li)</span>:</span></span><br><span class=\"line\">    l = Node()</span><br><span class=\"line\">    r = l   <span class=\"comment\"># r 指向尾节点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> li :</span><br><span class=\"line\">        s = Node(num)</span><br><span class=\"line\">        r.next = s</span><br><span class=\"line\">        r = s</span><br></pre></td></tr></table></figure>\n<h2 id=\"双链表\"><a href=\"#双链表\" class=\"headerlink\" title=\"双链表\"></a>双链表</h2><p>双链表中每个节点有两个指针：一个指向后面节点、一个指向前面节点。</p>\n<p><strong>节点定义：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,item = None)</span>:</span></span><br><span class=\"line\">        self.item = item</span><br><span class=\"line\">        self.next = <span class=\"keyword\">None</span></span><br><span class=\"line\">        self.prior = <span class=\"keyword\">None</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"双链表节点的插入和删除\"><a href=\"#双链表节点的插入和删除\" class=\"headerlink\" title=\"双链表节点的插入和删除\"></a>双链表节点的插入和删除</h3><ul>\n<li>插入</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.next = curNode.next</span><br><span class=\"line\">curNode.next.prior = p</span><br><span class=\"line\">p.prior = curNode</span><br><span class=\"line\">curNode.next = p</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = curNode.next</span><br><span class=\"line\">curNode.next = p.next</span><br><span class=\"line\">p.next.prior = curNode</span><br><span class=\"line\"><span class=\"keyword\">del</span> p</span><br></pre></td></tr></table></figure>\n<h2 id=\"链表分析\"><a href=\"#链表分析\" class=\"headerlink\" title=\"链表分析\"></a>链表分析</h2><h3 id=\"列表与链表\"><a href=\"#列表与链表\" class=\"headerlink\" title=\"列表与链表\"></a>列表与链表</h3><ul>\n<li>按元素值查找（链表二分是On的复杂度）</li>\n<li>按下标查找（链表没有法用下表查找，李列表：O1，链表On）</li>\n<li>在某元素后插入（列表：On，链表：O1）</li>\n<li>删除某元素（列表：On，链表：O1）</li>\n</ul>\n<p>树也是以链表的形式存</p>\n<h1 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h1><p>栈(Stack)是一个数据集合，可以理解为只能在一端进行插入或删除操作的列表。</p>\n<p><strong>特点：</strong> 后进先出（last-in, first-out）LIFO</p>\n<p><strong>概念：</strong></p>\n<ul>\n<li>栈顶</li>\n<li>栈底</li>\n</ul>\n<p><strong>基本操作：</strong></p>\n<ul>\n<li>进栈（压栈）：push</li>\n<li>出栈：pop</li>\n<li>取栈顶：gettop</li>\n</ul>\n<p><strong>应用实例：</strong></p>\n<ul>\n<li>Word 的撤销操作（撤销的时候后边的操作）</li>\n<li>重做</li>\n</ul>\n<blockquote>\n<p>两个栈,撤销栈出栈，重做栈压栈；重做操作是记录撤销操作的。</p>\n</blockquote>\n<h2 id=\"栈的简单实现-Python\"><a href=\"#栈的简单实现-Python\" class=\"headerlink\" title=\"栈的简单实现(Python)\"></a>栈的简单实现(Python)</h2><p>不需要自己定义，使用列表结构即可。</p>\n<ul>\n<li>进栈函数：append</li>\n<li>出栈函数：pop</li>\n<li>查看栈顶函数：li[-1]</li>\n</ul>\n<h2 id=\"栈的应用-括号匹配问题\"><a href=\"#栈的应用-括号匹配问题\" class=\"headerlink\" title=\"栈的应用 - 括号匹配问题\"></a>栈的应用 - 括号匹配问题</h2><p>给一个字符串，其中包含小括号、中括号、大括号，求该字符串中的括号是否匹配。</p>\n<ul>\n<li><code>()()[]{}</code>        匹配</li>\n<li><code>([{()}])</code>        匹配</li>\n<li><code>[](</code>        不匹配</li>\n<li><code>[(])</code>        不匹配</li>\n</ul>\n<p>代码补全，当栈是空的，栈才是合法的</p>\n<ul>\n<li><a href=\"https://github.com/cvno/Note/blob/master/1/code1.py\" target=\"_blank\" rel=\"noopener\">代码实现括号匹配</a></li>\n</ul>\n<h1 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h1><p>队列(Queue)是一个数据集合，仅允许在列表的一端进行插入，另一端进行删除。</p>\n<ul>\n<li>进行插入的一端称为队尾(rear)，插入动作称为进队或入队</li>\n<li>进行删除的一端称为队头(front)，删除动作称为出队</li>\n<li>队列的性质：先进先出(First-in, First-out)</li>\n<li>双向队列：队列的两端都允许进行进队和出队操作。</li>\n</ul>\n<p><img src=\"https://i.imgur.com/cct8beO.jpg\" alt=\"队列\"></p>\n<p><img src=\"https://i.imgur.com/ruUddhR.jpg\" alt=\"队列模型\"></p>\n<h2 id=\"队列的实现\"><a href=\"#队列的实现\" class=\"headerlink\" title=\"队列的实现\"></a>队列的实现</h2><p><strong>用Python的列表来实现出队复杂度太高</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用方法：from collections import deque</span><br><span class=\"line\">- 创建队列：queue = deque(li)</span><br><span class=\"line\">- 进队：append</span><br><span class=\"line\">- 出队：popleft</span><br><span class=\"line\">- 双向队列队首进队：appendleft</span><br><span class=\"line\">- 双向队列队尾进队：pop</span><br></pre></td></tr></table></figure>\n<h2 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h2><ul>\n<li>初步设想：列表+两个下标指针</li>\n<li>创建一个列表和两个变量，front变量指向队首，rear变量指向队尾。初始时，front和rear都为0。</li>\n<li>进队操作：元素写到li[rear]的位置，rear自增1。</li>\n<li>出队操作：返回li[front]的元素，front自减1。</li>\n</ul>\n<p><img src=\"https://i.imgur.com/VsKQCZb.jpg\" alt=\"队列\"></p>\n<h2 id=\"环形队列\"><a href=\"#环形队列\" class=\"headerlink\" title=\"环形队列\"></a>环形队列</h2><p>环形队列：当队尾指针front == Maxsize + 1时，再前进一个位置就自动到0。<br><strong>实现方式：求余数运算</strong></p>\n<ul>\n<li>队首指针前进1：front = (front + 1) % MaxSize</li>\n<li>队尾指针前进1：rear = (rear + 1) % MaxSize</li>\n<li>队空条件：rear == front</li>\n<li>队满条件：(rear + 1) % MaxSize == front</li>\n</ul>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><ul>\n<li>通过Python自带库</li>\n<li><a href=\"https://gist.github.com/cvno/eeb1073a4fc23e42885a6112671f0545\" target=\"_blank\" rel=\"noopener\">手写循环队列</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> queue    <span class=\"comment\"># 线程同步</span></span><br><span class=\"line\"><span class=\"comment\">########  分割  ########</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> deque</span><br><span class=\"line\">queue = deque()</span><br><span class=\"line\">queue.append(<span class=\"number\">1</span>)</span><br><span class=\"line\">queue.append(<span class=\"number\">2</span>)</span><br><span class=\"line\">queue.append(<span class=\"number\">3</span>)</span><br><span class=\"line\">print( ())</span><br><span class=\"line\">print(queue.popleft())</span><br><span class=\"line\"><span class=\"comment\">########  分割  ########</span></span><br><span class=\"line\">queue.appendleft(<span class=\"number\">2</span>)</span><br><span class=\"line\">queue.pop()</span><br></pre></td></tr></table></figure>\n<h1 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h1><h2 id=\"Python中的集合与字典\"><a href=\"#Python中的集合与字典\" class=\"headerlink\" title=\"Python中的集合与字典\"></a>Python中的集合与字典</h2><p>哈希表查找</p>\n<blockquote>\n<p>哈希表（Hash Table，又称为散列表），是一种线性表的存储结构。通过把每个对象的关键字k作为自变量，通过一个哈希函数h(k)，将k映射到下标h(k)处，并将该对象存储在这个位置。</p>\n</blockquote>\n<p><strong>例如：</strong>数据集合{1,6,7,9}，假设存在哈希函数h(x)使得h(1) = 0, h(6) = 2, h(7) = 4, h(9) = 5，那么这个哈希表被存储为[1,None, 6, None, 7, 9]。</p>\n<p>当我们查找元素6所在的位置时，通过哈希函数h(x)获得该元素所在的下标（h(6) = 2），因此在2位置即可找到该元素。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">li = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">s = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125; <span class=\"comment\"># 集合的效率更高</span></span><br><span class=\"line\"><span class=\"comment\"># 哈希函数设计的再好也避免不了碰撞</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"哈希冲突\"><a href=\"#哈希冲突\" class=\"headerlink\" title=\"哈希冲突\"></a>哈希冲突</h2><p>哈希冲突：由于哈希表的下标范围是有限的，而元素关键字的值是接近无限的，因此可能会出现h(102) = 56， h(2003) = 56这种情况。此时，两个元素映射到同一个下标处，造成哈希冲突。</p>\n<p><strong>解决哈希冲突</strong></p>\n<ul>\n<li>拉链法（将所有冲突的元素用链表连接）</li>\n<li>开放寻址法（通过哈希冲突函数得到新的地址）</li>\n</ul>\n<p><img src=\"http://onk83djzp.bkt.clouddn.com/2017-12-13-15131769752694.jpg\" alt=\"拉链法\"></p>\n<h2 id=\"字典\"><a href=\"#字典\" class=\"headerlink\" title=\"字典\"></a>字典</h2><p><strong>在Python中的字典：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = &#123;&apos;name&apos;: &apos;Alex&apos;, &apos;age&apos;: 18, &apos;gender&apos;: &apos;Man&apos;&#125;</span><br></pre></td></tr></table></figure>\n<p>使用哈希表存储字典，通过哈希函数将字典的键映射为下标。假设h(‘name’) = 3, h(‘age’) = 1, h(‘gender’) = 4，则哈希表存储为[None, 18, None, ’Alex’, ‘Man’]</p>\n<p>在字典键值对数量不多的情况下，几乎不会发生哈希冲突，此时查找一个元素的时间复杂度为O(1)。</p>\n<h1 id=\"迷宫问题\"><a href=\"#迷宫问题\" class=\"headerlink\" title=\"迷宫问题\"></a>迷宫问题</h1><p>给一个二维列表，表示迷宫（0表示通道，1表示围墙）。给出算法，求一条走出迷宫的路径。</p>\n<h2 id=\"栈-1\"><a href=\"#栈-1\" class=\"headerlink\" title=\"栈\"></a>栈</h2><ul>\n<li><a href=\"https://github.com/cvno/Note/blob/master/1/maze.py\" target=\"_blank\" rel=\"noopener\">栈-方案</a></li>\n</ul>\n<p>深度优先 <strong>DFS（Depth[栈]-First-Search）</strong></p>\n<h2 id=\"队列-1\"><a href=\"#队列-1\" class=\"headerlink\" title=\"队列\"></a>队列</h2><ul>\n<li><a href=\"https://github.com/cvno/Note/blob/master/1/code2.py\" target=\"_blank\" rel=\"noopener\">队列-方案</a></li>\n</ul>\n<p>使用二维列表存储多条路径<br><strong>如何是打印出路径是难点</strong></p>\n<p><img src=\"http://onk83djzp.bkt.clouddn.com/15114913815577.jpg\" alt=\"迷宫\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">maze = [</span><br><span class=\"line\">    [1,1,1,1,1,1,1,1,1,1],</span><br><span class=\"line\">    [1,0,0,1,0,0,0,1,0,1],</span><br><span class=\"line\">    [1,0,0,1,0,0,0,1,0,1],</span><br><span class=\"line\">    [1,0,0,0,0,1,1,0,0,1],</span><br><span class=\"line\">    [1,0,1,1,1,0,0,0,0,1],</span><br><span class=\"line\">    [1,0,0,0,1,0,0,0,0,1],</span><br><span class=\"line\">    [1,0,1,0,0,0,1,0,0,1],</span><br><span class=\"line\">    [1,0,1,1,1,0,1,1,0,1],</span><br><span class=\"line\">    [1,1,0,0,0,0,0,0,0,1],</span><br><span class=\"line\">    [1,1,1,1,1,1,1,1,1,1]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>本文代码及 md 文件 <a href=\"https://github.com/cvno/Note/tree/master/1\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p>数据结构是设计数据以何种方式组织并存储在计算机中。</p>\n<p>比如：<code>列表</code>、<code>集合</code>与<code>字典</code>等都是一种数据结构。</p>\n<p>详细的说：</p>\n<ul>\n<li>物理层面：就是以什么样的物理存储方式</li>\n<li>逻辑方式：列表，字典，集合，树</li>\n</ul>\n<p><strong>线性数据结构，树形数据结构，图形数据结构，</strong> 基本是线性数据结构</p>\n<p>N.Wirth: “程序=数据结构+算法”</p>\n<h1 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h1><p>列表：在其他编程语言中称为“数组”，是一种基本的数据结构类型。如果更学术一点的说法是“线性表”。</p>\n<p><strong>数组与列表的不同之处：</strong><br>数组是定长的数组，如果开的内存空间长度为7，就不能再追加，只能存7个，并且这7个元素类型还必须是一样的</p>\n<p><strong>数组：定长，元素类型统一。</strong></p>\n<p>Python中的给一个列表，开一块连续内存空间，开的内存空间的长度不会刚好是列表的长度，一定会多，而内存中：变量指向的列表的元素存的是一个个内存地址（地址的格子才是真正存元素值的地方），每个元素占用的空间都是一样的，大部分编译型的语言直接存的值，而python存的不是值，而是值的内存地址。</p>\n<p>Python中一直<code>append</code>值的原理：如果之前的空间不够，就再开时原来一倍的内存空间，然后把旧的删掉</p>\n<blockquote>\n<p>列表<code>li[2]</code>寻址的时候是<code>li+2*内存地址的字节</code></p>\n</blockquote>\n<p>32位机器一个地址4个子节<br>64位机器一个地址8个字节</p>\n<p><strong>关于列表的问题：</strong></p>\n<ul>\n<li>列表中元素使如何存储的？(上述)</li>\n<li>列表提供了哪些基本的操作？(下标查找，插入，删除)</li>\n<li>这些操作的时间复杂度是多少？<ul>\n<li>O(1)</li>\n<li>O(n)(插入的时候，插入位置之后的值都需要往后挪)</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h1><p>链表中每一个元素都是一个对象，每个对象称为一个节点，包含有数据域key和指向下一个节点的指针next。通过各个节点之间的相互连接，最终串联成一个链表。</p>\n<p>为什么用链表？<br>链表的插入和删除特别快</p>\n<p><strong>节点定义:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,item)</span>:</span></span><br><span class=\"line\">        self.item = item</span><br><span class=\"line\">        self.next = <span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">n1 = Node(<span class=\"number\">1</span>)</span><br><span class=\"line\">n2 = Node(<span class=\"number\">2</span>)</span><br><span class=\"line\">n3 = Node(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">n1.next = n2</span><br><span class=\"line\">n2.next = n3</span><br><span class=\"line\"></span><br><span class=\"line\">print(n1.next.item) <span class=\"comment\"># 2</span></span><br><span class=\"line\">print(n1.next.next.item) <span class=\"comment\"># 3</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>头节点</li>\n</ul>\n<p><img src=\"https://i.imgur.com/P1WJgQ8.jpg\" alt=\"单向链表\"></p>\n<h2 id=\"链表的遍历\"><a href=\"#链表的遍历\" class=\"headerlink\" title=\"链表的遍历\"></a>链表的遍历</h2><p><img src=\"https://i.imgur.com/xvc5L8B.jpg\" alt=\"链表遍历\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">traversal</span><span class=\"params\">(head)</span>:</span></span><br><span class=\"line\">    curNode = head  <span class=\"comment\"># 临时用指针</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> curNode <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">        print(curNode.data)</span><br><span class=\"line\">        curNode = curNode.next</span><br></pre></td></tr></table></figure>\n<h2 id=\"链表节点的插入和删除\"><a href=\"#链表节点的插入和删除\" class=\"headerlink\" title=\"链表节点的插入和删除\"></a>链表节点的插入和删除</h2><p>O1的时间复杂度</p>\n<ul>\n<li>插入</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.next = curNode.next</span><br><span class=\"line\">curNode.next = p</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = curNode.next</span><br><span class=\"line\">curNode.next = curNode.next.next</span><br><span class=\"line\"><span class=\"comment\"># 也可以 &gt;&gt; curNode.next = p.next</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> p</span><br></pre></td></tr></table></figure>\n<h2 id=\"建立链表\"><a href=\"#建立链表\" class=\"headerlink\" title=\"建立链表\"></a>建立链表</h2><ul>\n<li>头插法</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">createLinkList</span><span class=\"params\">(li)</span>:</span></span><br><span class=\"line\">    l = Node()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> li:</span><br><span class=\"line\">        s = Node(Num)</span><br><span class=\"line\">        s.next = l.next</span><br><span class=\"line\">        l.next = s</span><br><span class=\"line\">    <span class=\"keyword\">return</span> l</span><br></pre></td></tr></table></figure>\n<ul>\n<li>尾插法</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">createLinkList</span><span class=\"params\">(li)</span>:</span></span><br><span class=\"line\">    l = Node()</span><br><span class=\"line\">    r = l   <span class=\"comment\"># r 指向尾节点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> li :</span><br><span class=\"line\">        s = Node(num)</span><br><span class=\"line\">        r.next = s</span><br><span class=\"line\">        r = s</span><br></pre></td></tr></table></figure>\n<h2 id=\"双链表\"><a href=\"#双链表\" class=\"headerlink\" title=\"双链表\"></a>双链表</h2><p>双链表中每个节点有两个指针：一个指向后面节点、一个指向前面节点。</p>\n<p><strong>节点定义：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,item = None)</span>:</span></span><br><span class=\"line\">        self.item = item</span><br><span class=\"line\">        self.next = <span class=\"keyword\">None</span></span><br><span class=\"line\">        self.prior = <span class=\"keyword\">None</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"双链表节点的插入和删除\"><a href=\"#双链表节点的插入和删除\" class=\"headerlink\" title=\"双链表节点的插入和删除\"></a>双链表节点的插入和删除</h3><ul>\n<li>插入</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.next = curNode.next</span><br><span class=\"line\">curNode.next.prior = p</span><br><span class=\"line\">p.prior = curNode</span><br><span class=\"line\">curNode.next = p</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = curNode.next</span><br><span class=\"line\">curNode.next = p.next</span><br><span class=\"line\">p.next.prior = curNode</span><br><span class=\"line\"><span class=\"keyword\">del</span> p</span><br></pre></td></tr></table></figure>\n<h2 id=\"链表分析\"><a href=\"#链表分析\" class=\"headerlink\" title=\"链表分析\"></a>链表分析</h2><h3 id=\"列表与链表\"><a href=\"#列表与链表\" class=\"headerlink\" title=\"列表与链表\"></a>列表与链表</h3><ul>\n<li>按元素值查找（链表二分是On的复杂度）</li>\n<li>按下标查找（链表没有法用下表查找，李列表：O1，链表On）</li>\n<li>在某元素后插入（列表：On，链表：O1）</li>\n<li>删除某元素（列表：On，链表：O1）</li>\n</ul>\n<p>树也是以链表的形式存</p>\n<h1 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h1><p>栈(Stack)是一个数据集合，可以理解为只能在一端进行插入或删除操作的列表。</p>\n<p><strong>特点：</strong> 后进先出（last-in, first-out）LIFO</p>\n<p><strong>概念：</strong></p>\n<ul>\n<li>栈顶</li>\n<li>栈底</li>\n</ul>\n<p><strong>基本操作：</strong></p>\n<ul>\n<li>进栈（压栈）：push</li>\n<li>出栈：pop</li>\n<li>取栈顶：gettop</li>\n</ul>\n<p><strong>应用实例：</strong></p>\n<ul>\n<li>Word 的撤销操作（撤销的时候后边的操作）</li>\n<li>重做</li>\n</ul>\n<blockquote>\n<p>两个栈,撤销栈出栈，重做栈压栈；重做操作是记录撤销操作的。</p>\n</blockquote>\n<h2 id=\"栈的简单实现-Python\"><a href=\"#栈的简单实现-Python\" class=\"headerlink\" title=\"栈的简单实现(Python)\"></a>栈的简单实现(Python)</h2><p>不需要自己定义，使用列表结构即可。</p>\n<ul>\n<li>进栈函数：append</li>\n<li>出栈函数：pop</li>\n<li>查看栈顶函数：li[-1]</li>\n</ul>\n<h2 id=\"栈的应用-括号匹配问题\"><a href=\"#栈的应用-括号匹配问题\" class=\"headerlink\" title=\"栈的应用 - 括号匹配问题\"></a>栈的应用 - 括号匹配问题</h2><p>给一个字符串，其中包含小括号、中括号、大括号，求该字符串中的括号是否匹配。</p>\n<ul>\n<li><code>()()[]{}</code>        匹配</li>\n<li><code>([{()}])</code>        匹配</li>\n<li><code>[](</code>        不匹配</li>\n<li><code>[(])</code>        不匹配</li>\n</ul>\n<p>代码补全，当栈是空的，栈才是合法的</p>\n<ul>\n<li><a href=\"https://github.com/cvno/Note/blob/master/1/code1.py\" target=\"_blank\" rel=\"noopener\">代码实现括号匹配</a></li>\n</ul>\n<h1 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h1><p>队列(Queue)是一个数据集合，仅允许在列表的一端进行插入，另一端进行删除。</p>\n<ul>\n<li>进行插入的一端称为队尾(rear)，插入动作称为进队或入队</li>\n<li>进行删除的一端称为队头(front)，删除动作称为出队</li>\n<li>队列的性质：先进先出(First-in, First-out)</li>\n<li>双向队列：队列的两端都允许进行进队和出队操作。</li>\n</ul>\n<p><img src=\"https://i.imgur.com/cct8beO.jpg\" alt=\"队列\"></p>\n<p><img src=\"https://i.imgur.com/ruUddhR.jpg\" alt=\"队列模型\"></p>\n<h2 id=\"队列的实现\"><a href=\"#队列的实现\" class=\"headerlink\" title=\"队列的实现\"></a>队列的实现</h2><p><strong>用Python的列表来实现出队复杂度太高</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用方法：from collections import deque</span><br><span class=\"line\">- 创建队列：queue = deque(li)</span><br><span class=\"line\">- 进队：append</span><br><span class=\"line\">- 出队：popleft</span><br><span class=\"line\">- 双向队列队首进队：appendleft</span><br><span class=\"line\">- 双向队列队尾进队：pop</span><br></pre></td></tr></table></figure>\n<h2 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h2><ul>\n<li>初步设想：列表+两个下标指针</li>\n<li>创建一个列表和两个变量，front变量指向队首，rear变量指向队尾。初始时，front和rear都为0。</li>\n<li>进队操作：元素写到li[rear]的位置，rear自增1。</li>\n<li>出队操作：返回li[front]的元素，front自减1。</li>\n</ul>\n<p><img src=\"https://i.imgur.com/VsKQCZb.jpg\" alt=\"队列\"></p>\n<h2 id=\"环形队列\"><a href=\"#环形队列\" class=\"headerlink\" title=\"环形队列\"></a>环形队列</h2><p>环形队列：当队尾指针front == Maxsize + 1时，再前进一个位置就自动到0。<br><strong>实现方式：求余数运算</strong></p>\n<ul>\n<li>队首指针前进1：front = (front + 1) % MaxSize</li>\n<li>队尾指针前进1：rear = (rear + 1) % MaxSize</li>\n<li>队空条件：rear == front</li>\n<li>队满条件：(rear + 1) % MaxSize == front</li>\n</ul>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><ul>\n<li>通过Python自带库</li>\n<li><a href=\"https://gist.github.com/cvno/eeb1073a4fc23e42885a6112671f0545\" target=\"_blank\" rel=\"noopener\">手写循环队列</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> queue    <span class=\"comment\"># 线程同步</span></span><br><span class=\"line\"><span class=\"comment\">########  分割  ########</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> deque</span><br><span class=\"line\">queue = deque()</span><br><span class=\"line\">queue.append(<span class=\"number\">1</span>)</span><br><span class=\"line\">queue.append(<span class=\"number\">2</span>)</span><br><span class=\"line\">queue.append(<span class=\"number\">3</span>)</span><br><span class=\"line\">print( ())</span><br><span class=\"line\">print(queue.popleft())</span><br><span class=\"line\"><span class=\"comment\">########  分割  ########</span></span><br><span class=\"line\">queue.appendleft(<span class=\"number\">2</span>)</span><br><span class=\"line\">queue.pop()</span><br></pre></td></tr></table></figure>\n<h1 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h1><h2 id=\"Python中的集合与字典\"><a href=\"#Python中的集合与字典\" class=\"headerlink\" title=\"Python中的集合与字典\"></a>Python中的集合与字典</h2><p>哈希表查找</p>\n<blockquote>\n<p>哈希表（Hash Table，又称为散列表），是一种线性表的存储结构。通过把每个对象的关键字k作为自变量，通过一个哈希函数h(k)，将k映射到下标h(k)处，并将该对象存储在这个位置。</p>\n</blockquote>\n<p><strong>例如：</strong>数据集合{1,6,7,9}，假设存在哈希函数h(x)使得h(1) = 0, h(6) = 2, h(7) = 4, h(9) = 5，那么这个哈希表被存储为[1,None, 6, None, 7, 9]。</p>\n<p>当我们查找元素6所在的位置时，通过哈希函数h(x)获得该元素所在的下标（h(6) = 2），因此在2位置即可找到该元素。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">li = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">s = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125; <span class=\"comment\"># 集合的效率更高</span></span><br><span class=\"line\"><span class=\"comment\"># 哈希函数设计的再好也避免不了碰撞</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"哈希冲突\"><a href=\"#哈希冲突\" class=\"headerlink\" title=\"哈希冲突\"></a>哈希冲突</h2><p>哈希冲突：由于哈希表的下标范围是有限的，而元素关键字的值是接近无限的，因此可能会出现h(102) = 56， h(2003) = 56这种情况。此时，两个元素映射到同一个下标处，造成哈希冲突。</p>\n<p><strong>解决哈希冲突</strong></p>\n<ul>\n<li>拉链法（将所有冲突的元素用链表连接）</li>\n<li>开放寻址法（通过哈希冲突函数得到新的地址）</li>\n</ul>\n<p><img src=\"http://onk83djzp.bkt.clouddn.com/2017-12-13-15131769752694.jpg\" alt=\"拉链法\"></p>\n<h2 id=\"字典\"><a href=\"#字典\" class=\"headerlink\" title=\"字典\"></a>字典</h2><p><strong>在Python中的字典：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = &#123;&apos;name&apos;: &apos;Alex&apos;, &apos;age&apos;: 18, &apos;gender&apos;: &apos;Man&apos;&#125;</span><br></pre></td></tr></table></figure>\n<p>使用哈希表存储字典，通过哈希函数将字典的键映射为下标。假设h(‘name’) = 3, h(‘age’) = 1, h(‘gender’) = 4，则哈希表存储为[None, 18, None, ’Alex’, ‘Man’]</p>\n<p>在字典键值对数量不多的情况下，几乎不会发生哈希冲突，此时查找一个元素的时间复杂度为O(1)。</p>\n<h1 id=\"迷宫问题\"><a href=\"#迷宫问题\" class=\"headerlink\" title=\"迷宫问题\"></a>迷宫问题</h1><p>给一个二维列表，表示迷宫（0表示通道，1表示围墙）。给出算法，求一条走出迷宫的路径。</p>\n<h2 id=\"栈-1\"><a href=\"#栈-1\" class=\"headerlink\" title=\"栈\"></a>栈</h2><ul>\n<li><a href=\"https://github.com/cvno/Note/blob/master/1/maze.py\" target=\"_blank\" rel=\"noopener\">栈-方案</a></li>\n</ul>\n<p>深度优先 <strong>DFS（Depth[栈]-First-Search）</strong></p>\n<h2 id=\"队列-1\"><a href=\"#队列-1\" class=\"headerlink\" title=\"队列\"></a>队列</h2><ul>\n<li><a href=\"https://github.com/cvno/Note/blob/master/1/code2.py\" target=\"_blank\" rel=\"noopener\">队列-方案</a></li>\n</ul>\n<p>使用二维列表存储多条路径<br><strong>如何是打印出路径是难点</strong></p>\n<p><img src=\"http://onk83djzp.bkt.clouddn.com/15114913815577.jpg\" alt=\"迷宫\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">maze = [</span><br><span class=\"line\">    [1,1,1,1,1,1,1,1,1,1],</span><br><span class=\"line\">    [1,0,0,1,0,0,0,1,0,1],</span><br><span class=\"line\">    [1,0,0,1,0,0,0,1,0,1],</span><br><span class=\"line\">    [1,0,0,0,0,1,1,0,0,1],</span><br><span class=\"line\">    [1,0,1,1,1,0,0,0,0,1],</span><br><span class=\"line\">    [1,0,0,0,1,0,0,0,0,1],</span><br><span class=\"line\">    [1,0,1,0,0,0,1,0,0,1],</span><br><span class=\"line\">    [1,0,1,1,1,0,1,1,0,1],</span><br><span class=\"line\">    [1,1,0,0,0,0,0,0,0,1],</span><br><span class=\"line\">    [1,1,1,1,1,1,1,1,1,1]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>本文代码及 md 文件 <a href=\"https://github.com/cvno/Note/tree/master/1\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n"},{"title":"Django rest framwork","date":"2017-07-23T09:21:11.000Z","keywords":null,"description":null,"_content":"\nRESTful API : 面向资源编程\n\n[my-rest-framework](https://github.com/cvno/my-rest-framework)\n\n<!-- more -->\n\n```sh\npip3 install djangorestframework\n```\n\n# 快速使用\n\n\n```python\n# step 1：注册 App -> setting.py\nINSTALLED_APPS = [\n    ...\n    'rest_framework', # <---\n]\n# step 2：注册路由 api--->urls.py(单独App)\nfrom rest_framework import routers\nfrom . import views\n\nrouter = routers.DefaultRouter()\nrouter.register('users',Views.UserInfoViewSet)\n\nurlpatterns = [\n    url(r'^'),include(router.urls)),\n]\n\n# step 3：view.py\nfrom app01.models import *\nfrom rest_framework.viewsets import ModelViewSet\nfrom rest_framework.serializers import HyperlinkedModelSerializer\n\n# Create your views here.\n\nclass UsersSerializer(HyperlinkedModelSerializer):\n    ''' rest api 数据定制 指定显示的数据 '''\n    class Meta:\n        model = User\n        fields = ('id','username')  # 字段\n        # exclude = ('password',)    # 除这个字段以外\n        depth = 0                   # 0 <= depth <= 10   查询外键 0 只查自己的表 1 关联的下一层也会拿到 ...\n\nclass UsersViewSet(ModelViewSet):\n    queryset = User.objects.all().order_by('-id')\n    serializer_class = UsersSerializer    # 验证数据库操作 相当于 Form的功能\n```\n\n# CBV\n\n- urls.py\n\n```python\nurlpatterns = [\n    url(r'user/$', views.UserView.as_view()),  # CBV\n    # url(r'user/(?P<pk>[0-9]+)/$',views.UserDetail.as_view()), # CBV\n    url(r'user/(\\d+)/$', views.UserDetail.as_view()),  # CBV\n]\n```\n\n- view.py\n\n```python\nfrom rest_framework.views import APIView\nfrom app01 import serializers\nfrom rest_framework.parsers import JSONParser   # json -> loads\n\nclass UserView(APIView):\n    def get(self, request, *args, **kwargs):\n        \"\"\" 获取多条数据 \"\"\"\n        data_list = User.objects.all()\n\n        # 1. django 序列化\n        # from django.core import serializers\n        # data = serializers.serialize('json',data_list)\n        # return HttpResponse(data)\n\n        # 2. rest framework 序列化 + form 验证 + 自定义\n        serializer = serializers.MySerializer(instance=data_list, many=True)  # many -> 单条 or 多条\n        # return HttpResponse(json.dumps(serializer.data,ensure_ascii=False))   # 正常显示中文\n        return JsonResponse(serializer.data,safe=False,json_dumps_params={\"ensure_ascii\":False})\n\n    def post(self, request, *args, **kwargs):\n        \"\"\" 创建数据 \"\"\"\n        # old\n        # print(request.data)\n        # Blog.objects.create(**request.data)\n        # rest framework\n        data = JSONParser().parse(request)\n        serializer = serializers.MySerializer(data=data)\n        if serializer.is_valid():\n            # print(serializer.data)\n            # print(serializer.errors)\n            # print(serializer.validated_data)\n            # 如果有 instance，则执行 update 方法；否则执行 create\n            serializer.save()\n        return HttpResponse('...')\n\n\nclass UserDetail(APIView):\n    def get(self, request, nid):  # *args,**kwargs ->  pk`\n        \"\"\" 获取单条数据 \"\"\"\n        obj = User.objects.filter(nid=nid).first()\n        serializer = serializers.MySerializer(instance=obj)\n        return JsonResponse(serializer.data, safe=False, json_dumps_params={\"ensure_ascii\": False})\n\n    def put(self, request, nid):  # *args,**kwargs ->  pk`\n        ''' 修改单条数据 '''\n        obj = User.objects.filter(nid=nid).first()\n        data = JSONParser().parse(request)\n        serializer = serializers.MySerializer(instance=obj,data=data)\n        if serializer.is_valid():\n            serializer.save()\n            return HttpResponse(200)\n        # TODO\n\n    def delete(self, request, nid):  # *args,**kwargs ->  pk`\n        \"\"\" 删除数据 \"\"\"\n        obj = User.objects.filter(nid=nid).delete()\n        return HttpResponse(status=204)\n```\n\n- new file serializers.py\n\n```python\nfrom rest_framework import serializers\nfrom app01 import models\n\n\nclass MySerializer(serializers.Serializer):\n    nid = serializers.IntegerField(read_only=True)\n    username = serializers.CharField(max_length=64)\n    password = serializers.CharField(max_length=32)\n    email = serializers.CharField(max_length=32)\n\n    # 和 Form 表单一样\n    def validate_username(self, value):\n        return value\n\n    def validate_email(self, value):\n        return value\n\n    def update(self, instance, validated_data):\n        instance.name = validated_data['name']\n        instance.user = validated_data['user']\n        instance.save()\n\n    def create(self, validated_data):\n        models.User.objects.create(**validated_data)\n```\n\n\n# 总结\n\n- 2 个 url \n- 5 个 方法\n\n*最多进行跨表查询，综合数据展示出来*\n\n# 参考\n- http://www.cnblogs.com/wupeiqi/articles/7281134.html\n- http://www.cnblogs.com/OldJack/p/7294222.html\n\n","source":"_posts/django-rest-framwork.md","raw":"---\ntitle: Django rest framwork\ndate: 2017-07-23 17:21:11\ntags: django\ncategories:\nkeywords:\ndescription:\n---\n\nRESTful API : 面向资源编程\n\n[my-rest-framework](https://github.com/cvno/my-rest-framework)\n\n<!-- more -->\n\n```sh\npip3 install djangorestframework\n```\n\n# 快速使用\n\n\n```python\n# step 1：注册 App -> setting.py\nINSTALLED_APPS = [\n    ...\n    'rest_framework', # <---\n]\n# step 2：注册路由 api--->urls.py(单独App)\nfrom rest_framework import routers\nfrom . import views\n\nrouter = routers.DefaultRouter()\nrouter.register('users',Views.UserInfoViewSet)\n\nurlpatterns = [\n    url(r'^'),include(router.urls)),\n]\n\n# step 3：view.py\nfrom app01.models import *\nfrom rest_framework.viewsets import ModelViewSet\nfrom rest_framework.serializers import HyperlinkedModelSerializer\n\n# Create your views here.\n\nclass UsersSerializer(HyperlinkedModelSerializer):\n    ''' rest api 数据定制 指定显示的数据 '''\n    class Meta:\n        model = User\n        fields = ('id','username')  # 字段\n        # exclude = ('password',)    # 除这个字段以外\n        depth = 0                   # 0 <= depth <= 10   查询外键 0 只查自己的表 1 关联的下一层也会拿到 ...\n\nclass UsersViewSet(ModelViewSet):\n    queryset = User.objects.all().order_by('-id')\n    serializer_class = UsersSerializer    # 验证数据库操作 相当于 Form的功能\n```\n\n# CBV\n\n- urls.py\n\n```python\nurlpatterns = [\n    url(r'user/$', views.UserView.as_view()),  # CBV\n    # url(r'user/(?P<pk>[0-9]+)/$',views.UserDetail.as_view()), # CBV\n    url(r'user/(\\d+)/$', views.UserDetail.as_view()),  # CBV\n]\n```\n\n- view.py\n\n```python\nfrom rest_framework.views import APIView\nfrom app01 import serializers\nfrom rest_framework.parsers import JSONParser   # json -> loads\n\nclass UserView(APIView):\n    def get(self, request, *args, **kwargs):\n        \"\"\" 获取多条数据 \"\"\"\n        data_list = User.objects.all()\n\n        # 1. django 序列化\n        # from django.core import serializers\n        # data = serializers.serialize('json',data_list)\n        # return HttpResponse(data)\n\n        # 2. rest framework 序列化 + form 验证 + 自定义\n        serializer = serializers.MySerializer(instance=data_list, many=True)  # many -> 单条 or 多条\n        # return HttpResponse(json.dumps(serializer.data,ensure_ascii=False))   # 正常显示中文\n        return JsonResponse(serializer.data,safe=False,json_dumps_params={\"ensure_ascii\":False})\n\n    def post(self, request, *args, **kwargs):\n        \"\"\" 创建数据 \"\"\"\n        # old\n        # print(request.data)\n        # Blog.objects.create(**request.data)\n        # rest framework\n        data = JSONParser().parse(request)\n        serializer = serializers.MySerializer(data=data)\n        if serializer.is_valid():\n            # print(serializer.data)\n            # print(serializer.errors)\n            # print(serializer.validated_data)\n            # 如果有 instance，则执行 update 方法；否则执行 create\n            serializer.save()\n        return HttpResponse('...')\n\n\nclass UserDetail(APIView):\n    def get(self, request, nid):  # *args,**kwargs ->  pk`\n        \"\"\" 获取单条数据 \"\"\"\n        obj = User.objects.filter(nid=nid).first()\n        serializer = serializers.MySerializer(instance=obj)\n        return JsonResponse(serializer.data, safe=False, json_dumps_params={\"ensure_ascii\": False})\n\n    def put(self, request, nid):  # *args,**kwargs ->  pk`\n        ''' 修改单条数据 '''\n        obj = User.objects.filter(nid=nid).first()\n        data = JSONParser().parse(request)\n        serializer = serializers.MySerializer(instance=obj,data=data)\n        if serializer.is_valid():\n            serializer.save()\n            return HttpResponse(200)\n        # TODO\n\n    def delete(self, request, nid):  # *args,**kwargs ->  pk`\n        \"\"\" 删除数据 \"\"\"\n        obj = User.objects.filter(nid=nid).delete()\n        return HttpResponse(status=204)\n```\n\n- new file serializers.py\n\n```python\nfrom rest_framework import serializers\nfrom app01 import models\n\n\nclass MySerializer(serializers.Serializer):\n    nid = serializers.IntegerField(read_only=True)\n    username = serializers.CharField(max_length=64)\n    password = serializers.CharField(max_length=32)\n    email = serializers.CharField(max_length=32)\n\n    # 和 Form 表单一样\n    def validate_username(self, value):\n        return value\n\n    def validate_email(self, value):\n        return value\n\n    def update(self, instance, validated_data):\n        instance.name = validated_data['name']\n        instance.user = validated_data['user']\n        instance.save()\n\n    def create(self, validated_data):\n        models.User.objects.create(**validated_data)\n```\n\n\n# 总结\n\n- 2 个 url \n- 5 个 方法\n\n*最多进行跨表查询，综合数据展示出来*\n\n# 参考\n- http://www.cnblogs.com/wupeiqi/articles/7281134.html\n- http://www.cnblogs.com/OldJack/p/7294222.html\n\n","slug":"django-rest-framwork","published":1,"updated":"2018-04-01T13:23:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfgx5owp000gmxgoxvmg9vby","content":"<p>RESTful API : 面向资源编程</p>\n<p><a href=\"https://github.com/cvno/my-rest-framework\" target=\"_blank\" rel=\"noopener\">my-rest-framework</a></p>\n<a id=\"more\"></a>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install djangorestframework</span><br></pre></td></tr></table></figure>\n<h1 id=\"快速使用\"><a href=\"#快速使用\" class=\"headerlink\" title=\"快速使用\"></a>快速使用</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># step 1：注册 App -&gt; setting.py</span></span><br><span class=\"line\">INSTALLED_APPS = [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"string\">'rest_framework'</span>, <span class=\"comment\"># &lt;---</span></span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"comment\"># step 2：注册路由 api---&gt;urls.py(单独App)</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> routers</span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views</span><br><span class=\"line\"></span><br><span class=\"line\">router = routers.DefaultRouter()</span><br><span class=\"line\">router.register(<span class=\"string\">'users'</span>,Views.UserInfoViewSet)</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^'</span>),include(router.urls)),</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># step 3：view.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> app01.models <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.viewsets <span class=\"keyword\">import</span> ModelViewSet</span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.serializers <span class=\"keyword\">import</span> HyperlinkedModelSerializer</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create your views here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UsersSerializer</span><span class=\"params\">(HyperlinkedModelSerializer)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">''' rest api 数据定制 指定显示的数据 '''</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = User</span><br><span class=\"line\">        fields = (<span class=\"string\">'id'</span>,<span class=\"string\">'username'</span>)  <span class=\"comment\"># 字段</span></span><br><span class=\"line\">        <span class=\"comment\"># exclude = ('password',)    # 除这个字段以外</span></span><br><span class=\"line\">        depth = <span class=\"number\">0</span>                   <span class=\"comment\"># 0 &lt;= depth &lt;= 10   查询外键 0 只查自己的表 1 关联的下一层也会拿到 ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UsersViewSet</span><span class=\"params\">(ModelViewSet)</span>:</span></span><br><span class=\"line\">    queryset = User.objects.all().order_by(<span class=\"string\">'-id'</span>)</span><br><span class=\"line\">    serializer_class = UsersSerializer    <span class=\"comment\"># 验证数据库操作 相当于 Form的功能</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"CBV\"><a href=\"#CBV\" class=\"headerlink\" title=\"CBV\"></a>CBV</h1><ul>\n<li>urls.py</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'user/$'</span>, views.UserView.as_view()),  <span class=\"comment\"># CBV</span></span><br><span class=\"line\">    <span class=\"comment\"># url(r'user/(?P&lt;pk&gt;[0-9]+)/$',views.UserDetail.as_view()), # CBV</span></span><br><span class=\"line\">    url(<span class=\"string\">r'user/(\\d+)/$'</span>, views.UserDetail.as_view()),  <span class=\"comment\"># CBV</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>view.py</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.views <span class=\"keyword\">import</span> APIView</span><br><span class=\"line\"><span class=\"keyword\">from</span> app01 <span class=\"keyword\">import</span> serializers</span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.parsers <span class=\"keyword\">import</span> JSONParser   <span class=\"comment\"># json -&gt; loads</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserView</span><span class=\"params\">(APIView)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, request, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\" 获取多条数据 \"\"\"</span></span><br><span class=\"line\">        data_list = User.objects.all()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 1. django 序列化</span></span><br><span class=\"line\">        <span class=\"comment\"># from django.core import serializers</span></span><br><span class=\"line\">        <span class=\"comment\"># data = serializers.serialize('json',data_list)</span></span><br><span class=\"line\">        <span class=\"comment\"># return HttpResponse(data)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 2. rest framework 序列化 + form 验证 + 自定义</span></span><br><span class=\"line\">        serializer = serializers.MySerializer(instance=data_list, many=<span class=\"keyword\">True</span>)  <span class=\"comment\"># many -&gt; 单条 or 多条</span></span><br><span class=\"line\">        <span class=\"comment\"># return HttpResponse(json.dumps(serializer.data,ensure_ascii=False))   # 正常显示中文</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsonResponse(serializer.data,safe=<span class=\"keyword\">False</span>,json_dumps_params=&#123;<span class=\"string\">\"ensure_ascii\"</span>:<span class=\"keyword\">False</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">post</span><span class=\"params\">(self, request, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\" 创建数据 \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># old</span></span><br><span class=\"line\">        <span class=\"comment\"># print(request.data)</span></span><br><span class=\"line\">        <span class=\"comment\"># Blog.objects.create(**request.data)</span></span><br><span class=\"line\">        <span class=\"comment\"># rest framework</span></span><br><span class=\"line\">        data = JSONParser().parse(request)</span><br><span class=\"line\">        serializer = serializers.MySerializer(data=data)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> serializer.is_valid():</span><br><span class=\"line\">            <span class=\"comment\"># print(serializer.data)</span></span><br><span class=\"line\">            <span class=\"comment\"># print(serializer.errors)</span></span><br><span class=\"line\">            <span class=\"comment\"># print(serializer.validated_data)</span></span><br><span class=\"line\">            <span class=\"comment\"># 如果有 instance，则执行 update 方法；否则执行 create</span></span><br><span class=\"line\">            serializer.save()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">'...'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDetail</span><span class=\"params\">(APIView)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, request, nid)</span>:</span>  <span class=\"comment\"># *args,**kwargs -&gt;  pk`</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\" 获取单条数据 \"\"\"</span></span><br><span class=\"line\">        obj = User.objects.filter(nid=nid).first()</span><br><span class=\"line\">        serializer = serializers.MySerializer(instance=obj)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsonResponse(serializer.data, safe=<span class=\"keyword\">False</span>, json_dumps_params=&#123;<span class=\"string\">\"ensure_ascii\"</span>: <span class=\"keyword\">False</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">put</span><span class=\"params\">(self, request, nid)</span>:</span>  <span class=\"comment\"># *args,**kwargs -&gt;  pk`</span></span><br><span class=\"line\">        <span class=\"string\">''' 修改单条数据 '''</span></span><br><span class=\"line\">        obj = User.objects.filter(nid=nid).first()</span><br><span class=\"line\">        data = JSONParser().parse(request)</span><br><span class=\"line\">        serializer = serializers.MySerializer(instance=obj,data=data)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> serializer.is_valid():</span><br><span class=\"line\">            serializer.save()</span><br><span class=\"line\">            <span class=\"keyword\">return</span> HttpResponse(<span class=\"number\">200</span>)</span><br><span class=\"line\">        <span class=\"comment\"># TODO</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(self, request, nid)</span>:</span>  <span class=\"comment\"># *args,**kwargs -&gt;  pk`</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\" 删除数据 \"\"\"</span></span><br><span class=\"line\">        obj = User.objects.filter(nid=nid).delete()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> HttpResponse(status=<span class=\"number\">204</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>new file serializers.py</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> serializers</span><br><span class=\"line\"><span class=\"keyword\">from</span> app01 <span class=\"keyword\">import</span> models</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySerializer</span><span class=\"params\">(serializers.Serializer)</span>:</span></span><br><span class=\"line\">    nid = serializers.IntegerField(read_only=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    username = serializers.CharField(max_length=<span class=\"number\">64</span>)</span><br><span class=\"line\">    password = serializers.CharField(max_length=<span class=\"number\">32</span>)</span><br><span class=\"line\">    email = serializers.CharField(max_length=<span class=\"number\">32</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 和 Form 表单一样</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">validate_username</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">validate_email</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(self, instance, validated_data)</span>:</span></span><br><span class=\"line\">        instance.name = validated_data[<span class=\"string\">'name'</span>]</span><br><span class=\"line\">        instance.user = validated_data[<span class=\"string\">'user'</span>]</span><br><span class=\"line\">        instance.save()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span><span class=\"params\">(self, validated_data)</span>:</span></span><br><span class=\"line\">        models.User.objects.create(**validated_data)</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li>2 个 url </li>\n<li>5 个 方法</li>\n</ul>\n<p><em>最多进行跨表查询，综合数据展示出来</em></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://www.cnblogs.com/wupeiqi/articles/7281134.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/wupeiqi/articles/7281134.html</a></li>\n<li><a href=\"http://www.cnblogs.com/OldJack/p/7294222.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/OldJack/p/7294222.html</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>RESTful API : 面向资源编程</p>\n<p><a href=\"https://github.com/cvno/my-rest-framework\" target=\"_blank\" rel=\"noopener\">my-rest-framework</a></p>","more":"<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install djangorestframework</span><br></pre></td></tr></table></figure>\n<h1 id=\"快速使用\"><a href=\"#快速使用\" class=\"headerlink\" title=\"快速使用\"></a>快速使用</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># step 1：注册 App -&gt; setting.py</span></span><br><span class=\"line\">INSTALLED_APPS = [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"string\">'rest_framework'</span>, <span class=\"comment\"># &lt;---</span></span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"comment\"># step 2：注册路由 api---&gt;urls.py(单独App)</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> routers</span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views</span><br><span class=\"line\"></span><br><span class=\"line\">router = routers.DefaultRouter()</span><br><span class=\"line\">router.register(<span class=\"string\">'users'</span>,Views.UserInfoViewSet)</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^'</span>),include(router.urls)),</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># step 3：view.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> app01.models <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.viewsets <span class=\"keyword\">import</span> ModelViewSet</span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.serializers <span class=\"keyword\">import</span> HyperlinkedModelSerializer</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create your views here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UsersSerializer</span><span class=\"params\">(HyperlinkedModelSerializer)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">''' rest api 数据定制 指定显示的数据 '''</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = User</span><br><span class=\"line\">        fields = (<span class=\"string\">'id'</span>,<span class=\"string\">'username'</span>)  <span class=\"comment\"># 字段</span></span><br><span class=\"line\">        <span class=\"comment\"># exclude = ('password',)    # 除这个字段以外</span></span><br><span class=\"line\">        depth = <span class=\"number\">0</span>                   <span class=\"comment\"># 0 &lt;= depth &lt;= 10   查询外键 0 只查自己的表 1 关联的下一层也会拿到 ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UsersViewSet</span><span class=\"params\">(ModelViewSet)</span>:</span></span><br><span class=\"line\">    queryset = User.objects.all().order_by(<span class=\"string\">'-id'</span>)</span><br><span class=\"line\">    serializer_class = UsersSerializer    <span class=\"comment\"># 验证数据库操作 相当于 Form的功能</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"CBV\"><a href=\"#CBV\" class=\"headerlink\" title=\"CBV\"></a>CBV</h1><ul>\n<li>urls.py</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'user/$'</span>, views.UserView.as_view()),  <span class=\"comment\"># CBV</span></span><br><span class=\"line\">    <span class=\"comment\"># url(r'user/(?P&lt;pk&gt;[0-9]+)/$',views.UserDetail.as_view()), # CBV</span></span><br><span class=\"line\">    url(<span class=\"string\">r'user/(\\d+)/$'</span>, views.UserDetail.as_view()),  <span class=\"comment\"># CBV</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>view.py</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.views <span class=\"keyword\">import</span> APIView</span><br><span class=\"line\"><span class=\"keyword\">from</span> app01 <span class=\"keyword\">import</span> serializers</span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.parsers <span class=\"keyword\">import</span> JSONParser   <span class=\"comment\"># json -&gt; loads</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserView</span><span class=\"params\">(APIView)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, request, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\" 获取多条数据 \"\"\"</span></span><br><span class=\"line\">        data_list = User.objects.all()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 1. django 序列化</span></span><br><span class=\"line\">        <span class=\"comment\"># from django.core import serializers</span></span><br><span class=\"line\">        <span class=\"comment\"># data = serializers.serialize('json',data_list)</span></span><br><span class=\"line\">        <span class=\"comment\"># return HttpResponse(data)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 2. rest framework 序列化 + form 验证 + 自定义</span></span><br><span class=\"line\">        serializer = serializers.MySerializer(instance=data_list, many=<span class=\"keyword\">True</span>)  <span class=\"comment\"># many -&gt; 单条 or 多条</span></span><br><span class=\"line\">        <span class=\"comment\"># return HttpResponse(json.dumps(serializer.data,ensure_ascii=False))   # 正常显示中文</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsonResponse(serializer.data,safe=<span class=\"keyword\">False</span>,json_dumps_params=&#123;<span class=\"string\">\"ensure_ascii\"</span>:<span class=\"keyword\">False</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">post</span><span class=\"params\">(self, request, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\" 创建数据 \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># old</span></span><br><span class=\"line\">        <span class=\"comment\"># print(request.data)</span></span><br><span class=\"line\">        <span class=\"comment\"># Blog.objects.create(**request.data)</span></span><br><span class=\"line\">        <span class=\"comment\"># rest framework</span></span><br><span class=\"line\">        data = JSONParser().parse(request)</span><br><span class=\"line\">        serializer = serializers.MySerializer(data=data)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> serializer.is_valid():</span><br><span class=\"line\">            <span class=\"comment\"># print(serializer.data)</span></span><br><span class=\"line\">            <span class=\"comment\"># print(serializer.errors)</span></span><br><span class=\"line\">            <span class=\"comment\"># print(serializer.validated_data)</span></span><br><span class=\"line\">            <span class=\"comment\"># 如果有 instance，则执行 update 方法；否则执行 create</span></span><br><span class=\"line\">            serializer.save()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">'...'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDetail</span><span class=\"params\">(APIView)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, request, nid)</span>:</span>  <span class=\"comment\"># *args,**kwargs -&gt;  pk`</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\" 获取单条数据 \"\"\"</span></span><br><span class=\"line\">        obj = User.objects.filter(nid=nid).first()</span><br><span class=\"line\">        serializer = serializers.MySerializer(instance=obj)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsonResponse(serializer.data, safe=<span class=\"keyword\">False</span>, json_dumps_params=&#123;<span class=\"string\">\"ensure_ascii\"</span>: <span class=\"keyword\">False</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">put</span><span class=\"params\">(self, request, nid)</span>:</span>  <span class=\"comment\"># *args,**kwargs -&gt;  pk`</span></span><br><span class=\"line\">        <span class=\"string\">''' 修改单条数据 '''</span></span><br><span class=\"line\">        obj = User.objects.filter(nid=nid).first()</span><br><span class=\"line\">        data = JSONParser().parse(request)</span><br><span class=\"line\">        serializer = serializers.MySerializer(instance=obj,data=data)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> serializer.is_valid():</span><br><span class=\"line\">            serializer.save()</span><br><span class=\"line\">            <span class=\"keyword\">return</span> HttpResponse(<span class=\"number\">200</span>)</span><br><span class=\"line\">        <span class=\"comment\"># TODO</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(self, request, nid)</span>:</span>  <span class=\"comment\"># *args,**kwargs -&gt;  pk`</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\" 删除数据 \"\"\"</span></span><br><span class=\"line\">        obj = User.objects.filter(nid=nid).delete()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> HttpResponse(status=<span class=\"number\">204</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>new file serializers.py</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> serializers</span><br><span class=\"line\"><span class=\"keyword\">from</span> app01 <span class=\"keyword\">import</span> models</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySerializer</span><span class=\"params\">(serializers.Serializer)</span>:</span></span><br><span class=\"line\">    nid = serializers.IntegerField(read_only=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    username = serializers.CharField(max_length=<span class=\"number\">64</span>)</span><br><span class=\"line\">    password = serializers.CharField(max_length=<span class=\"number\">32</span>)</span><br><span class=\"line\">    email = serializers.CharField(max_length=<span class=\"number\">32</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 和 Form 表单一样</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">validate_username</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">validate_email</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(self, instance, validated_data)</span>:</span></span><br><span class=\"line\">        instance.name = validated_data[<span class=\"string\">'name'</span>]</span><br><span class=\"line\">        instance.user = validated_data[<span class=\"string\">'user'</span>]</span><br><span class=\"line\">        instance.save()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span><span class=\"params\">(self, validated_data)</span>:</span></span><br><span class=\"line\">        models.User.objects.create(**validated_data)</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li>2 个 url </li>\n<li>5 个 方法</li>\n</ul>\n<p><em>最多进行跨表查询，综合数据展示出来</em></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://www.cnblogs.com/wupeiqi/articles/7281134.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/wupeiqi/articles/7281134.html</a></li>\n<li><a href=\"http://www.cnblogs.com/OldJack/p/7294222.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/OldJack/p/7294222.html</a></li>\n</ul>"},{"title":"设置django admin 显示为中文","date":"2018-01-02T09:54:22.000Z","keywords":null,"description":"默认的 django admin 组件 显示为英文，设置 django admin 显示为中文很简单","_content":"\n默认的 django admin 组件 显示为英文，设置 django admin 显示为中文很简单，只需在 settings.py 的 MIDDLEWARE_CLASSES 中添加一句 `'django.middleware.locale.LocaleMiddleware'` 即可。\n\n如:\n\n```\nMIDDLEWARE_CLASSES = (\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'django.middleware.locale.LocaleMiddleware',\n)\n```\n\n\n**注意：**\n\n1. `'django.middleware.locale.LocaleMiddleware'` 必须放在 `'django.contrib.sessions.middleware.SessionMiddleware'` 之后。\n\n2. 如果添加上面这句话后还是显示英文，则可能是浏览器语言设置问题，在浏览器语言设置中添加中文并放到首位试试。比如 Firefox 浏览器设置为：Firefox->Edit->Preferences->  Content->Languages \n\n# 引用\n- https://my.oschina.net/means/blog/287753\n\n","source":"_posts/django-admin-cn.md","raw":"---\ntitle: 设置django admin 显示为中文\ndate: 2018-01-02 17:54:22\ntags: django\ncategories:\nkeywords:\ndescription: 默认的 django admin 组件 显示为英文，设置 django admin 显示为中文很简单\n---\n\n默认的 django admin 组件 显示为英文，设置 django admin 显示为中文很简单，只需在 settings.py 的 MIDDLEWARE_CLASSES 中添加一句 `'django.middleware.locale.LocaleMiddleware'` 即可。\n\n如:\n\n```\nMIDDLEWARE_CLASSES = (\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'django.middleware.locale.LocaleMiddleware',\n)\n```\n\n\n**注意：**\n\n1. `'django.middleware.locale.LocaleMiddleware'` 必须放在 `'django.contrib.sessions.middleware.SessionMiddleware'` 之后。\n\n2. 如果添加上面这句话后还是显示英文，则可能是浏览器语言设置问题，在浏览器语言设置中添加中文并放到首位试试。比如 Firefox 浏览器设置为：Firefox->Edit->Preferences->  Content->Languages \n\n# 引用\n- https://my.oschina.net/means/blog/287753\n\n","slug":"django-admin-cn","published":1,"updated":"2018-04-01T13:23:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfgx5ows000imxgoz3b358kw","content":"<p>默认的 django admin 组件 显示为英文，设置 django admin 显示为中文很简单，只需在 settings.py 的 MIDDLEWARE_CLASSES 中添加一句 <code>&#39;django.middleware.locale.LocaleMiddleware&#39;</code> 即可。</p>\n<p>如:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MIDDLEWARE_CLASSES = (</span><br><span class=\"line\">    &apos;django.contrib.sessions.middleware.SessionMiddleware&apos;,</span><br><span class=\"line\">    &apos;django.middleware.common.CommonMiddleware&apos;,</span><br><span class=\"line\">    &apos;django.middleware.csrf.CsrfViewMiddleware&apos;,</span><br><span class=\"line\">    &apos;django.contrib.auth.middleware.AuthenticationMiddleware&apos;,</span><br><span class=\"line\">    &apos;django.contrib.messages.middleware.MessageMiddleware&apos;,</span><br><span class=\"line\">    &apos;django.middleware.clickjacking.XFrameOptionsMiddleware&apos;,</span><br><span class=\"line\">    &apos;django.middleware.locale.LocaleMiddleware&apos;,</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong></p>\n<ol>\n<li><p><code>&#39;django.middleware.locale.LocaleMiddleware&#39;</code> 必须放在 <code>&#39;django.contrib.sessions.middleware.SessionMiddleware&#39;</code> 之后。</p>\n</li>\n<li><p>如果添加上面这句话后还是显示英文，则可能是浏览器语言设置问题，在浏览器语言设置中添加中文并放到首位试试。比如 Firefox 浏览器设置为：Firefox-&gt;Edit-&gt;Preferences-&gt;  Content-&gt;Languages </p>\n</li>\n</ol>\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><ul>\n<li><a href=\"https://my.oschina.net/means/blog/287753\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/means/blog/287753</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>默认的 django admin 组件 显示为英文，设置 django admin 显示为中文很简单，只需在 settings.py 的 MIDDLEWARE_CLASSES 中添加一句 <code>&#39;django.middleware.locale.LocaleMiddleware&#39;</code> 即可。</p>\n<p>如:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MIDDLEWARE_CLASSES = (</span><br><span class=\"line\">    &apos;django.contrib.sessions.middleware.SessionMiddleware&apos;,</span><br><span class=\"line\">    &apos;django.middleware.common.CommonMiddleware&apos;,</span><br><span class=\"line\">    &apos;django.middleware.csrf.CsrfViewMiddleware&apos;,</span><br><span class=\"line\">    &apos;django.contrib.auth.middleware.AuthenticationMiddleware&apos;,</span><br><span class=\"line\">    &apos;django.contrib.messages.middleware.MessageMiddleware&apos;,</span><br><span class=\"line\">    &apos;django.middleware.clickjacking.XFrameOptionsMiddleware&apos;,</span><br><span class=\"line\">    &apos;django.middleware.locale.LocaleMiddleware&apos;,</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong></p>\n<ol>\n<li><p><code>&#39;django.middleware.locale.LocaleMiddleware&#39;</code> 必须放在 <code>&#39;django.contrib.sessions.middleware.SessionMiddleware&#39;</code> 之后。</p>\n</li>\n<li><p>如果添加上面这句话后还是显示英文，则可能是浏览器语言设置问题，在浏览器语言设置中添加中文并放到首位试试。比如 Firefox 浏览器设置为：Firefox-&gt;Edit-&gt;Preferences-&gt;  Content-&gt;Languages </p>\n</li>\n</ol>\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><ul>\n<li><a href=\"https://my.oschina.net/means/blog/287753\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/means/blog/287753</a></li>\n</ul>\n"},{"title":"google voice keep","date":"2018-01-29T02:26:49.000Z","keywords":null,"description":"基于自己 Google Voice 模块开发的 SMS 订阅服务, 防止 GV 号码回收","_content":"\n>**项目地址:** [Google Voice Keep](https://voice.cvno.me)\n\n\n# 项目更新记录\n\n## 2018-2-2\n- 修复不可预料的 Google Voice 限制发送信息 bug\n\n## 2018-1-29 基本功能完成\n- 提供为期半年的 SMS 订阅服务\n\n\n","source":"_posts/google-voice-keep.md","raw":"---\ntitle: google voice keep\ndate: 2018-01-29 10:26:49\ntags:\ncategories: Project\nkeywords:\ndescription: 基于自己 Google Voice 模块开发的 SMS 订阅服务, 防止 GV 号码回收\n---\n\n>**项目地址:** [Google Voice Keep](https://voice.cvno.me)\n\n\n# 项目更新记录\n\n## 2018-2-2\n- 修复不可预料的 Google Voice 限制发送信息 bug\n\n## 2018-1-29 基本功能完成\n- 提供为期半年的 SMS 订阅服务\n\n\n","slug":"google-voice-keep","published":1,"updated":"2018-04-01T13:23:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfgx5owt000kmxgo9xo6renv","content":"<blockquote>\n<p><strong>项目地址:</strong> <a href=\"https://voice.cvno.me\" target=\"_blank\" rel=\"noopener\">Google Voice Keep</a></p>\n</blockquote>\n<h1 id=\"项目更新记录\"><a href=\"#项目更新记录\" class=\"headerlink\" title=\"项目更新记录\"></a>项目更新记录</h1><h2 id=\"2018-2-2\"><a href=\"#2018-2-2\" class=\"headerlink\" title=\"2018-2-2\"></a>2018-2-2</h2><ul>\n<li>修复不可预料的 Google Voice 限制发送信息 bug</li>\n</ul>\n<h2 id=\"2018-1-29-基本功能完成\"><a href=\"#2018-1-29-基本功能完成\" class=\"headerlink\" title=\"2018-1-29 基本功能完成\"></a>2018-1-29 基本功能完成</h2><ul>\n<li>提供为期半年的 SMS 订阅服务</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><strong>项目地址:</strong> <a href=\"https://voice.cvno.me\" target=\"_blank\" rel=\"noopener\">Google Voice Keep</a></p>\n</blockquote>\n<h1 id=\"项目更新记录\"><a href=\"#项目更新记录\" class=\"headerlink\" title=\"项目更新记录\"></a>项目更新记录</h1><h2 id=\"2018-2-2\"><a href=\"#2018-2-2\" class=\"headerlink\" title=\"2018-2-2\"></a>2018-2-2</h2><ul>\n<li>修复不可预料的 Google Voice 限制发送信息 bug</li>\n</ul>\n<h2 id=\"2018-1-29-基本功能完成\"><a href=\"#2018-1-29-基本功能完成\" class=\"headerlink\" title=\"2018-1-29 基本功能完成\"></a>2018-1-29 基本功能完成</h2><ul>\n<li>提供为期半年的 SMS 订阅服务</li>\n</ul>\n"},{"title":"hexo: ERROR Process failed: _posts/*","date":"2017-12-18T06:49:12.000Z","_content":"\n文章的格式出现错误了\n\n<!-- more -->\n\n- 错误提示\n\n```sh\n$ hexo s\nERROR Process failed: _posts/*\nError at \n.....\n```\n\n\n- 原因\n\n```\ntitle: Hexo\ndate: 2017-12-13 12:21:33\ntags:Hexo #tags冒号后面应当有个空格,其他地方也应当注意\n```\n\n- 正确格式(加上那个空格就好了)\n\n```\ntitle: Hexo\ndate: 2017-12-13 12:21:33\ntags: Hexo\n```\n\n# 参考资料\n- http://shitaibin.github.io/2015/12/13/hexo-errors/\n\n","source":"_posts/hexo-ERROR-Process-failed-posts.md","raw":"---\ntitle: 'hexo: ERROR Process failed: _posts/*'\ndate: 2017-12-18 14:49:12\ntags: hexo\n---\n\n文章的格式出现错误了\n\n<!-- more -->\n\n- 错误提示\n\n```sh\n$ hexo s\nERROR Process failed: _posts/*\nError at \n.....\n```\n\n\n- 原因\n\n```\ntitle: Hexo\ndate: 2017-12-13 12:21:33\ntags:Hexo #tags冒号后面应当有个空格,其他地方也应当注意\n```\n\n- 正确格式(加上那个空格就好了)\n\n```\ntitle: Hexo\ndate: 2017-12-13 12:21:33\ntags: Hexo\n```\n\n# 参考资料\n- http://shitaibin.github.io/2015/12/13/hexo-errors/\n\n","slug":"hexo-ERROR-Process-failed-posts","published":1,"updated":"2018-04-01T13:23:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfgx5oww000nmxgok2oncrae","content":"<p>文章的格式出现错误了</p>\n<a id=\"more\"></a>\n<ul>\n<li>错误提示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s</span><br><span class=\"line\">ERROR Process failed: _posts/*</span><br><span class=\"line\">Error at </span><br><span class=\"line\">.....</span><br></pre></td></tr></table></figure>\n<ul>\n<li>原因</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: Hexo</span><br><span class=\"line\">date: 2017-12-13 12:21:33</span><br><span class=\"line\">tags:Hexo #tags冒号后面应当有个空格,其他地方也应当注意</span><br></pre></td></tr></table></figure>\n<ul>\n<li>正确格式(加上那个空格就好了)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: Hexo</span><br><span class=\"line\">date: 2017-12-13 12:21:33</span><br><span class=\"line\">tags: Hexo</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"http://shitaibin.github.io/2015/12/13/hexo-errors/\" target=\"_blank\" rel=\"noopener\">http://shitaibin.github.io/2015/12/13/hexo-errors/</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>文章的格式出现错误了</p>","more":"<ul>\n<li>错误提示</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s</span><br><span class=\"line\">ERROR Process failed: _posts/*</span><br><span class=\"line\">Error at </span><br><span class=\"line\">.....</span><br></pre></td></tr></table></figure>\n<ul>\n<li>原因</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: Hexo</span><br><span class=\"line\">date: 2017-12-13 12:21:33</span><br><span class=\"line\">tags:Hexo #tags冒号后面应当有个空格,其他地方也应当注意</span><br></pre></td></tr></table></figure>\n<ul>\n<li>正确格式(加上那个空格就好了)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: Hexo</span><br><span class=\"line\">date: 2017-12-13 12:21:33</span><br><span class=\"line\">tags: Hexo</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"http://shitaibin.github.io/2015/12/13/hexo-errors/\" target=\"_blank\" rel=\"noopener\">http://shitaibin.github.io/2015/12/13/hexo-errors/</a></li>\n</ul>"},{"title":"linx 基础命令","date":"2017-05-15T09:01:20.000Z","keywords":null,"description":null,"_content":"\n<!-- more -->\n\n# 基础命令\nlinux 命令分为三部分：`命令本身` `选项` `参数`\n\n```sh\nlsof -i:8000  # 查看端口占用\nwho\nwhoami\ndate\ncal\nclear\nsu\npasswd\nman # 帮助\npasswd --help # 查看帮助\nls -dl /tmp # 查看目录本身的详细信息 \n!cat   # 执行此命令上一次的执行\necho 123 > /tmp/a.txt  # 覆盖写\necho 123 >> /tmp/b.txt # 追加写\ndf\nfirefox &  # 后台运行程序\necho /etc/passwd &> /dev/null # 定向到黑洞文件\ncat a.txt | sort | uniq # 去重\ncat a.txt | sort | uniq -c # 查看去了多少重\ncat /etc/passwd | cut -d: -f1,3 # 指定分隔符 ：，输出第 1，3 部分\ndu -sh /boot/   # 62M\t/root 查看文件夹大小\n# find\nfind / -type f  # 查找普通文件\nfind / -name '*.txt' # 查找以 txt 后缀的文件\nfind / -size +30M  # 找大小大于 30M 的文件\nfind / -size -30M  # 找大小小于 30M 的文件\nfind / -size +10M -size -30M # 大于 10M 小于 30M 的文件\nfind / -size +2M -type f -name \\*.txt\n# 创建一个指定类型的文件\ndd if=/dev/zero of=/a.txt bs=20M count=1\necho -e \"asdf\\nwerwer\"  # 解析换行符\n```\n\n# tar（打包）\n在 linux 系统中，文件的后缀名没有任何特殊意义\n\n```sh\ntouch a.txt b.txt c.txt\n# 打包 c->新建 f->文件名 v->打包过程\ntar cvf text.tar a.txt b.txt c.txt\n# 查看 tar 文件内容 -t\n# f-> 查看哪一个文件\ntar -tf test.tar\n# 解包 x->解 f->需要解包的文件 v->解包过程\n# 默认为当前目录\ntar xvf test.tar\n# 解压缩 -C（大写）指定解压目录\ntar xvf test.tar -C /bak    # 解压到指定目录\n\n# ------ 压缩 gzip（效率） -------\ngzip a.txt # 压缩\ngunzip a.txt.gz # 解压缩\n# 打包并压缩\ntar cvzf test1.tar.gz a.txt b.txt c.txt\n# 解压缩包\ntar xvf test1.tar.gz -C /test1\n\n# ------ 压缩 bzip2（质量，压缩率高） -------\nbzip2 a.txt\n# 打包并压缩\ntar cvjf test2.tar.bz2 a.txt b.txt c.txt\n# 解压缩包\ntar xvf test1.tar.gz -C /test2\n```\n\n## 打包文件夹\n不带目录名，只打包下面的文件\n\n```sh\n# 需要先切换到需要打包的文件夹下面\n# *->当前目录下面的所有文件\ntar czf /tmp/etc_bak.tar.gz *   # 打包\ntar xf etc_bak.tar.gz -C /etc_bak\n```\n\n硬盘满的话有两种情况\n\n- 一个文件太大占满了\n- 都是小文件，太小了（一个萝卜一个坑）\n\n# `--stdin`\n\n``` sh\necho 123 | passwd --stdin root\n# --stdin 是将 echo 显示的结果作为下一个命令的输入，root 这里指的是修改哪一个用户的密码\n# 回车后直接把用户名密码改掉了\n```\n\n# vi\nvim（vi modiy） 是 vi 的增强版本\n\n`a` 编辑模式（append模式）：当前位置后移一位开始编辑\n`i` 插入模式（insert模式）：在当前位置插入\n`o` 新建行插入\n`O` 基于上一行开始写（当前位置的后面整体后移）\n`$` 当前行的结尾\n`0` 当前行头部\n`dd` 删除行  n dd\n`D`  删除空行\n`dd p` 剪切\n`P` 当前行的上一行\n`yy p` 复制到当前行的下一行 n yy\n`u` 撤销操作\n`control + r` 恢复操作\n`G` 文件的最后一行\n`n G` 跳到指定行\n`gg` 文件的首行\n`H` 当前屏幕的头部\n`M` 当前屏幕中间\n`L` 当前屏幕的最后一行\n\n# 硬盘\n\n- fdisk (小于2T的硬盘)\n- parted (大于2T)\n\n```sh\ndf -h\nls /dev/sda\nfdisk /dev/sdb # 分区 sdb 硬盘设备\n# 格式化磁盘\nmkfs.ext3 /dev/sdb1 # 格式化主分区为ext3系统\nmkfs.ext4 /dev/sdb5 && mkfs.ext4 /dev/sdb6 # mkfs.ext4 /dev/sdb5 && mkfs.ext4 /dev/sdb6\n\nmount /dev/sdb1 /sdb1   # 挂载分区\n```\n\n# ifconfig\n\n网卡配置\n\n```sh\nifconfig\n...\nifconfig <网卡> 192.168.16.48/24  # 修改 ip\n# 修改 DNS\nvim /etc/resolv.conf    # 这个文件\nroute add default gw 192.168.1.1 netmask 255.255.255.0 # 添加默认网管\nroute -m # 查看网关\nroute del default gw 192.168.1.1 netmask 255.255.255.0 # 删除默认网管\n\n# ---- 永久修改 ----\ncd /etc/stsconfig/network-sctipts\nvim <网卡名>\n\nTYPE=Ethernet            //协议\nBOOTPROTO=static          //dhcp（动态获取）    静态ip\nIPADDR=192.168.16.57            //    IP地址\nNETMASK=255.255.255.0            //子网掩码\nGATEWAY=192.168.16.254            //网关\nDNS1=192.168.16.254            //DNS\nDEFROUTE=yes            //\nPEERDNS=yes\nPEERROUTES=yes\nIPV4_FAILURE_FATAL=no\nIPV6INIT=yes\nIPV6_AUTOCONF=yes\nIPV6_DEFROUTE=yes\nIPV6_PEERDNS=yes\nIPV6_PEERROUTES=yes\nIPV6_FAILURE_FATAL=no\nIPV6_ADDR_GEN_MODE=stable-privacy\nNAME=enp0s5\nUUID=151b7ea3-6585-49b4-8442-e25a9acfbeb6\nDEVICE=enp0s5            //设备名称\nONBOOT=yes            //开机自启动\n```\n\n# ssh\n\n```sh\n\nssh 192.168.1.123 -p 8888 # 指定端口\n\n# 上传\nscp /etc/hosts 192.168.1.123:/root\n# 下载\nscp 192.168.1.123:/root/aaa.txt /tmp/\n```\n\n# 免密码\n\n```sh\nssh-keygen  # 一路回车\nls /root/.ssh/\n# id_rsa   钥匙\n# id_rsa.pub  锁  发给别人\n# 传送到服务器\nssh-copy-id -i 192.168.1.123    # 传送完成后会自动重命名为 authorized_keys\n\n# 配置文件\nvim /etc/ssh/sshd-config\nsystemctl restart sshd\n\nnetstat -an | grep 8888 # 查看端口\n\nssh-copy-id -i id_rsa.pub 192.168.1.123 \n```\n# 计算器\n\n```sh\nyum install bc -y\necho \"scale=3;10/3\"|bc -l\n```\n\n","source":"_posts/linux-cmd.md","raw":"---\ntitle: linx 基础命令\ndate: 2017-05-15 17:01:20\ntags:\ncategories: linux\nkeywords:\ndescription:\n---\n\n<!-- more -->\n\n# 基础命令\nlinux 命令分为三部分：`命令本身` `选项` `参数`\n\n```sh\nlsof -i:8000  # 查看端口占用\nwho\nwhoami\ndate\ncal\nclear\nsu\npasswd\nman # 帮助\npasswd --help # 查看帮助\nls -dl /tmp # 查看目录本身的详细信息 \n!cat   # 执行此命令上一次的执行\necho 123 > /tmp/a.txt  # 覆盖写\necho 123 >> /tmp/b.txt # 追加写\ndf\nfirefox &  # 后台运行程序\necho /etc/passwd &> /dev/null # 定向到黑洞文件\ncat a.txt | sort | uniq # 去重\ncat a.txt | sort | uniq -c # 查看去了多少重\ncat /etc/passwd | cut -d: -f1,3 # 指定分隔符 ：，输出第 1，3 部分\ndu -sh /boot/   # 62M\t/root 查看文件夹大小\n# find\nfind / -type f  # 查找普通文件\nfind / -name '*.txt' # 查找以 txt 后缀的文件\nfind / -size +30M  # 找大小大于 30M 的文件\nfind / -size -30M  # 找大小小于 30M 的文件\nfind / -size +10M -size -30M # 大于 10M 小于 30M 的文件\nfind / -size +2M -type f -name \\*.txt\n# 创建一个指定类型的文件\ndd if=/dev/zero of=/a.txt bs=20M count=1\necho -e \"asdf\\nwerwer\"  # 解析换行符\n```\n\n# tar（打包）\n在 linux 系统中，文件的后缀名没有任何特殊意义\n\n```sh\ntouch a.txt b.txt c.txt\n# 打包 c->新建 f->文件名 v->打包过程\ntar cvf text.tar a.txt b.txt c.txt\n# 查看 tar 文件内容 -t\n# f-> 查看哪一个文件\ntar -tf test.tar\n# 解包 x->解 f->需要解包的文件 v->解包过程\n# 默认为当前目录\ntar xvf test.tar\n# 解压缩 -C（大写）指定解压目录\ntar xvf test.tar -C /bak    # 解压到指定目录\n\n# ------ 压缩 gzip（效率） -------\ngzip a.txt # 压缩\ngunzip a.txt.gz # 解压缩\n# 打包并压缩\ntar cvzf test1.tar.gz a.txt b.txt c.txt\n# 解压缩包\ntar xvf test1.tar.gz -C /test1\n\n# ------ 压缩 bzip2（质量，压缩率高） -------\nbzip2 a.txt\n# 打包并压缩\ntar cvjf test2.tar.bz2 a.txt b.txt c.txt\n# 解压缩包\ntar xvf test1.tar.gz -C /test2\n```\n\n## 打包文件夹\n不带目录名，只打包下面的文件\n\n```sh\n# 需要先切换到需要打包的文件夹下面\n# *->当前目录下面的所有文件\ntar czf /tmp/etc_bak.tar.gz *   # 打包\ntar xf etc_bak.tar.gz -C /etc_bak\n```\n\n硬盘满的话有两种情况\n\n- 一个文件太大占满了\n- 都是小文件，太小了（一个萝卜一个坑）\n\n# `--stdin`\n\n``` sh\necho 123 | passwd --stdin root\n# --stdin 是将 echo 显示的结果作为下一个命令的输入，root 这里指的是修改哪一个用户的密码\n# 回车后直接把用户名密码改掉了\n```\n\n# vi\nvim（vi modiy） 是 vi 的增强版本\n\n`a` 编辑模式（append模式）：当前位置后移一位开始编辑\n`i` 插入模式（insert模式）：在当前位置插入\n`o` 新建行插入\n`O` 基于上一行开始写（当前位置的后面整体后移）\n`$` 当前行的结尾\n`0` 当前行头部\n`dd` 删除行  n dd\n`D`  删除空行\n`dd p` 剪切\n`P` 当前行的上一行\n`yy p` 复制到当前行的下一行 n yy\n`u` 撤销操作\n`control + r` 恢复操作\n`G` 文件的最后一行\n`n G` 跳到指定行\n`gg` 文件的首行\n`H` 当前屏幕的头部\n`M` 当前屏幕中间\n`L` 当前屏幕的最后一行\n\n# 硬盘\n\n- fdisk (小于2T的硬盘)\n- parted (大于2T)\n\n```sh\ndf -h\nls /dev/sda\nfdisk /dev/sdb # 分区 sdb 硬盘设备\n# 格式化磁盘\nmkfs.ext3 /dev/sdb1 # 格式化主分区为ext3系统\nmkfs.ext4 /dev/sdb5 && mkfs.ext4 /dev/sdb6 # mkfs.ext4 /dev/sdb5 && mkfs.ext4 /dev/sdb6\n\nmount /dev/sdb1 /sdb1   # 挂载分区\n```\n\n# ifconfig\n\n网卡配置\n\n```sh\nifconfig\n...\nifconfig <网卡> 192.168.16.48/24  # 修改 ip\n# 修改 DNS\nvim /etc/resolv.conf    # 这个文件\nroute add default gw 192.168.1.1 netmask 255.255.255.0 # 添加默认网管\nroute -m # 查看网关\nroute del default gw 192.168.1.1 netmask 255.255.255.0 # 删除默认网管\n\n# ---- 永久修改 ----\ncd /etc/stsconfig/network-sctipts\nvim <网卡名>\n\nTYPE=Ethernet            //协议\nBOOTPROTO=static          //dhcp（动态获取）    静态ip\nIPADDR=192.168.16.57            //    IP地址\nNETMASK=255.255.255.0            //子网掩码\nGATEWAY=192.168.16.254            //网关\nDNS1=192.168.16.254            //DNS\nDEFROUTE=yes            //\nPEERDNS=yes\nPEERROUTES=yes\nIPV4_FAILURE_FATAL=no\nIPV6INIT=yes\nIPV6_AUTOCONF=yes\nIPV6_DEFROUTE=yes\nIPV6_PEERDNS=yes\nIPV6_PEERROUTES=yes\nIPV6_FAILURE_FATAL=no\nIPV6_ADDR_GEN_MODE=stable-privacy\nNAME=enp0s5\nUUID=151b7ea3-6585-49b4-8442-e25a9acfbeb6\nDEVICE=enp0s5            //设备名称\nONBOOT=yes            //开机自启动\n```\n\n# ssh\n\n```sh\n\nssh 192.168.1.123 -p 8888 # 指定端口\n\n# 上传\nscp /etc/hosts 192.168.1.123:/root\n# 下载\nscp 192.168.1.123:/root/aaa.txt /tmp/\n```\n\n# 免密码\n\n```sh\nssh-keygen  # 一路回车\nls /root/.ssh/\n# id_rsa   钥匙\n# id_rsa.pub  锁  发给别人\n# 传送到服务器\nssh-copy-id -i 192.168.1.123    # 传送完成后会自动重命名为 authorized_keys\n\n# 配置文件\nvim /etc/ssh/sshd-config\nsystemctl restart sshd\n\nnetstat -an | grep 8888 # 查看端口\n\nssh-copy-id -i id_rsa.pub 192.168.1.123 \n```\n# 计算器\n\n```sh\nyum install bc -y\necho \"scale=3;10/3\"|bc -l\n```\n\n","slug":"linux-cmd","published":1,"updated":"2018-04-01T13:23:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfgx5owy000omxgo3f7jnjkp","content":"<a id=\"more\"></a>\n<h1 id=\"基础命令\"><a href=\"#基础命令\" class=\"headerlink\" title=\"基础命令\"></a>基础命令</h1><p>linux 命令分为三部分：<code>命令本身</code> <code>选项</code> <code>参数</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:8000  <span class=\"comment\"># 查看端口占用</span></span><br><span class=\"line\">who</span><br><span class=\"line\">whoami</span><br><span class=\"line\">date</span><br><span class=\"line\">cal</span><br><span class=\"line\">clear</span><br><span class=\"line\">su</span><br><span class=\"line\">passwd</span><br><span class=\"line\">man <span class=\"comment\"># 帮助</span></span><br><span class=\"line\">passwd --<span class=\"built_in\">help</span> <span class=\"comment\"># 查看帮助</span></span><br><span class=\"line\">ls -dl /tmp <span class=\"comment\"># 查看目录本身的详细信息 </span></span><br><span class=\"line\">!cat   <span class=\"comment\"># 执行此命令上一次的执行</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 123 &gt; /tmp/a.txt  <span class=\"comment\"># 覆盖写</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 123 &gt;&gt; /tmp/b.txt <span class=\"comment\"># 追加写</span></span><br><span class=\"line\">df</span><br><span class=\"line\">firefox &amp;  <span class=\"comment\"># 后台运行程序</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> /etc/passwd &amp;&gt; /dev/null <span class=\"comment\"># 定向到黑洞文件</span></span><br><span class=\"line\">cat a.txt | sort | uniq <span class=\"comment\"># 去重</span></span><br><span class=\"line\">cat a.txt | sort | uniq -c <span class=\"comment\"># 查看去了多少重</span></span><br><span class=\"line\">cat /etc/passwd | cut -d: -f1,3 <span class=\"comment\"># 指定分隔符 ：，输出第 1，3 部分</span></span><br><span class=\"line\">du -sh /boot/   <span class=\"comment\"># 62M\t/root 查看文件夹大小</span></span><br><span class=\"line\"><span class=\"comment\"># find</span></span><br><span class=\"line\">find / -<span class=\"built_in\">type</span> f  <span class=\"comment\"># 查找普通文件</span></span><br><span class=\"line\">find / -name <span class=\"string\">'*.txt'</span> <span class=\"comment\"># 查找以 txt 后缀的文件</span></span><br><span class=\"line\">find / -size +30M  <span class=\"comment\"># 找大小大于 30M 的文件</span></span><br><span class=\"line\">find / -size -30M  <span class=\"comment\"># 找大小小于 30M 的文件</span></span><br><span class=\"line\">find / -size +10M -size -30M <span class=\"comment\"># 大于 10M 小于 30M 的文件</span></span><br><span class=\"line\">find / -size +2M -<span class=\"built_in\">type</span> f -name \\*.txt</span><br><span class=\"line\"><span class=\"comment\"># 创建一个指定类型的文件</span></span><br><span class=\"line\">dd <span class=\"keyword\">if</span>=/dev/zero of=/a.txt bs=20M count=1</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"asdf\\nwerwer\"</span>  <span class=\"comment\"># 解析换行符</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"tar（打包）\"><a href=\"#tar（打包）\" class=\"headerlink\" title=\"tar（打包）\"></a>tar（打包）</h1><p>在 linux 系统中，文件的后缀名没有任何特殊意义</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch a.txt b.txt c.txt</span><br><span class=\"line\"><span class=\"comment\"># 打包 c-&gt;新建 f-&gt;文件名 v-&gt;打包过程</span></span><br><span class=\"line\">tar cvf text.tar a.txt b.txt c.txt</span><br><span class=\"line\"><span class=\"comment\"># 查看 tar 文件内容 -t</span></span><br><span class=\"line\"><span class=\"comment\"># f-&gt; 查看哪一个文件</span></span><br><span class=\"line\">tar -tf test.tar</span><br><span class=\"line\"><span class=\"comment\"># 解包 x-&gt;解 f-&gt;需要解包的文件 v-&gt;解包过程</span></span><br><span class=\"line\"><span class=\"comment\"># 默认为当前目录</span></span><br><span class=\"line\">tar xvf test.tar</span><br><span class=\"line\"><span class=\"comment\"># 解压缩 -C（大写）指定解压目录</span></span><br><span class=\"line\">tar xvf test.tar -C /bak    <span class=\"comment\"># 解压到指定目录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ------ 压缩 gzip（效率） -------</span></span><br><span class=\"line\">gzip a.txt <span class=\"comment\"># 压缩</span></span><br><span class=\"line\">gunzip a.txt.gz <span class=\"comment\"># 解压缩</span></span><br><span class=\"line\"><span class=\"comment\"># 打包并压缩</span></span><br><span class=\"line\">tar cvzf test1.tar.gz a.txt b.txt c.txt</span><br><span class=\"line\"><span class=\"comment\"># 解压缩包</span></span><br><span class=\"line\">tar xvf test1.tar.gz -C /test1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ------ 压缩 bzip2（质量，压缩率高） -------</span></span><br><span class=\"line\">bzip2 a.txt</span><br><span class=\"line\"><span class=\"comment\"># 打包并压缩</span></span><br><span class=\"line\">tar cvjf test2.tar.bz2 a.txt b.txt c.txt</span><br><span class=\"line\"><span class=\"comment\"># 解压缩包</span></span><br><span class=\"line\">tar xvf test1.tar.gz -C /test2</span><br></pre></td></tr></table></figure>\n<h2 id=\"打包文件夹\"><a href=\"#打包文件夹\" class=\"headerlink\" title=\"打包文件夹\"></a>打包文件夹</h2><p>不带目录名，只打包下面的文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 需要先切换到需要打包的文件夹下面</span></span><br><span class=\"line\"><span class=\"comment\"># *-&gt;当前目录下面的所有文件</span></span><br><span class=\"line\">tar czf /tmp/etc_bak.tar.gz *   <span class=\"comment\"># 打包</span></span><br><span class=\"line\">tar xf etc_bak.tar.gz -C /etc_bak</span><br></pre></td></tr></table></figure>\n<p>硬盘满的话有两种情况</p>\n<ul>\n<li>一个文件太大占满了</li>\n<li>都是小文件，太小了（一个萝卜一个坑）</li>\n</ul>\n<h1 id=\"stdin\"><a href=\"#stdin\" class=\"headerlink\" title=\"--stdin\"></a><code>--stdin</code></h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> 123 | passwd --stdin root</span><br><span class=\"line\"><span class=\"comment\"># --stdin 是将 echo 显示的结果作为下一个命令的输入，root 这里指的是修改哪一个用户的密码</span></span><br><span class=\"line\"><span class=\"comment\"># 回车后直接把用户名密码改掉了</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"vi\"><a href=\"#vi\" class=\"headerlink\" title=\"vi\"></a>vi</h1><p>vim（vi modiy） 是 vi 的增强版本</p>\n<p><code>a</code> 编辑模式（append模式）：当前位置后移一位开始编辑<br><code>i</code> 插入模式（insert模式）：在当前位置插入<br><code>o</code> 新建行插入<br><code>O</code> 基于上一行开始写（当前位置的后面整体后移）<br><code>$</code> 当前行的结尾<br><code>0</code> 当前行头部<br><code>dd</code> 删除行  n dd<br><code>D</code>  删除空行<br><code>dd p</code> 剪切<br><code>P</code> 当前行的上一行<br><code>yy p</code> 复制到当前行的下一行 n yy<br><code>u</code> 撤销操作<br><code>control + r</code> 恢复操作<br><code>G</code> 文件的最后一行<br><code>n G</code> 跳到指定行<br><code>gg</code> 文件的首行<br><code>H</code> 当前屏幕的头部<br><code>M</code> 当前屏幕中间<br><code>L</code> 当前屏幕的最后一行</p>\n<h1 id=\"硬盘\"><a href=\"#硬盘\" class=\"headerlink\" title=\"硬盘\"></a>硬盘</h1><ul>\n<li>fdisk (小于2T的硬盘)</li>\n<li>parted (大于2T)</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df -h</span><br><span class=\"line\">ls /dev/sda</span><br><span class=\"line\">fdisk /dev/sdb <span class=\"comment\"># 分区 sdb 硬盘设备</span></span><br><span class=\"line\"><span class=\"comment\"># 格式化磁盘</span></span><br><span class=\"line\">mkfs.ext3 /dev/sdb1 <span class=\"comment\"># 格式化主分区为ext3系统</span></span><br><span class=\"line\">mkfs.ext4 /dev/sdb5 &amp;&amp; mkfs.ext4 /dev/sdb6 <span class=\"comment\"># mkfs.ext4 /dev/sdb5 &amp;&amp; mkfs.ext4 /dev/sdb6</span></span><br><span class=\"line\"></span><br><span class=\"line\">mount /dev/sdb1 /sdb1   <span class=\"comment\"># 挂载分区</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"ifconfig\"><a href=\"#ifconfig\" class=\"headerlink\" title=\"ifconfig\"></a>ifconfig</h1><p>网卡配置</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig</span><br><span class=\"line\">...</span><br><span class=\"line\">ifconfig &lt;网卡&gt; 192.168.16.48/24  <span class=\"comment\"># 修改 ip</span></span><br><span class=\"line\"><span class=\"comment\"># 修改 DNS</span></span><br><span class=\"line\">vim /etc/resolv.conf    <span class=\"comment\"># 这个文件</span></span><br><span class=\"line\">route add default gw 192.168.1.1 netmask 255.255.255.0 <span class=\"comment\"># 添加默认网管</span></span><br><span class=\"line\">route -m <span class=\"comment\"># 查看网关</span></span><br><span class=\"line\">route del default gw 192.168.1.1 netmask 255.255.255.0 <span class=\"comment\"># 删除默认网管</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---- 永久修改 ----</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /etc/stsconfig/network-sctipts</span><br><span class=\"line\">vim &lt;网卡名&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">TYPE=Ethernet            //协议</span><br><span class=\"line\">BOOTPROTO=static          //dhcp（动态获取）    静态ip</span><br><span class=\"line\">IPADDR=192.168.16.57            //    IP地址</span><br><span class=\"line\">NETMASK=255.255.255.0            //子网掩码</span><br><span class=\"line\">GATEWAY=192.168.16.254            //网关</span><br><span class=\"line\">DNS1=192.168.16.254            //DNS</span><br><span class=\"line\">DEFROUTE=yes            //</span><br><span class=\"line\">PEERDNS=yes</span><br><span class=\"line\">PEERROUTES=yes</span><br><span class=\"line\">IPV4_FAILURE_FATAL=no</span><br><span class=\"line\">IPV6INIT=yes</span><br><span class=\"line\">IPV6_AUTOCONF=yes</span><br><span class=\"line\">IPV6_DEFROUTE=yes</span><br><span class=\"line\">IPV6_PEERDNS=yes</span><br><span class=\"line\">IPV6_PEERROUTES=yes</span><br><span class=\"line\">IPV6_FAILURE_FATAL=no</span><br><span class=\"line\">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class=\"line\">NAME=enp0s5</span><br><span class=\"line\">UUID=151b7ea3-6585-49b4-8442-e25a9acfbeb6</span><br><span class=\"line\">DEVICE=enp0s5            //设备名称</span><br><span class=\"line\">ONBOOT=yes            //开机自启动</span><br></pre></td></tr></table></figure>\n<h1 id=\"ssh\"><a href=\"#ssh\" class=\"headerlink\" title=\"ssh\"></a>ssh</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ssh 192.168.1.123 -p 8888 <span class=\"comment\"># 指定端口</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上传</span></span><br><span class=\"line\">scp /etc/hosts 192.168.1.123:/root</span><br><span class=\"line\"><span class=\"comment\"># 下载</span></span><br><span class=\"line\">scp 192.168.1.123:/root/aaa.txt /tmp/</span><br></pre></td></tr></table></figure>\n<h1 id=\"免密码\"><a href=\"#免密码\" class=\"headerlink\" title=\"免密码\"></a>免密码</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen  <span class=\"comment\"># 一路回车</span></span><br><span class=\"line\">ls /root/.ssh/</span><br><span class=\"line\"><span class=\"comment\"># id_rsa   钥匙</span></span><br><span class=\"line\"><span class=\"comment\"># id_rsa.pub  锁  发给别人</span></span><br><span class=\"line\"><span class=\"comment\"># 传送到服务器</span></span><br><span class=\"line\">ssh-copy-id -i 192.168.1.123    <span class=\"comment\"># 传送完成后会自动重命名为 authorized_keys</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置文件</span></span><br><span class=\"line\">vim /etc/ssh/sshd-config</span><br><span class=\"line\">systemctl restart sshd</span><br><span class=\"line\"></span><br><span class=\"line\">netstat -an | grep 8888 <span class=\"comment\"># 查看端口</span></span><br><span class=\"line\"></span><br><span class=\"line\">ssh-copy-id -i id_rsa.pub 192.168.1.123</span><br></pre></td></tr></table></figure>\n<h1 id=\"计算器\"><a href=\"#计算器\" class=\"headerlink\" title=\"计算器\"></a>计算器</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install bc -y</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"scale=3;10/3\"</span>|bc -l</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基础命令\"><a href=\"#基础命令\" class=\"headerlink\" title=\"基础命令\"></a>基础命令</h1><p>linux 命令分为三部分：<code>命令本身</code> <code>选项</code> <code>参数</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:8000  <span class=\"comment\"># 查看端口占用</span></span><br><span class=\"line\">who</span><br><span class=\"line\">whoami</span><br><span class=\"line\">date</span><br><span class=\"line\">cal</span><br><span class=\"line\">clear</span><br><span class=\"line\">su</span><br><span class=\"line\">passwd</span><br><span class=\"line\">man <span class=\"comment\"># 帮助</span></span><br><span class=\"line\">passwd --<span class=\"built_in\">help</span> <span class=\"comment\"># 查看帮助</span></span><br><span class=\"line\">ls -dl /tmp <span class=\"comment\"># 查看目录本身的详细信息 </span></span><br><span class=\"line\">!cat   <span class=\"comment\"># 执行此命令上一次的执行</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 123 &gt; /tmp/a.txt  <span class=\"comment\"># 覆盖写</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 123 &gt;&gt; /tmp/b.txt <span class=\"comment\"># 追加写</span></span><br><span class=\"line\">df</span><br><span class=\"line\">firefox &amp;  <span class=\"comment\"># 后台运行程序</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> /etc/passwd &amp;&gt; /dev/null <span class=\"comment\"># 定向到黑洞文件</span></span><br><span class=\"line\">cat a.txt | sort | uniq <span class=\"comment\"># 去重</span></span><br><span class=\"line\">cat a.txt | sort | uniq -c <span class=\"comment\"># 查看去了多少重</span></span><br><span class=\"line\">cat /etc/passwd | cut -d: -f1,3 <span class=\"comment\"># 指定分隔符 ：，输出第 1，3 部分</span></span><br><span class=\"line\">du -sh /boot/   <span class=\"comment\"># 62M\t/root 查看文件夹大小</span></span><br><span class=\"line\"><span class=\"comment\"># find</span></span><br><span class=\"line\">find / -<span class=\"built_in\">type</span> f  <span class=\"comment\"># 查找普通文件</span></span><br><span class=\"line\">find / -name <span class=\"string\">'*.txt'</span> <span class=\"comment\"># 查找以 txt 后缀的文件</span></span><br><span class=\"line\">find / -size +30M  <span class=\"comment\"># 找大小大于 30M 的文件</span></span><br><span class=\"line\">find / -size -30M  <span class=\"comment\"># 找大小小于 30M 的文件</span></span><br><span class=\"line\">find / -size +10M -size -30M <span class=\"comment\"># 大于 10M 小于 30M 的文件</span></span><br><span class=\"line\">find / -size +2M -<span class=\"built_in\">type</span> f -name \\*.txt</span><br><span class=\"line\"><span class=\"comment\"># 创建一个指定类型的文件</span></span><br><span class=\"line\">dd <span class=\"keyword\">if</span>=/dev/zero of=/a.txt bs=20M count=1</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"asdf\\nwerwer\"</span>  <span class=\"comment\"># 解析换行符</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"tar（打包）\"><a href=\"#tar（打包）\" class=\"headerlink\" title=\"tar（打包）\"></a>tar（打包）</h1><p>在 linux 系统中，文件的后缀名没有任何特殊意义</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch a.txt b.txt c.txt</span><br><span class=\"line\"><span class=\"comment\"># 打包 c-&gt;新建 f-&gt;文件名 v-&gt;打包过程</span></span><br><span class=\"line\">tar cvf text.tar a.txt b.txt c.txt</span><br><span class=\"line\"><span class=\"comment\"># 查看 tar 文件内容 -t</span></span><br><span class=\"line\"><span class=\"comment\"># f-&gt; 查看哪一个文件</span></span><br><span class=\"line\">tar -tf test.tar</span><br><span class=\"line\"><span class=\"comment\"># 解包 x-&gt;解 f-&gt;需要解包的文件 v-&gt;解包过程</span></span><br><span class=\"line\"><span class=\"comment\"># 默认为当前目录</span></span><br><span class=\"line\">tar xvf test.tar</span><br><span class=\"line\"><span class=\"comment\"># 解压缩 -C（大写）指定解压目录</span></span><br><span class=\"line\">tar xvf test.tar -C /bak    <span class=\"comment\"># 解压到指定目录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ------ 压缩 gzip（效率） -------</span></span><br><span class=\"line\">gzip a.txt <span class=\"comment\"># 压缩</span></span><br><span class=\"line\">gunzip a.txt.gz <span class=\"comment\"># 解压缩</span></span><br><span class=\"line\"><span class=\"comment\"># 打包并压缩</span></span><br><span class=\"line\">tar cvzf test1.tar.gz a.txt b.txt c.txt</span><br><span class=\"line\"><span class=\"comment\"># 解压缩包</span></span><br><span class=\"line\">tar xvf test1.tar.gz -C /test1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ------ 压缩 bzip2（质量，压缩率高） -------</span></span><br><span class=\"line\">bzip2 a.txt</span><br><span class=\"line\"><span class=\"comment\"># 打包并压缩</span></span><br><span class=\"line\">tar cvjf test2.tar.bz2 a.txt b.txt c.txt</span><br><span class=\"line\"><span class=\"comment\"># 解压缩包</span></span><br><span class=\"line\">tar xvf test1.tar.gz -C /test2</span><br></pre></td></tr></table></figure>\n<h2 id=\"打包文件夹\"><a href=\"#打包文件夹\" class=\"headerlink\" title=\"打包文件夹\"></a>打包文件夹</h2><p>不带目录名，只打包下面的文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 需要先切换到需要打包的文件夹下面</span></span><br><span class=\"line\"><span class=\"comment\"># *-&gt;当前目录下面的所有文件</span></span><br><span class=\"line\">tar czf /tmp/etc_bak.tar.gz *   <span class=\"comment\"># 打包</span></span><br><span class=\"line\">tar xf etc_bak.tar.gz -C /etc_bak</span><br></pre></td></tr></table></figure>\n<p>硬盘满的话有两种情况</p>\n<ul>\n<li>一个文件太大占满了</li>\n<li>都是小文件，太小了（一个萝卜一个坑）</li>\n</ul>\n<h1 id=\"stdin\"><a href=\"#stdin\" class=\"headerlink\" title=\"--stdin\"></a><code>--stdin</code></h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> 123 | passwd --stdin root</span><br><span class=\"line\"><span class=\"comment\"># --stdin 是将 echo 显示的结果作为下一个命令的输入，root 这里指的是修改哪一个用户的密码</span></span><br><span class=\"line\"><span class=\"comment\"># 回车后直接把用户名密码改掉了</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"vi\"><a href=\"#vi\" class=\"headerlink\" title=\"vi\"></a>vi</h1><p>vim（vi modiy） 是 vi 的增强版本</p>\n<p><code>a</code> 编辑模式（append模式）：当前位置后移一位开始编辑<br><code>i</code> 插入模式（insert模式）：在当前位置插入<br><code>o</code> 新建行插入<br><code>O</code> 基于上一行开始写（当前位置的后面整体后移）<br><code>$</code> 当前行的结尾<br><code>0</code> 当前行头部<br><code>dd</code> 删除行  n dd<br><code>D</code>  删除空行<br><code>dd p</code> 剪切<br><code>P</code> 当前行的上一行<br><code>yy p</code> 复制到当前行的下一行 n yy<br><code>u</code> 撤销操作<br><code>control + r</code> 恢复操作<br><code>G</code> 文件的最后一行<br><code>n G</code> 跳到指定行<br><code>gg</code> 文件的首行<br><code>H</code> 当前屏幕的头部<br><code>M</code> 当前屏幕中间<br><code>L</code> 当前屏幕的最后一行</p>\n<h1 id=\"硬盘\"><a href=\"#硬盘\" class=\"headerlink\" title=\"硬盘\"></a>硬盘</h1><ul>\n<li>fdisk (小于2T的硬盘)</li>\n<li>parted (大于2T)</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df -h</span><br><span class=\"line\">ls /dev/sda</span><br><span class=\"line\">fdisk /dev/sdb <span class=\"comment\"># 分区 sdb 硬盘设备</span></span><br><span class=\"line\"><span class=\"comment\"># 格式化磁盘</span></span><br><span class=\"line\">mkfs.ext3 /dev/sdb1 <span class=\"comment\"># 格式化主分区为ext3系统</span></span><br><span class=\"line\">mkfs.ext4 /dev/sdb5 &amp;&amp; mkfs.ext4 /dev/sdb6 <span class=\"comment\"># mkfs.ext4 /dev/sdb5 &amp;&amp; mkfs.ext4 /dev/sdb6</span></span><br><span class=\"line\"></span><br><span class=\"line\">mount /dev/sdb1 /sdb1   <span class=\"comment\"># 挂载分区</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"ifconfig\"><a href=\"#ifconfig\" class=\"headerlink\" title=\"ifconfig\"></a>ifconfig</h1><p>网卡配置</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig</span><br><span class=\"line\">...</span><br><span class=\"line\">ifconfig &lt;网卡&gt; 192.168.16.48/24  <span class=\"comment\"># 修改 ip</span></span><br><span class=\"line\"><span class=\"comment\"># 修改 DNS</span></span><br><span class=\"line\">vim /etc/resolv.conf    <span class=\"comment\"># 这个文件</span></span><br><span class=\"line\">route add default gw 192.168.1.1 netmask 255.255.255.0 <span class=\"comment\"># 添加默认网管</span></span><br><span class=\"line\">route -m <span class=\"comment\"># 查看网关</span></span><br><span class=\"line\">route del default gw 192.168.1.1 netmask 255.255.255.0 <span class=\"comment\"># 删除默认网管</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---- 永久修改 ----</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /etc/stsconfig/network-sctipts</span><br><span class=\"line\">vim &lt;网卡名&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">TYPE=Ethernet            //协议</span><br><span class=\"line\">BOOTPROTO=static          //dhcp（动态获取）    静态ip</span><br><span class=\"line\">IPADDR=192.168.16.57            //    IP地址</span><br><span class=\"line\">NETMASK=255.255.255.0            //子网掩码</span><br><span class=\"line\">GATEWAY=192.168.16.254            //网关</span><br><span class=\"line\">DNS1=192.168.16.254            //DNS</span><br><span class=\"line\">DEFROUTE=yes            //</span><br><span class=\"line\">PEERDNS=yes</span><br><span class=\"line\">PEERROUTES=yes</span><br><span class=\"line\">IPV4_FAILURE_FATAL=no</span><br><span class=\"line\">IPV6INIT=yes</span><br><span class=\"line\">IPV6_AUTOCONF=yes</span><br><span class=\"line\">IPV6_DEFROUTE=yes</span><br><span class=\"line\">IPV6_PEERDNS=yes</span><br><span class=\"line\">IPV6_PEERROUTES=yes</span><br><span class=\"line\">IPV6_FAILURE_FATAL=no</span><br><span class=\"line\">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class=\"line\">NAME=enp0s5</span><br><span class=\"line\">UUID=151b7ea3-6585-49b4-8442-e25a9acfbeb6</span><br><span class=\"line\">DEVICE=enp0s5            //设备名称</span><br><span class=\"line\">ONBOOT=yes            //开机自启动</span><br></pre></td></tr></table></figure>\n<h1 id=\"ssh\"><a href=\"#ssh\" class=\"headerlink\" title=\"ssh\"></a>ssh</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ssh 192.168.1.123 -p 8888 <span class=\"comment\"># 指定端口</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上传</span></span><br><span class=\"line\">scp /etc/hosts 192.168.1.123:/root</span><br><span class=\"line\"><span class=\"comment\"># 下载</span></span><br><span class=\"line\">scp 192.168.1.123:/root/aaa.txt /tmp/</span><br></pre></td></tr></table></figure>\n<h1 id=\"免密码\"><a href=\"#免密码\" class=\"headerlink\" title=\"免密码\"></a>免密码</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen  <span class=\"comment\"># 一路回车</span></span><br><span class=\"line\">ls /root/.ssh/</span><br><span class=\"line\"><span class=\"comment\"># id_rsa   钥匙</span></span><br><span class=\"line\"><span class=\"comment\"># id_rsa.pub  锁  发给别人</span></span><br><span class=\"line\"><span class=\"comment\"># 传送到服务器</span></span><br><span class=\"line\">ssh-copy-id -i 192.168.1.123    <span class=\"comment\"># 传送完成后会自动重命名为 authorized_keys</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置文件</span></span><br><span class=\"line\">vim /etc/ssh/sshd-config</span><br><span class=\"line\">systemctl restart sshd</span><br><span class=\"line\"></span><br><span class=\"line\">netstat -an | grep 8888 <span class=\"comment\"># 查看端口</span></span><br><span class=\"line\"></span><br><span class=\"line\">ssh-copy-id -i id_rsa.pub 192.168.1.123</span><br></pre></td></tr></table></figure>\n<h1 id=\"计算器\"><a href=\"#计算器\" class=\"headerlink\" title=\"计算器\"></a>计算器</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install bc -y</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"scale=3;10/3\"</span>|bc -l</span><br></pre></td></tr></table></figure>"},{"title":"linux 目录和文件","date":"2017-05-10T09:21:39.000Z","keywords":null,"description":null,"_content":"\nlinux 系统中，一切皆文件\n\nwinsows 中目录结构是`多根`模式 `C:` `D:` `E:`\n而 linux 中 `/` 代表的就是`根`\n\n---\n\n<!-- more -->\n\n# linux 目录\n\n![](https://i.imgur.com/27572It.jpg)\n\n参考：http://www.runoob.com/linux/linux-system-contents.html\n\n\n\n`media` `mnt` 挂载目录\n\n\n## 目录\n\n```sh\ncd . # 切换目录\n# 增（创建目录）\nmkdir /a\nmkdir /a/b\nmkdir -p /b/c   # 递归创建目录\n# 查\nls -d /a/e  # 查看目录\nls  # 查看当前文件夹所有内容（不包含隐藏文件）\n# 改\nmv /a/f /a/l\n# 删\nrm -r /a/d  # 递归着删下面的东西（包含提示）\nrm -rf /a/b # 递归删（没有提示）尽量避免使用\n```\n\n# 文件\n\n```sh\n# 增（创建文件）\ntouch a.txt\n# 改\nmv a.txt b.txt\n# 查\ncat b.txt # 查看文件内容\n# 删\nrm b.txt    # -rf 无提示\n\nless /tmp/aaa.txt   # 翻页查看\nmore /tmp/aaa.txt   # 也是翻页\n\nhead /tmp/aaa.txt   # 默认查看前 10 行内容\nhead -n 1 /aaa.txt # 指定查看的行数\n\ntail -n 1 /a.txt    # 查看最后 1 行内容\ntail -f /a.txt    # 动态查看最后添加的内容;如果是用编辑器打开的文件，那么保存后，这个命令看到的是这个文件的所有内容，打开文件这个操作是把文件所有的内容加载到内存，保存的时候是覆盖写进去。\n\necho asdf > /a.txt  # 覆盖到文件末尾\necho asdf >> /a.txt   # 追加文件内容\n\n\n```\n\n## 分页查看\n\n```sh\nls --help | less # 分页查看 前面命令的结果\n```\n\n\n","source":"_posts/linux-dir.md","raw":"---\ntitle: linux 目录和文件\ndate: 2017-05-10 17:21:39\ntags:\ncategories: linux\nkeywords:\ndescription:\n---\n\nlinux 系统中，一切皆文件\n\nwinsows 中目录结构是`多根`模式 `C:` `D:` `E:`\n而 linux 中 `/` 代表的就是`根`\n\n---\n\n<!-- more -->\n\n# linux 目录\n\n![](https://i.imgur.com/27572It.jpg)\n\n参考：http://www.runoob.com/linux/linux-system-contents.html\n\n\n\n`media` `mnt` 挂载目录\n\n\n## 目录\n\n```sh\ncd . # 切换目录\n# 增（创建目录）\nmkdir /a\nmkdir /a/b\nmkdir -p /b/c   # 递归创建目录\n# 查\nls -d /a/e  # 查看目录\nls  # 查看当前文件夹所有内容（不包含隐藏文件）\n# 改\nmv /a/f /a/l\n# 删\nrm -r /a/d  # 递归着删下面的东西（包含提示）\nrm -rf /a/b # 递归删（没有提示）尽量避免使用\n```\n\n# 文件\n\n```sh\n# 增（创建文件）\ntouch a.txt\n# 改\nmv a.txt b.txt\n# 查\ncat b.txt # 查看文件内容\n# 删\nrm b.txt    # -rf 无提示\n\nless /tmp/aaa.txt   # 翻页查看\nmore /tmp/aaa.txt   # 也是翻页\n\nhead /tmp/aaa.txt   # 默认查看前 10 行内容\nhead -n 1 /aaa.txt # 指定查看的行数\n\ntail -n 1 /a.txt    # 查看最后 1 行内容\ntail -f /a.txt    # 动态查看最后添加的内容;如果是用编辑器打开的文件，那么保存后，这个命令看到的是这个文件的所有内容，打开文件这个操作是把文件所有的内容加载到内存，保存的时候是覆盖写进去。\n\necho asdf > /a.txt  # 覆盖到文件末尾\necho asdf >> /a.txt   # 追加文件内容\n\n\n```\n\n## 分页查看\n\n```sh\nls --help | less # 分页查看 前面命令的结果\n```\n\n\n","slug":"linux-dir","published":1,"updated":"2018-04-01T13:23:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfgx5ox0000smxgo87ty1kf8","content":"<p>linux 系统中，一切皆文件</p>\n<p>winsows 中目录结构是<code>多根</code>模式 <code>C:</code> <code>D:</code> <code>E:</code><br>而 linux 中 <code>/</code> 代表的就是<code>根</code></p>\n<hr>\n<a id=\"more\"></a>\n<h1 id=\"linux-目录\"><a href=\"#linux-目录\" class=\"headerlink\" title=\"linux 目录\"></a>linux 目录</h1><p><img src=\"https://i.imgur.com/27572It.jpg\" alt=\"\"></p>\n<p>参考：<a href=\"http://www.runoob.com/linux/linux-system-contents.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/linux/linux-system-contents.html</a></p>\n<p><code>media</code> <code>mnt</code> 挂载目录</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> . <span class=\"comment\"># 切换目录</span></span><br><span class=\"line\"><span class=\"comment\"># 增（创建目录）</span></span><br><span class=\"line\">mkdir /a</span><br><span class=\"line\">mkdir /a/b</span><br><span class=\"line\">mkdir -p /b/c   <span class=\"comment\"># 递归创建目录</span></span><br><span class=\"line\"><span class=\"comment\"># 查</span></span><br><span class=\"line\">ls -d /a/e  <span class=\"comment\"># 查看目录</span></span><br><span class=\"line\">ls  <span class=\"comment\"># 查看当前文件夹所有内容（不包含隐藏文件）</span></span><br><span class=\"line\"><span class=\"comment\"># 改</span></span><br><span class=\"line\">mv /a/f /a/l</span><br><span class=\"line\"><span class=\"comment\"># 删</span></span><br><span class=\"line\">rm -r /a/d  <span class=\"comment\"># 递归着删下面的东西（包含提示）</span></span><br><span class=\"line\">rm -rf /a/b <span class=\"comment\"># 递归删（没有提示）尽量避免使用</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 增（创建文件）</span></span><br><span class=\"line\">touch a.txt</span><br><span class=\"line\"><span class=\"comment\"># 改</span></span><br><span class=\"line\">mv a.txt b.txt</span><br><span class=\"line\"><span class=\"comment\"># 查</span></span><br><span class=\"line\">cat b.txt <span class=\"comment\"># 查看文件内容</span></span><br><span class=\"line\"><span class=\"comment\"># 删</span></span><br><span class=\"line\">rm b.txt    <span class=\"comment\"># -rf 无提示</span></span><br><span class=\"line\"></span><br><span class=\"line\">less /tmp/aaa.txt   <span class=\"comment\"># 翻页查看</span></span><br><span class=\"line\">more /tmp/aaa.txt   <span class=\"comment\"># 也是翻页</span></span><br><span class=\"line\"></span><br><span class=\"line\">head /tmp/aaa.txt   <span class=\"comment\"># 默认查看前 10 行内容</span></span><br><span class=\"line\">head -n 1 /aaa.txt <span class=\"comment\"># 指定查看的行数</span></span><br><span class=\"line\"></span><br><span class=\"line\">tail -n 1 /a.txt    <span class=\"comment\"># 查看最后 1 行内容</span></span><br><span class=\"line\">tail -f /a.txt    <span class=\"comment\"># 动态查看最后添加的内容;如果是用编辑器打开的文件，那么保存后，这个命令看到的是这个文件的所有内容，打开文件这个操作是把文件所有的内容加载到内存，保存的时候是覆盖写进去。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> asdf &gt; /a.txt  <span class=\"comment\"># 覆盖到文件末尾</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> asdf &gt;&gt; /a.txt   <span class=\"comment\"># 追加文件内容</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"分页查看\"><a href=\"#分页查看\" class=\"headerlink\" title=\"分页查看\"></a>分页查看</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls --<span class=\"built_in\">help</span> | less <span class=\"comment\"># 分页查看 前面命令的结果</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>linux 系统中，一切皆文件</p>\n<p>winsows 中目录结构是<code>多根</code>模式 <code>C:</code> <code>D:</code> <code>E:</code><br>而 linux 中 <code>/</code> 代表的就是<code>根</code></p>\n<hr>","more":"<h1 id=\"linux-目录\"><a href=\"#linux-目录\" class=\"headerlink\" title=\"linux 目录\"></a>linux 目录</h1><p><img src=\"https://i.imgur.com/27572It.jpg\" alt=\"\"></p>\n<p>参考：<a href=\"http://www.runoob.com/linux/linux-system-contents.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/linux/linux-system-contents.html</a></p>\n<p><code>media</code> <code>mnt</code> 挂载目录</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> . <span class=\"comment\"># 切换目录</span></span><br><span class=\"line\"><span class=\"comment\"># 增（创建目录）</span></span><br><span class=\"line\">mkdir /a</span><br><span class=\"line\">mkdir /a/b</span><br><span class=\"line\">mkdir -p /b/c   <span class=\"comment\"># 递归创建目录</span></span><br><span class=\"line\"><span class=\"comment\"># 查</span></span><br><span class=\"line\">ls -d /a/e  <span class=\"comment\"># 查看目录</span></span><br><span class=\"line\">ls  <span class=\"comment\"># 查看当前文件夹所有内容（不包含隐藏文件）</span></span><br><span class=\"line\"><span class=\"comment\"># 改</span></span><br><span class=\"line\">mv /a/f /a/l</span><br><span class=\"line\"><span class=\"comment\"># 删</span></span><br><span class=\"line\">rm -r /a/d  <span class=\"comment\"># 递归着删下面的东西（包含提示）</span></span><br><span class=\"line\">rm -rf /a/b <span class=\"comment\"># 递归删（没有提示）尽量避免使用</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 增（创建文件）</span></span><br><span class=\"line\">touch a.txt</span><br><span class=\"line\"><span class=\"comment\"># 改</span></span><br><span class=\"line\">mv a.txt b.txt</span><br><span class=\"line\"><span class=\"comment\"># 查</span></span><br><span class=\"line\">cat b.txt <span class=\"comment\"># 查看文件内容</span></span><br><span class=\"line\"><span class=\"comment\"># 删</span></span><br><span class=\"line\">rm b.txt    <span class=\"comment\"># -rf 无提示</span></span><br><span class=\"line\"></span><br><span class=\"line\">less /tmp/aaa.txt   <span class=\"comment\"># 翻页查看</span></span><br><span class=\"line\">more /tmp/aaa.txt   <span class=\"comment\"># 也是翻页</span></span><br><span class=\"line\"></span><br><span class=\"line\">head /tmp/aaa.txt   <span class=\"comment\"># 默认查看前 10 行内容</span></span><br><span class=\"line\">head -n 1 /aaa.txt <span class=\"comment\"># 指定查看的行数</span></span><br><span class=\"line\"></span><br><span class=\"line\">tail -n 1 /a.txt    <span class=\"comment\"># 查看最后 1 行内容</span></span><br><span class=\"line\">tail -f /a.txt    <span class=\"comment\"># 动态查看最后添加的内容;如果是用编辑器打开的文件，那么保存后，这个命令看到的是这个文件的所有内容，打开文件这个操作是把文件所有的内容加载到内存，保存的时候是覆盖写进去。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> asdf &gt; /a.txt  <span class=\"comment\"># 覆盖到文件末尾</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> asdf &gt;&gt; /a.txt   <span class=\"comment\"># 追加文件内容</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"分页查看\"><a href=\"#分页查看\" class=\"headerlink\" title=\"分页查看\"></a>分页查看</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls --<span class=\"built_in\">help</span> | less <span class=\"comment\"># 分页查看 前面命令的结果</span></span><br></pre></td></tr></table></figure>"},{"title":"linux 用户","date":"2017-05-10T11:54:04.000Z","keywords":null,"description":null,"_content":"\nlinux 下添加一个用户，就相当于公司招聘一个人，linux 每健一个用户，就会以这个用户名新建一个组。\n\n<!-- more -->\n\n# 用户\n\n```sh\nid <user> # 查看用户信息\nuid=1000(aaa) gid=1000(aaa) groups=1000(aaa)\n# 用户 id，组 id（初始组），\n# /etc/passwd  用户信息文件\naaa:x:1000:1000::/home/aaa:/bin/bash\n# x 用户密码占位符，代表这个用户需要密码登录，如果没有这个 x ，直接就可以登录系统\n# 1000 uid\n# 1000 gid\n# 两个冒号空的那一段是用户描述信息\n# /home/aaa   指定用户的家目录\n# /bin/bash  用户的登录 shell；可登录的用户\n# /sbin/nologin 不可登录的用户\n# /etc/shadow  记录用户密码文件\n```\n\n```sh\nmkdir /test_user\n# 添加用户\nuseradd -u 1200 -g root -d /test_user -c 'test user' -s /bin/bash test_user\n# -u 指定用户 uid\n# -g 指定主组\n# -d 指定用户家目录\n# -c 用户描述信息\n# -s 指定用户登录 shell\n# -G 指定附加组\n# 如果新添加的用户指定 root 为默认组，那么在 group 中 root 中就不会有新添加的这个用户\n\n# 修改用户\nusermod -G root test_user\n```\n\n\n# 组\n\n```sh\n# 添加组\ngroupadd group1\n\n# 删除组\ngroupdel group1\n\n# 修改组\ngroupmod -g 2014 group1 # 修改组 id\ngroupmod -n group2 group1 # 修改组名\n\n# /etc/gshadow  记录组密码文件\n# /etc/group  记录用户组文件\ngpasswd aaa # 设置组密码\n#编辑文件每一行最后面的字符就是组内的成员，可以通过修改文件来改变用户的组或添加组\n--- 修改文件来添加组员\nroot:x:0:aaa\n~ id aaa\nuid=1000(aaa) gid=1000(aaa) groups=1000(aaa),0(root)\n---\ngpasswd -r aaa  # 清除组密码\n```\n\n# 加深理解\n\n\nlinux 里面一切皆文件，在创建用户的时候同样是修改文件。所以，也可以直接修改文件来创建用户。\n\n1. `vim /etc/passwd` 追加一行所添加的用户\n2. `mkdir /home/rose` 创建家目录\n3. `vim /etc/shadow` 追加一行，同样的格式\n4. `vim /etc/group` 追加一行，和uid需要一致，名字可以不一样\n5. `vim /etc/gshadow` 追加一行\n6. `touch /var/spool/rose` 创建用户系统邮箱文件\n7. `cp -r /etc/skel/.[!.]* /home/rose` 拷贝指定目录下所有以`.`开头的文件，`-r`递归着拷贝\n8. `chown -R rose.rose /home/rose` 修改为自己的权限\n9. `chown rose.mail /var/spool/mail/rose` 把邮箱文件权限改为自己的\n\nselinux 这个软件如果开启了，开启后所创建的文件权限后面都会加上`.`\n\n```sh\nvim /etc/sysconfig/selinux\n# SELINUX = enforcing 改为 disabled  关掉，然后重启才会生效\n\n```\n\n","source":"_posts/linux-user.md","raw":"---\ntitle: linux 用户\ndate: 2017-05-10 19:54:04\ntags:\ncategories: linux\nkeywords:\ndescription:\n---\n\nlinux 下添加一个用户，就相当于公司招聘一个人，linux 每健一个用户，就会以这个用户名新建一个组。\n\n<!-- more -->\n\n# 用户\n\n```sh\nid <user> # 查看用户信息\nuid=1000(aaa) gid=1000(aaa) groups=1000(aaa)\n# 用户 id，组 id（初始组），\n# /etc/passwd  用户信息文件\naaa:x:1000:1000::/home/aaa:/bin/bash\n# x 用户密码占位符，代表这个用户需要密码登录，如果没有这个 x ，直接就可以登录系统\n# 1000 uid\n# 1000 gid\n# 两个冒号空的那一段是用户描述信息\n# /home/aaa   指定用户的家目录\n# /bin/bash  用户的登录 shell；可登录的用户\n# /sbin/nologin 不可登录的用户\n# /etc/shadow  记录用户密码文件\n```\n\n```sh\nmkdir /test_user\n# 添加用户\nuseradd -u 1200 -g root -d /test_user -c 'test user' -s /bin/bash test_user\n# -u 指定用户 uid\n# -g 指定主组\n# -d 指定用户家目录\n# -c 用户描述信息\n# -s 指定用户登录 shell\n# -G 指定附加组\n# 如果新添加的用户指定 root 为默认组，那么在 group 中 root 中就不会有新添加的这个用户\n\n# 修改用户\nusermod -G root test_user\n```\n\n\n# 组\n\n```sh\n# 添加组\ngroupadd group1\n\n# 删除组\ngroupdel group1\n\n# 修改组\ngroupmod -g 2014 group1 # 修改组 id\ngroupmod -n group2 group1 # 修改组名\n\n# /etc/gshadow  记录组密码文件\n# /etc/group  记录用户组文件\ngpasswd aaa # 设置组密码\n#编辑文件每一行最后面的字符就是组内的成员，可以通过修改文件来改变用户的组或添加组\n--- 修改文件来添加组员\nroot:x:0:aaa\n~ id aaa\nuid=1000(aaa) gid=1000(aaa) groups=1000(aaa),0(root)\n---\ngpasswd -r aaa  # 清除组密码\n```\n\n# 加深理解\n\n\nlinux 里面一切皆文件，在创建用户的时候同样是修改文件。所以，也可以直接修改文件来创建用户。\n\n1. `vim /etc/passwd` 追加一行所添加的用户\n2. `mkdir /home/rose` 创建家目录\n3. `vim /etc/shadow` 追加一行，同样的格式\n4. `vim /etc/group` 追加一行，和uid需要一致，名字可以不一样\n5. `vim /etc/gshadow` 追加一行\n6. `touch /var/spool/rose` 创建用户系统邮箱文件\n7. `cp -r /etc/skel/.[!.]* /home/rose` 拷贝指定目录下所有以`.`开头的文件，`-r`递归着拷贝\n8. `chown -R rose.rose /home/rose` 修改为自己的权限\n9. `chown rose.mail /var/spool/mail/rose` 把邮箱文件权限改为自己的\n\nselinux 这个软件如果开启了，开启后所创建的文件权限后面都会加上`.`\n\n```sh\nvim /etc/sysconfig/selinux\n# SELINUX = enforcing 改为 disabled  关掉，然后重启才会生效\n\n```\n\n","slug":"linux-user","published":1,"updated":"2018-04-01T13:23:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfgx5ox1000vmxgo7da8rmo5","content":"<p>linux 下添加一个用户，就相当于公司招聘一个人，linux 每健一个用户，就会以这个用户名新建一个组。</p>\n<a id=\"more\"></a>\n<h1 id=\"用户\"><a href=\"#用户\" class=\"headerlink\" title=\"用户\"></a>用户</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id &lt;user&gt; <span class=\"comment\"># 查看用户信息</span></span><br><span class=\"line\">uid=1000(aaa) gid=1000(aaa) groups=1000(aaa)</span><br><span class=\"line\"><span class=\"comment\"># 用户 id，组 id（初始组），</span></span><br><span class=\"line\"><span class=\"comment\"># /etc/passwd  用户信息文件</span></span><br><span class=\"line\">aaa:x:1000:1000::/home/aaa:/bin/bash</span><br><span class=\"line\"><span class=\"comment\"># x 用户密码占位符，代表这个用户需要密码登录，如果没有这个 x ，直接就可以登录系统</span></span><br><span class=\"line\"><span class=\"comment\"># 1000 uid</span></span><br><span class=\"line\"><span class=\"comment\"># 1000 gid</span></span><br><span class=\"line\"><span class=\"comment\"># 两个冒号空的那一段是用户描述信息</span></span><br><span class=\"line\"><span class=\"comment\"># /home/aaa   指定用户的家目录</span></span><br><span class=\"line\"><span class=\"comment\"># /bin/bash  用户的登录 shell；可登录的用户</span></span><br><span class=\"line\"><span class=\"comment\"># /sbin/nologin 不可登录的用户</span></span><br><span class=\"line\"><span class=\"comment\"># /etc/shadow  记录用户密码文件</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /test_user</span><br><span class=\"line\"><span class=\"comment\"># 添加用户</span></span><br><span class=\"line\">useradd -u 1200 -g root -d /test_user -c <span class=\"string\">'test user'</span> -s /bin/bash test_user</span><br><span class=\"line\"><span class=\"comment\"># -u 指定用户 uid</span></span><br><span class=\"line\"><span class=\"comment\"># -g 指定主组</span></span><br><span class=\"line\"><span class=\"comment\"># -d 指定用户家目录</span></span><br><span class=\"line\"><span class=\"comment\"># -c 用户描述信息</span></span><br><span class=\"line\"><span class=\"comment\"># -s 指定用户登录 shell</span></span><br><span class=\"line\"><span class=\"comment\"># -G 指定附加组</span></span><br><span class=\"line\"><span class=\"comment\"># 如果新添加的用户指定 root 为默认组，那么在 group 中 root 中就不会有新添加的这个用户</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改用户</span></span><br><span class=\"line\">usermod -G root test_user</span><br></pre></td></tr></table></figure>\n<h1 id=\"组\"><a href=\"#组\" class=\"headerlink\" title=\"组\"></a>组</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加组</span></span><br><span class=\"line\">groupadd group1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除组</span></span><br><span class=\"line\">groupdel group1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改组</span></span><br><span class=\"line\">groupmod -g 2014 group1 <span class=\"comment\"># 修改组 id</span></span><br><span class=\"line\">groupmod -n group2 group1 <span class=\"comment\"># 修改组名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># /etc/gshadow  记录组密码文件</span></span><br><span class=\"line\"><span class=\"comment\"># /etc/group  记录用户组文件</span></span><br><span class=\"line\">gpasswd aaa <span class=\"comment\"># 设置组密码</span></span><br><span class=\"line\"><span class=\"comment\">#编辑文件每一行最后面的字符就是组内的成员，可以通过修改文件来改变用户的组或添加组</span></span><br><span class=\"line\">--- 修改文件来添加组员</span><br><span class=\"line\">root:x:0:aaa</span><br><span class=\"line\">~ id aaa</span><br><span class=\"line\">uid=1000(aaa) gid=1000(aaa) groups=1000(aaa),0(root)</span><br><span class=\"line\">---</span><br><span class=\"line\">gpasswd -r aaa  <span class=\"comment\"># 清除组密码</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"加深理解\"><a href=\"#加深理解\" class=\"headerlink\" title=\"加深理解\"></a>加深理解</h1><p>linux 里面一切皆文件，在创建用户的时候同样是修改文件。所以，也可以直接修改文件来创建用户。</p>\n<ol>\n<li><code>vim /etc/passwd</code> 追加一行所添加的用户</li>\n<li><code>mkdir /home/rose</code> 创建家目录</li>\n<li><code>vim /etc/shadow</code> 追加一行，同样的格式</li>\n<li><code>vim /etc/group</code> 追加一行，和uid需要一致，名字可以不一样</li>\n<li><code>vim /etc/gshadow</code> 追加一行</li>\n<li><code>touch /var/spool/rose</code> 创建用户系统邮箱文件</li>\n<li><code>cp -r /etc/skel/.[!.]* /home/rose</code> 拷贝指定目录下所有以<code>.</code>开头的文件，<code>-r</code>递归着拷贝</li>\n<li><code>chown -R rose.rose /home/rose</code> 修改为自己的权限</li>\n<li><code>chown rose.mail /var/spool/mail/rose</code> 把邮箱文件权限改为自己的</li>\n</ol>\n<p>selinux 这个软件如果开启了，开启后所创建的文件权限后面都会加上<code>.</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/sysconfig/selinux</span><br><span class=\"line\"><span class=\"comment\"># SELINUX = enforcing 改为 disabled  关掉，然后重启才会生效</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>linux 下添加一个用户，就相当于公司招聘一个人，linux 每健一个用户，就会以这个用户名新建一个组。</p>","more":"<h1 id=\"用户\"><a href=\"#用户\" class=\"headerlink\" title=\"用户\"></a>用户</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id &lt;user&gt; <span class=\"comment\"># 查看用户信息</span></span><br><span class=\"line\">uid=1000(aaa) gid=1000(aaa) groups=1000(aaa)</span><br><span class=\"line\"><span class=\"comment\"># 用户 id，组 id（初始组），</span></span><br><span class=\"line\"><span class=\"comment\"># /etc/passwd  用户信息文件</span></span><br><span class=\"line\">aaa:x:1000:1000::/home/aaa:/bin/bash</span><br><span class=\"line\"><span class=\"comment\"># x 用户密码占位符，代表这个用户需要密码登录，如果没有这个 x ，直接就可以登录系统</span></span><br><span class=\"line\"><span class=\"comment\"># 1000 uid</span></span><br><span class=\"line\"><span class=\"comment\"># 1000 gid</span></span><br><span class=\"line\"><span class=\"comment\"># 两个冒号空的那一段是用户描述信息</span></span><br><span class=\"line\"><span class=\"comment\"># /home/aaa   指定用户的家目录</span></span><br><span class=\"line\"><span class=\"comment\"># /bin/bash  用户的登录 shell；可登录的用户</span></span><br><span class=\"line\"><span class=\"comment\"># /sbin/nologin 不可登录的用户</span></span><br><span class=\"line\"><span class=\"comment\"># /etc/shadow  记录用户密码文件</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /test_user</span><br><span class=\"line\"><span class=\"comment\"># 添加用户</span></span><br><span class=\"line\">useradd -u 1200 -g root -d /test_user -c <span class=\"string\">'test user'</span> -s /bin/bash test_user</span><br><span class=\"line\"><span class=\"comment\"># -u 指定用户 uid</span></span><br><span class=\"line\"><span class=\"comment\"># -g 指定主组</span></span><br><span class=\"line\"><span class=\"comment\"># -d 指定用户家目录</span></span><br><span class=\"line\"><span class=\"comment\"># -c 用户描述信息</span></span><br><span class=\"line\"><span class=\"comment\"># -s 指定用户登录 shell</span></span><br><span class=\"line\"><span class=\"comment\"># -G 指定附加组</span></span><br><span class=\"line\"><span class=\"comment\"># 如果新添加的用户指定 root 为默认组，那么在 group 中 root 中就不会有新添加的这个用户</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改用户</span></span><br><span class=\"line\">usermod -G root test_user</span><br></pre></td></tr></table></figure>\n<h1 id=\"组\"><a href=\"#组\" class=\"headerlink\" title=\"组\"></a>组</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加组</span></span><br><span class=\"line\">groupadd group1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除组</span></span><br><span class=\"line\">groupdel group1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改组</span></span><br><span class=\"line\">groupmod -g 2014 group1 <span class=\"comment\"># 修改组 id</span></span><br><span class=\"line\">groupmod -n group2 group1 <span class=\"comment\"># 修改组名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># /etc/gshadow  记录组密码文件</span></span><br><span class=\"line\"><span class=\"comment\"># /etc/group  记录用户组文件</span></span><br><span class=\"line\">gpasswd aaa <span class=\"comment\"># 设置组密码</span></span><br><span class=\"line\"><span class=\"comment\">#编辑文件每一行最后面的字符就是组内的成员，可以通过修改文件来改变用户的组或添加组</span></span><br><span class=\"line\">--- 修改文件来添加组员</span><br><span class=\"line\">root:x:0:aaa</span><br><span class=\"line\">~ id aaa</span><br><span class=\"line\">uid=1000(aaa) gid=1000(aaa) groups=1000(aaa),0(root)</span><br><span class=\"line\">---</span><br><span class=\"line\">gpasswd -r aaa  <span class=\"comment\"># 清除组密码</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"加深理解\"><a href=\"#加深理解\" class=\"headerlink\" title=\"加深理解\"></a>加深理解</h1><p>linux 里面一切皆文件，在创建用户的时候同样是修改文件。所以，也可以直接修改文件来创建用户。</p>\n<ol>\n<li><code>vim /etc/passwd</code> 追加一行所添加的用户</li>\n<li><code>mkdir /home/rose</code> 创建家目录</li>\n<li><code>vim /etc/shadow</code> 追加一行，同样的格式</li>\n<li><code>vim /etc/group</code> 追加一行，和uid需要一致，名字可以不一样</li>\n<li><code>vim /etc/gshadow</code> 追加一行</li>\n<li><code>touch /var/spool/rose</code> 创建用户系统邮箱文件</li>\n<li><code>cp -r /etc/skel/.[!.]* /home/rose</code> 拷贝指定目录下所有以<code>.</code>开头的文件，<code>-r</code>递归着拷贝</li>\n<li><code>chown -R rose.rose /home/rose</code> 修改为自己的权限</li>\n<li><code>chown rose.mail /var/spool/mail/rose</code> 把邮箱文件权限改为自己的</li>\n</ol>\n<p>selinux 这个软件如果开启了，开启后所创建的文件权限后面都会加上<code>.</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/sysconfig/selinux</span><br><span class=\"line\"><span class=\"comment\"># SELINUX = enforcing 改为 disabled  关掉，然后重启才会生效</span></span><br></pre></td></tr></table></figure>"},{"title":"linux 进程管理","date":"2017-05-20T15:37:36.000Z","keywords":null,"description":null,"_content":"\n<!-- more -->\n\n```sh\nless | ps aux\nkill -9 <进程ID>\npkill -9 <firefox>\n# 工作号\njobs\nkill -9 %1  # 结束某个工作号\n```\n\n`pstree` 查看进程树\n\n`pgrep` 只获取 PID\n\n","source":"_posts/linux-process.md","raw":"---\ntitle: linux 进程管理\ndate: 2017-05-20 23:37:36\ntags:\ncategories: linux\nkeywords:\ndescription:\n---\n\n<!-- more -->\n\n```sh\nless | ps aux\nkill -9 <进程ID>\npkill -9 <firefox>\n# 工作号\njobs\nkill -9 %1  # 结束某个工作号\n```\n\n`pstree` 查看进程树\n\n`pgrep` 只获取 PID\n\n","slug":"linux-process","published":1,"updated":"2018-04-01T13:23:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfgx5ox3000zmxgo9a8nhekw","content":"<a id=\"more\"></a>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">less | ps aux</span><br><span class=\"line\"><span class=\"built_in\">kill</span> -9 &lt;进程ID&gt;</span><br><span class=\"line\">pkill -9 &lt;firefox&gt;</span><br><span class=\"line\"><span class=\"comment\"># 工作号</span></span><br><span class=\"line\"><span class=\"built_in\">jobs</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -9 %1  <span class=\"comment\"># 结束某个工作号</span></span><br></pre></td></tr></table></figure>\n<p><code>pstree</code> 查看进程树</p>\n<p><code>pgrep</code> 只获取 PID</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">less | ps aux</span><br><span class=\"line\"><span class=\"built_in\">kill</span> -9 &lt;进程ID&gt;</span><br><span class=\"line\">pkill -9 &lt;firefox&gt;</span><br><span class=\"line\"><span class=\"comment\"># 工作号</span></span><br><span class=\"line\"><span class=\"built_in\">jobs</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -9 %1  <span class=\"comment\"># 结束某个工作号</span></span><br></pre></td></tr></table></figure>\n<p><code>pstree</code> 查看进程树</p>\n<p><code>pgrep</code> 只获取 PID</p>"},{"title":"设计模式","date":"2018-01-03T08:18:23.000Z","keywords":null,"description":"设计模式就是设计的套路","_content":"# 什么是设计模式\nChristopher Alexander:“每一个模式描述了一个在我们周围不断重复发生的问题，以及该问题的解决方案的核心。这样你就能一次又一次地使用该方案而不必做重复劳动。”\n\n每一个设计模式系统地命名、解释和评价了面向对象系统中一个重要的和重复出现的设计。\n\nGoF（Gang of Four）\n\n设计模式四个基本要素：模式名称、问题、解决方案、效果\n\n面向对象的三大特性: \n\n- 封装：把数据和函数包装在类里 类的边界限制了一些外界的访问\n- 继承：复用\n- 多态：多态语言\n\n```python\n# 封装\nclass A:\n    def __init__(self, x):\n        self.__test = x # 私有变量\n\n    def gettest(self):\n        return self.__test\n\n    def settest(self, x):\n        self.__test = x\n\n# 继承：复用\nclass B(A):\n    def __init__(self):\n        pass\n\n    # override 重写 覆写\n    def settest(self):\n        self.__test = x + 1\n\n# 多态 python 是一种多态语言\n# 一个函数的多种表现\n\n# 重载 python 不支持\ndef test(x, y):\n    return x+y\n\ndef test(x, y, z):\n    return x+y+z\n\ntest(2,3)\ntest(2,3,4)\n```\n\n## 接口\n一种特殊的类（抽象类），声明了若干方法，要求继承该接口的类必须实现这些方法。目的就是对外保持一致\n\n**作用：**限制继承接口的类的方法的名称及调用方式；隐藏了类的内部实现。\n\n接口就是一种抽象的基类（父类），限制继承它的类必须实现接口中定义的某些方法\n\n其实就是限制程序员的东西, 不能乱写, 按照定的规范去写\n\n[示例](https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-intergace-py)\n\n```python\n# 接口的两种写法\n# 1.\nclass A:\n    def test(self):\n        raise NotImplementedError # 限制  子类必须实现\n\n\nclass B(A):\n    def test(self):\n        print('B.test')\n# 2. 抽象类不能实例化        \nfrom abs import bastractmethod,ABCMeta  \n\nclass A(metaclass=ABCMeta):    # 抽象类\n    @abstractmethod \n    def test(self):    # 抽象方法   必须在子类实现\n        raise NotImplementedError # 限制  子类必须实现\n\nclass B(A):\n    pass\n\n\nclass C(A):\n    def test(self):\n        print('B.test')\n\na = B() # 不能实例化\nb = C() # 可以实例化\n```\n\n# 设计模式六大原则\n\n## 开闭原则\n一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。即软件实体应尽量在不修改原有代码的情况下进行扩展。\n## 里氏（Liskov）替换原则\n所有引用基类（父类）的地方必须能透明地使用其子类的对象。功能保持一致\n## 依赖倒置原则\n高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。换言之，**要针对接口（抽象）编程，而不是针对实现（实例）编程。**\n## 接口隔离原则\n使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口。（多继承）[示例](https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-0x02-py)\n## 迪米特法则\n一个软件实体应当尽可能少地与其他实体发生相互作用。**解耦**\n\n*五大原则没有这个迪米特法则*\n## 单一职责原则\n不要存在多于一个导致类变更的原因。通俗的说，即一个类只负责一项职责。 一个类（class）只干一件事\n\n\n- 合成复用原则\n\n尽量使用合成／聚合的方式，而不是继承。[示例](https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-0x03-py)\n\n`合成` `复用` `继承` 的使用分情况而定\n\n# 设计模式\n## 创建型模式\n### 工厂方法模式\n定义一个用于创建对象的接口（工厂接口），让子类决定实例化哪一个产品类。\n**角色：**\n\n- 抽象工厂角色（Creator）\n- 具体工厂角色（Concrete Creator）\n- 抽象产品角色（Product）\n- 具体产品角色（Concrete Product）\n\n工厂方法模式相比简单工厂模式将每个具体产品都对应了一个具体工厂。\n\n[示例](https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-factory_method-py)\n\n![工厂方法模式](https://i.imgur.com/pgobtQV.jpg)\n\n\n\n**适用场景：**\n\n- 需要生产多种、大量复杂对象的时候\n- 需要降低耦合度的时候\n- 当系统中的产品种类需要经常扩展的时候\n\n**优点：**\n\n- 每个具体产品都对应一个具体工厂类，不需要修改工厂类代码\n- 隐藏了对象创建的实现细节\n\n**缺点：**\n\n- 每增加一个具体产品类，就必须增加一个相应的具体工厂类\n\n#### 简单工厂模式\n不直接向客户端暴露对象创建的实现细节，而是通过一个工厂类来负责创建产品类的实例。\n**角色：**\n\n- 工厂角色（Creator）\n- 抽象产品角色（Product）\n- 具体产品角色（Concrete Product）\n\n**优点：**\n\n- 隐藏了对象创建的实现细节\n- 客户端不需要修改代码\n\n**缺点：**\n违反了单一职责原则，将创建逻辑集中到一个工厂类里\n当添加新产品时，需要修改工厂类代码，违反了开闭原则\n\n[示例](https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-factory-py)\n\n### 单例模式\n比如: 数据库连接\n\n好的单列模式会写一个基类（[示例](https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-singleton-py)）\n\n单例（Singleton）: 保证一个类只有一个实例，并提供一个访问它的全局访问点。\n\n适用场景:\n\n- 当类只能有一个实例而且客户可以从一个众所周知的访问点访问它时\n\n优点:\n\n- 对唯一实例的受控访问\n- 单例相当于全局变量，但防止了命名空间被污染\n\n与单例模式功能相似的概念：全局变量、静态变量（方法）\n\n```python\nclass A:\n    test = 0\n    \nA.test = 1\n\na = A()\nprint(a.test)\n# a.test = 1 # 对象变量的修改不会影响到类的静态变量\n\nb = A()\nprint(b.test)\n```\n\n### 抽象工厂模式\n定义一个工厂类接口，让工厂子类来创建一系列相关或相互依赖的对象。\n**例：**生产一部手机，需要`手机壳`、`CPU`、`操作系统`三类对象进行组装，其中每类对象都有不同的种类。对每个具体工厂，分别生产一部手机所需要的三个对象。\n\n**角色：**\n\n[示例](https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-abstract_factory-py)\n\n- 抽象工厂角色（Creator）\n- 具体工厂角色（Concrete Creator）\n- 抽象产品角色（Product）\n- 具体产品角色（Concrete Product）\n- 客户端（Client)\n\n相比工厂方法模式，抽象工厂模式中的每个具体工厂都生产一套产品。\n\n![抽象工厂模式](https://i.imgur.com/fW3OyP8.jpg)\n\n适用场景：\n\n- 系统要独立于产品的创建与组合时\n- 强调一系列相关的产品对象的设计以便进行联合使用时\n- 提供一个产品类库，想隐藏产品的具体实现时\n\n优点：\n\n- 将客户端与类的具体实现相分离\n- 每个工厂创建了一个完整的产品系列，使得易于交换产品系列\n- 有利于产品的一致性（即产品之间的约束关系）\n\n缺点：\n\n- 难以支持新种类的（抽象）产品\n\n### 建造者模式\n将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。\n\n**角色：**\n\n- 抽象建造者（Builder）\n- 具体建造者（Concrete Builder）\n- 指挥者（Director）\n- 产品（Product）\n\n建造者模式与抽象工厂模式相似，也用来创建复杂对象。主要区别是建造者模式着重一步步构造一个复杂对象，而抽象工厂模式着重于多个系列的产品对象。\n\n![建造者模式](https://i.imgur.com/z8IFFM0.jpg)\n\n[示例](https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-builder-py)\n\n适用场景：\n\n- 当创建复杂对象的算法（Director）应该独立于该对象的组成部分（Builder）时\n- 当构造过程允许被构造的对象有不同的表示时（不同Builder）。\n\n优点：\n\n- 隐藏了一个产品的内部结构和装配过程\n- 将构造代码与表示代码分开\n- 可以对构造过程进行更精细的控制\n\n### 小结\n\n![小结](https://i.imgur.com/Drh1aHu.jpg)\n\n使用 Abstract Factory（抽象工厂）、~~Prototype（原型模式）~~ 或 Builder（建造者） 的设计甚至比使用 Factory Method（工厂方法） 的那些设计更灵活，但它们也更加复杂。通常，设计以使用 Factory Method（简单工厂也可以） 开始，并且当设计者发现需要更大的灵活性时，设计便会向其他创建型模式演化。当你在设计标准之间进行权衡的时候，了解多个模式可以给你提供更多的选择余地。\n\n**也就是说，不用一开始就选好模式，先从简单的模式开始，如果需要频繁的改代码，就用工厂方法，等等…… 一步一步递进**\n\n\n依赖于继承的创建型模式：工厂方法模式\n依赖于组合的创建性模式：抽象工厂模式、创建者模式\n\n## 结构型模式\n### 适配器模式\n\n将一个类的接口转换成客户希望的另一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。\n角色：\n\n- 目标接口（Target）\n- 待适配的类（Adaptee）\n- 适配器（Adapter）(套壳)\n\n两种实现方式：\n\n- 类适配器：使用多继承\n- 对象适配器：使用组合\n\n[示例](https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-singleton-py)\n\n![适配器模式](https://i.imgur.com/JOPSOGt.jpg)\n\n**适用场景：**\n想使用一个已经存在的类，而它的接口不符合你的要求\n（对象适配器）想使用一些已经存在的子类，但不可能对每一个都进行子类化以匹配它们的接口。对象适配器可以适配它的父类接口。\n\n![](https://i.imgur.com/59PiTXw.jpg)\n\n类适配器和对象适配器有不同的权衡。\n\n**类适配器**\n\n- 用一个具体的 Adapter 类对 Adaptee 和 Target 进行匹配。结果是当我们想要匹配一个类以及所有它的子类时，类 Adapter 将不能胜任工作。\n- 使得 Adapter 可以重定义 Adaptee 的部分行为，因为 Adapter 是 Adaptee 的一个子类。\n- 仅仅引入（继承）了一个对象，并不需要额外的指针以间接得到 adaptee。\n\n**对象适配器则**\n\n- 允许一个 Adapter 与多个 Adaptee-即 Adaptee 本身以及它的所有子类（如果有子类的话）一同时工作。Adapter 也可以一次给所有的 Adaptee 添加功能。\n- 使得重定义 Adaptee 的行为比较困难。这就需要生成 Adaptee 的子类并且使得 Adapter 引用这个子类而不是引用 Adaptee 本身。\n\n### 组合模式\n将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。\n\n二叉树的结构\n**角色：**\n\n- 抽象组件（Component）\n- 叶子组件（Leaf）\n- 复合组件（Composite）\n- 客户端（Client）\n\n[示例](https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-composite-py)\n\n![组合模式](https://i.imgur.com/PFRWJ87.jpg)\n\n**适用场景：**\n\n- 表示对象的“部分-整体”层次结构（特别是结构是递归的）\n- 希望用户忽略组合对象与单个对象的不同，用户统一地使用组合结构中的所有对象\n\n优点：\n\n- 定义了包含基本对象和组合对象的类层次结构\n- 简化客户端代码，即客户端可以一致地使用组合对象和单个对象\n- 更容易增加新类型的组件\n\n缺点：\n\n- 很难限制组合中的组件\n\n### 代理模式\n\n为其他对象提供一种代理以控制对这个对象的访问。\n**角色：**\n\n- 抽象实体（Subject）\n- 实体（RealSubject）\n- 代理（Proxy）\n\n[示例](https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-daili-py)\n\n**适用场景：**\n\n- 远程代理：为远程的对象提供代理\n- 虚代理：根据需要创建很大的对象\n- 保护代理：控制对原始对象的访问，用于对象有不同访问权限时\n\n**优点：**\n\n- 远程代理：可以隐藏对象位于远程地址空间的事实\n- 虚代理：可以进行优化，例如根据要求创建对象\n- 保护代理：允许在访问一个对象时有一些附加的内务处理\n\n![代理模式](https://i.imgur.com/TCdmacp.jpg)\n\n## 行为型模式\n\n### 责任链模式\n使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。\n\n**角色：**\n\n- 抽象处理者（Handler）\n- 具体处理者（ConcreteHandler）\n- 客户端（Client）\n\n[示例](https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-chain_of_responsibility-py)\n\n**例：**\n请假部门批准：leader -> 部门经理 -> 总经理\nJavascript事件浮升机制\n\n![责任链模式](https://i.imgur.com/o9AR9Wq.jpg)\n\n**适用场景：**\n\n- 有多个对象可以处理一个请求，哪个对象处理由运行时决定\n- 在不明确接收者的情况下，向多个对象中的一个提交一个请求\n\n**优点：**\n\n- 降低耦合度：一个对象无需知道是其他哪一个对象处理其请求\n\n**缺点：**\n\n- 请求不保证被接收：链的末端没有处理或链配置错误\n\n### 迭代器模式\n提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示\n\n实现方法：`__iter__`、`__next__`\n\n[示例](https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-iterator-py)\n\n适用于封装数据结构,这种结构类似与列表,或树,封装数据类型,不让外人知道是怎么存的\n\n### 观察者模式\n\n定义对象间的一种一对多的依赖关系,当一个对象的状态发生改变时, 所有依赖于它的对象都得到通知并被自动更新。观察者模式又称“发布-订阅”模式\n\n**角色：**\n\n- 抽象主题（Subject）\n- 具体主题（ConcreteSubject）——发布者\n- 抽象观察者（Observer）\n- 具体观察者（ConcreteObserver）——订阅者\n\n[示例](https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-iterator-py)\n\n![观察者模式](https://i.imgur.com/P23pGAX.jpg)\n\n**适用场景：**\n\n- 当一个抽象模型有两方面，其中一个方面依赖于另一个方面。将这两者封装在独立对象中以使它们可以各自独立地改变和复用。\n- 当对一个对象的改变需要同时改变其它对象，而不知道具体有多少对象有待改变。\n- 当一个对象必须通知其它对象，而它又不能假定其它对象是谁。换言之，你不希望这些对象是紧密耦合的。\n\n**优点：**\n\n- 目标和观察者之间的耦合最小\n- 支持广播通信\n\n**缺点：**\n\n- 多个观察者之间互不知道对方存在，因此一个观察者对主题的修改可能造成错误的更新。\n\n### 策略模式\n\n定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。\n\n**角色：**\n\n- 抽象策略（Strategy）\n- 具体策略（ConcreteStrategy）\n- 上下文（Context）\n\n[示例](https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-strategy-py)\n\n**适用场景：**\n\n- 许多相关的类仅仅是行为有异\n- 需要使用一个算法的不同变体\n- 算法使用了客户端无需知道的数据\n- 一个类中的多种行为以多个条件语句的形式存在，可以将这些行为封装如不同的策略类中。\n\n![策略模式](https://i.imgur.com/T3L7jr1.jpg)\n\n**优点：**\n\n- 定义了一系列可重用的算法和行为\n- 消除了一些条件语句\n- 可以提供相同行为的不同实现\n\n**缺点：**\n\n- 客户必须了解不同的策略\n- 策略与上下文之间的通信开销\n- 增加了对象的数目\n\n### 模板方法模式\n定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。\n\n**角色：**\n\n- 抽象类（AbstractClass）：定义抽象的原子操作（钩子操作）；实现一个模板方法作为算法的骨架。\n- 具体类（ConcreteClass）：实现原子操作\n\n[示例](https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-template_method-py)\n\n![模板方法模式](https://i.imgur.com/GX4zMoi.jpg)\n\n**适用场景：**\n\n- 一次性实现一个算法的不变的部分\n- 各个子类中的公共行为应该被提取出来并集中到一个公共父类中以避免代码重复\n- 控制子类扩展\n\n# 总结\n\n*设计模式可互相嵌套, 如: 策略模式的算法写成单例模式比较好; *\n\n- 创建型模式都是对象怎么创建\n\n- 结构型模式是怎么把类组织在一起\n\n    1. 适配器模式类写坏了, 和其他类不适配\n    2. 组合模式是几个类怎么表现一样, 叶子节点和复合节点怎么表现一样\n    3. 代理模式提供几种代理, 以控制加权限, 或加内容\n\n- 行为型模式是怎么做事, 方法函数怎么做\n    1. 责任链模式, 一个一个传下去\n    2. 迭代器模式, 一个一个拿元素处理 （应用面狭小）\n    3. 观察者模式, 一个一个更新\n\n## 加深理解\n\n工厂模式是什么？有什么用？怎么用？什么好处？\n\n~~哪个工厂模式,简单工厂模式，工厂方法模式还是抽象工厂模式。~~\n\n**简单工厂模式**就是把所有产品的创建细节都隐藏在一个工厂里，也就是把要创建的这个类的对象的创建细节隐藏在工厂里，这就叫简单工厂。\n\n**问题：**因为这个类所有的产品创建细节都隐藏在一个工厂里，那如果要加产品，就需要改工厂的代码，这个就不符合开闭原则。简单工厂的一个类，承载了很多产品的创建，所以不符合**单一职责原则**。就需要从简单工厂升级到工厂方法模式。\n\n-------\n\n**工厂方法模式**就是是一个产品，一种产品的创建过程，它隐藏在一个单独的工厂里，每一个产品对应一个工厂，同样, 产品的创建过程隐藏在这个工厂里，\n\n**需要的注意的是：**有多个工厂的时候，我们需要一个工厂的接口~~--**抽象工厂**，~~也就是工厂方法模式。工厂方法模式还是把对象的创建过程隐藏在了工厂里。它和之前简单工厂相比的话，一个产品对应一个工厂，加新产品的话，只需要再加一个工厂就可以了，不需要修改工厂代码。缺点就是加一个产品需要添加两类。类写的比较多，这是工厂方法模式。\n\n-------\n\n**抽象工厂模式**和跟前面的两个就不太一样，它是生产一个产品系列，或者叫一套产品，生产一套产品的时候，一个工厂负责生产一套。\n好处: \n\n- 第一，把对象的创建细节隐藏在工厂里, \n- 第二, 可以保持产品系列的一致性，也就是加约束。\n\n比如：苹果的IOS只能加苹果的手机壳，苹果CPU, 这就叫一致性，小产品之间的约束。\n\n## 设计模式大全\n\n- 创建型模式：\n    1. 工厂方法模式\n    2. 抽象工厂模式\n    3. 创建者模式\n    4. 原型模式\n    5. 单例模式\n- 结构型模式\n    1. 适配器模式\n    2. 桥模式\n    3. 组合模式\n    4. 装饰模式\n    5. 外观模式\n    6. 享元模式\n    7. 代理模式\n- 行为型模式\n    1. 解释器模式\n    2. 责任链模式\n    3. 命令模式\n    4. 迭代器模式\n    5. 中介者模式\n    6. 备忘录模式\n    7. 观察者模式\n    8. 状态模式\n    9. 策略模式\n    1. 访问者模式\n    2. 模板方法模式\n\n","source":"_posts/design-patterns.md","raw":"---\ntitle: 设计模式\ndate: 2018-01-03 16:18:23\ntags:\ncategories:\nkeywords:\ndescription: 设计模式就是设计的套路\n---\n# 什么是设计模式\nChristopher Alexander:“每一个模式描述了一个在我们周围不断重复发生的问题，以及该问题的解决方案的核心。这样你就能一次又一次地使用该方案而不必做重复劳动。”\n\n每一个设计模式系统地命名、解释和评价了面向对象系统中一个重要的和重复出现的设计。\n\nGoF（Gang of Four）\n\n设计模式四个基本要素：模式名称、问题、解决方案、效果\n\n面向对象的三大特性: \n\n- 封装：把数据和函数包装在类里 类的边界限制了一些外界的访问\n- 继承：复用\n- 多态：多态语言\n\n```python\n# 封装\nclass A:\n    def __init__(self, x):\n        self.__test = x # 私有变量\n\n    def gettest(self):\n        return self.__test\n\n    def settest(self, x):\n        self.__test = x\n\n# 继承：复用\nclass B(A):\n    def __init__(self):\n        pass\n\n    # override 重写 覆写\n    def settest(self):\n        self.__test = x + 1\n\n# 多态 python 是一种多态语言\n# 一个函数的多种表现\n\n# 重载 python 不支持\ndef test(x, y):\n    return x+y\n\ndef test(x, y, z):\n    return x+y+z\n\ntest(2,3)\ntest(2,3,4)\n```\n\n## 接口\n一种特殊的类（抽象类），声明了若干方法，要求继承该接口的类必须实现这些方法。目的就是对外保持一致\n\n**作用：**限制继承接口的类的方法的名称及调用方式；隐藏了类的内部实现。\n\n接口就是一种抽象的基类（父类），限制继承它的类必须实现接口中定义的某些方法\n\n其实就是限制程序员的东西, 不能乱写, 按照定的规范去写\n\n[示例](https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-intergace-py)\n\n```python\n# 接口的两种写法\n# 1.\nclass A:\n    def test(self):\n        raise NotImplementedError # 限制  子类必须实现\n\n\nclass B(A):\n    def test(self):\n        print('B.test')\n# 2. 抽象类不能实例化        \nfrom abs import bastractmethod,ABCMeta  \n\nclass A(metaclass=ABCMeta):    # 抽象类\n    @abstractmethod \n    def test(self):    # 抽象方法   必须在子类实现\n        raise NotImplementedError # 限制  子类必须实现\n\nclass B(A):\n    pass\n\n\nclass C(A):\n    def test(self):\n        print('B.test')\n\na = B() # 不能实例化\nb = C() # 可以实例化\n```\n\n# 设计模式六大原则\n\n## 开闭原则\n一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。即软件实体应尽量在不修改原有代码的情况下进行扩展。\n## 里氏（Liskov）替换原则\n所有引用基类（父类）的地方必须能透明地使用其子类的对象。功能保持一致\n## 依赖倒置原则\n高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。换言之，**要针对接口（抽象）编程，而不是针对实现（实例）编程。**\n## 接口隔离原则\n使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口。（多继承）[示例](https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-0x02-py)\n## 迪米特法则\n一个软件实体应当尽可能少地与其他实体发生相互作用。**解耦**\n\n*五大原则没有这个迪米特法则*\n## 单一职责原则\n不要存在多于一个导致类变更的原因。通俗的说，即一个类只负责一项职责。 一个类（class）只干一件事\n\n\n- 合成复用原则\n\n尽量使用合成／聚合的方式，而不是继承。[示例](https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-0x03-py)\n\n`合成` `复用` `继承` 的使用分情况而定\n\n# 设计模式\n## 创建型模式\n### 工厂方法模式\n定义一个用于创建对象的接口（工厂接口），让子类决定实例化哪一个产品类。\n**角色：**\n\n- 抽象工厂角色（Creator）\n- 具体工厂角色（Concrete Creator）\n- 抽象产品角色（Product）\n- 具体产品角色（Concrete Product）\n\n工厂方法模式相比简单工厂模式将每个具体产品都对应了一个具体工厂。\n\n[示例](https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-factory_method-py)\n\n![工厂方法模式](https://i.imgur.com/pgobtQV.jpg)\n\n\n\n**适用场景：**\n\n- 需要生产多种、大量复杂对象的时候\n- 需要降低耦合度的时候\n- 当系统中的产品种类需要经常扩展的时候\n\n**优点：**\n\n- 每个具体产品都对应一个具体工厂类，不需要修改工厂类代码\n- 隐藏了对象创建的实现细节\n\n**缺点：**\n\n- 每增加一个具体产品类，就必须增加一个相应的具体工厂类\n\n#### 简单工厂模式\n不直接向客户端暴露对象创建的实现细节，而是通过一个工厂类来负责创建产品类的实例。\n**角色：**\n\n- 工厂角色（Creator）\n- 抽象产品角色（Product）\n- 具体产品角色（Concrete Product）\n\n**优点：**\n\n- 隐藏了对象创建的实现细节\n- 客户端不需要修改代码\n\n**缺点：**\n违反了单一职责原则，将创建逻辑集中到一个工厂类里\n当添加新产品时，需要修改工厂类代码，违反了开闭原则\n\n[示例](https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-factory-py)\n\n### 单例模式\n比如: 数据库连接\n\n好的单列模式会写一个基类（[示例](https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-singleton-py)）\n\n单例（Singleton）: 保证一个类只有一个实例，并提供一个访问它的全局访问点。\n\n适用场景:\n\n- 当类只能有一个实例而且客户可以从一个众所周知的访问点访问它时\n\n优点:\n\n- 对唯一实例的受控访问\n- 单例相当于全局变量，但防止了命名空间被污染\n\n与单例模式功能相似的概念：全局变量、静态变量（方法）\n\n```python\nclass A:\n    test = 0\n    \nA.test = 1\n\na = A()\nprint(a.test)\n# a.test = 1 # 对象变量的修改不会影响到类的静态变量\n\nb = A()\nprint(b.test)\n```\n\n### 抽象工厂模式\n定义一个工厂类接口，让工厂子类来创建一系列相关或相互依赖的对象。\n**例：**生产一部手机，需要`手机壳`、`CPU`、`操作系统`三类对象进行组装，其中每类对象都有不同的种类。对每个具体工厂，分别生产一部手机所需要的三个对象。\n\n**角色：**\n\n[示例](https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-abstract_factory-py)\n\n- 抽象工厂角色（Creator）\n- 具体工厂角色（Concrete Creator）\n- 抽象产品角色（Product）\n- 具体产品角色（Concrete Product）\n- 客户端（Client)\n\n相比工厂方法模式，抽象工厂模式中的每个具体工厂都生产一套产品。\n\n![抽象工厂模式](https://i.imgur.com/fW3OyP8.jpg)\n\n适用场景：\n\n- 系统要独立于产品的创建与组合时\n- 强调一系列相关的产品对象的设计以便进行联合使用时\n- 提供一个产品类库，想隐藏产品的具体实现时\n\n优点：\n\n- 将客户端与类的具体实现相分离\n- 每个工厂创建了一个完整的产品系列，使得易于交换产品系列\n- 有利于产品的一致性（即产品之间的约束关系）\n\n缺点：\n\n- 难以支持新种类的（抽象）产品\n\n### 建造者模式\n将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。\n\n**角色：**\n\n- 抽象建造者（Builder）\n- 具体建造者（Concrete Builder）\n- 指挥者（Director）\n- 产品（Product）\n\n建造者模式与抽象工厂模式相似，也用来创建复杂对象。主要区别是建造者模式着重一步步构造一个复杂对象，而抽象工厂模式着重于多个系列的产品对象。\n\n![建造者模式](https://i.imgur.com/z8IFFM0.jpg)\n\n[示例](https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-builder-py)\n\n适用场景：\n\n- 当创建复杂对象的算法（Director）应该独立于该对象的组成部分（Builder）时\n- 当构造过程允许被构造的对象有不同的表示时（不同Builder）。\n\n优点：\n\n- 隐藏了一个产品的内部结构和装配过程\n- 将构造代码与表示代码分开\n- 可以对构造过程进行更精细的控制\n\n### 小结\n\n![小结](https://i.imgur.com/Drh1aHu.jpg)\n\n使用 Abstract Factory（抽象工厂）、~~Prototype（原型模式）~~ 或 Builder（建造者） 的设计甚至比使用 Factory Method（工厂方法） 的那些设计更灵活，但它们也更加复杂。通常，设计以使用 Factory Method（简单工厂也可以） 开始，并且当设计者发现需要更大的灵活性时，设计便会向其他创建型模式演化。当你在设计标准之间进行权衡的时候，了解多个模式可以给你提供更多的选择余地。\n\n**也就是说，不用一开始就选好模式，先从简单的模式开始，如果需要频繁的改代码，就用工厂方法，等等…… 一步一步递进**\n\n\n依赖于继承的创建型模式：工厂方法模式\n依赖于组合的创建性模式：抽象工厂模式、创建者模式\n\n## 结构型模式\n### 适配器模式\n\n将一个类的接口转换成客户希望的另一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。\n角色：\n\n- 目标接口（Target）\n- 待适配的类（Adaptee）\n- 适配器（Adapter）(套壳)\n\n两种实现方式：\n\n- 类适配器：使用多继承\n- 对象适配器：使用组合\n\n[示例](https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-singleton-py)\n\n![适配器模式](https://i.imgur.com/JOPSOGt.jpg)\n\n**适用场景：**\n想使用一个已经存在的类，而它的接口不符合你的要求\n（对象适配器）想使用一些已经存在的子类，但不可能对每一个都进行子类化以匹配它们的接口。对象适配器可以适配它的父类接口。\n\n![](https://i.imgur.com/59PiTXw.jpg)\n\n类适配器和对象适配器有不同的权衡。\n\n**类适配器**\n\n- 用一个具体的 Adapter 类对 Adaptee 和 Target 进行匹配。结果是当我们想要匹配一个类以及所有它的子类时，类 Adapter 将不能胜任工作。\n- 使得 Adapter 可以重定义 Adaptee 的部分行为，因为 Adapter 是 Adaptee 的一个子类。\n- 仅仅引入（继承）了一个对象，并不需要额外的指针以间接得到 adaptee。\n\n**对象适配器则**\n\n- 允许一个 Adapter 与多个 Adaptee-即 Adaptee 本身以及它的所有子类（如果有子类的话）一同时工作。Adapter 也可以一次给所有的 Adaptee 添加功能。\n- 使得重定义 Adaptee 的行为比较困难。这就需要生成 Adaptee 的子类并且使得 Adapter 引用这个子类而不是引用 Adaptee 本身。\n\n### 组合模式\n将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。\n\n二叉树的结构\n**角色：**\n\n- 抽象组件（Component）\n- 叶子组件（Leaf）\n- 复合组件（Composite）\n- 客户端（Client）\n\n[示例](https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-composite-py)\n\n![组合模式](https://i.imgur.com/PFRWJ87.jpg)\n\n**适用场景：**\n\n- 表示对象的“部分-整体”层次结构（特别是结构是递归的）\n- 希望用户忽略组合对象与单个对象的不同，用户统一地使用组合结构中的所有对象\n\n优点：\n\n- 定义了包含基本对象和组合对象的类层次结构\n- 简化客户端代码，即客户端可以一致地使用组合对象和单个对象\n- 更容易增加新类型的组件\n\n缺点：\n\n- 很难限制组合中的组件\n\n### 代理模式\n\n为其他对象提供一种代理以控制对这个对象的访问。\n**角色：**\n\n- 抽象实体（Subject）\n- 实体（RealSubject）\n- 代理（Proxy）\n\n[示例](https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-daili-py)\n\n**适用场景：**\n\n- 远程代理：为远程的对象提供代理\n- 虚代理：根据需要创建很大的对象\n- 保护代理：控制对原始对象的访问，用于对象有不同访问权限时\n\n**优点：**\n\n- 远程代理：可以隐藏对象位于远程地址空间的事实\n- 虚代理：可以进行优化，例如根据要求创建对象\n- 保护代理：允许在访问一个对象时有一些附加的内务处理\n\n![代理模式](https://i.imgur.com/TCdmacp.jpg)\n\n## 行为型模式\n\n### 责任链模式\n使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。\n\n**角色：**\n\n- 抽象处理者（Handler）\n- 具体处理者（ConcreteHandler）\n- 客户端（Client）\n\n[示例](https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-chain_of_responsibility-py)\n\n**例：**\n请假部门批准：leader -> 部门经理 -> 总经理\nJavascript事件浮升机制\n\n![责任链模式](https://i.imgur.com/o9AR9Wq.jpg)\n\n**适用场景：**\n\n- 有多个对象可以处理一个请求，哪个对象处理由运行时决定\n- 在不明确接收者的情况下，向多个对象中的一个提交一个请求\n\n**优点：**\n\n- 降低耦合度：一个对象无需知道是其他哪一个对象处理其请求\n\n**缺点：**\n\n- 请求不保证被接收：链的末端没有处理或链配置错误\n\n### 迭代器模式\n提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示\n\n实现方法：`__iter__`、`__next__`\n\n[示例](https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-iterator-py)\n\n适用于封装数据结构,这种结构类似与列表,或树,封装数据类型,不让外人知道是怎么存的\n\n### 观察者模式\n\n定义对象间的一种一对多的依赖关系,当一个对象的状态发生改变时, 所有依赖于它的对象都得到通知并被自动更新。观察者模式又称“发布-订阅”模式\n\n**角色：**\n\n- 抽象主题（Subject）\n- 具体主题（ConcreteSubject）——发布者\n- 抽象观察者（Observer）\n- 具体观察者（ConcreteObserver）——订阅者\n\n[示例](https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-iterator-py)\n\n![观察者模式](https://i.imgur.com/P23pGAX.jpg)\n\n**适用场景：**\n\n- 当一个抽象模型有两方面，其中一个方面依赖于另一个方面。将这两者封装在独立对象中以使它们可以各自独立地改变和复用。\n- 当对一个对象的改变需要同时改变其它对象，而不知道具体有多少对象有待改变。\n- 当一个对象必须通知其它对象，而它又不能假定其它对象是谁。换言之，你不希望这些对象是紧密耦合的。\n\n**优点：**\n\n- 目标和观察者之间的耦合最小\n- 支持广播通信\n\n**缺点：**\n\n- 多个观察者之间互不知道对方存在，因此一个观察者对主题的修改可能造成错误的更新。\n\n### 策略模式\n\n定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。\n\n**角色：**\n\n- 抽象策略（Strategy）\n- 具体策略（ConcreteStrategy）\n- 上下文（Context）\n\n[示例](https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-strategy-py)\n\n**适用场景：**\n\n- 许多相关的类仅仅是行为有异\n- 需要使用一个算法的不同变体\n- 算法使用了客户端无需知道的数据\n- 一个类中的多种行为以多个条件语句的形式存在，可以将这些行为封装如不同的策略类中。\n\n![策略模式](https://i.imgur.com/T3L7jr1.jpg)\n\n**优点：**\n\n- 定义了一系列可重用的算法和行为\n- 消除了一些条件语句\n- 可以提供相同行为的不同实现\n\n**缺点：**\n\n- 客户必须了解不同的策略\n- 策略与上下文之间的通信开销\n- 增加了对象的数目\n\n### 模板方法模式\n定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。\n\n**角色：**\n\n- 抽象类（AbstractClass）：定义抽象的原子操作（钩子操作）；实现一个模板方法作为算法的骨架。\n- 具体类（ConcreteClass）：实现原子操作\n\n[示例](https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-template_method-py)\n\n![模板方法模式](https://i.imgur.com/GX4zMoi.jpg)\n\n**适用场景：**\n\n- 一次性实现一个算法的不变的部分\n- 各个子类中的公共行为应该被提取出来并集中到一个公共父类中以避免代码重复\n- 控制子类扩展\n\n# 总结\n\n*设计模式可互相嵌套, 如: 策略模式的算法写成单例模式比较好; *\n\n- 创建型模式都是对象怎么创建\n\n- 结构型模式是怎么把类组织在一起\n\n    1. 适配器模式类写坏了, 和其他类不适配\n    2. 组合模式是几个类怎么表现一样, 叶子节点和复合节点怎么表现一样\n    3. 代理模式提供几种代理, 以控制加权限, 或加内容\n\n- 行为型模式是怎么做事, 方法函数怎么做\n    1. 责任链模式, 一个一个传下去\n    2. 迭代器模式, 一个一个拿元素处理 （应用面狭小）\n    3. 观察者模式, 一个一个更新\n\n## 加深理解\n\n工厂模式是什么？有什么用？怎么用？什么好处？\n\n~~哪个工厂模式,简单工厂模式，工厂方法模式还是抽象工厂模式。~~\n\n**简单工厂模式**就是把所有产品的创建细节都隐藏在一个工厂里，也就是把要创建的这个类的对象的创建细节隐藏在工厂里，这就叫简单工厂。\n\n**问题：**因为这个类所有的产品创建细节都隐藏在一个工厂里，那如果要加产品，就需要改工厂的代码，这个就不符合开闭原则。简单工厂的一个类，承载了很多产品的创建，所以不符合**单一职责原则**。就需要从简单工厂升级到工厂方法模式。\n\n-------\n\n**工厂方法模式**就是是一个产品，一种产品的创建过程，它隐藏在一个单独的工厂里，每一个产品对应一个工厂，同样, 产品的创建过程隐藏在这个工厂里，\n\n**需要的注意的是：**有多个工厂的时候，我们需要一个工厂的接口~~--**抽象工厂**，~~也就是工厂方法模式。工厂方法模式还是把对象的创建过程隐藏在了工厂里。它和之前简单工厂相比的话，一个产品对应一个工厂，加新产品的话，只需要再加一个工厂就可以了，不需要修改工厂代码。缺点就是加一个产品需要添加两类。类写的比较多，这是工厂方法模式。\n\n-------\n\n**抽象工厂模式**和跟前面的两个就不太一样，它是生产一个产品系列，或者叫一套产品，生产一套产品的时候，一个工厂负责生产一套。\n好处: \n\n- 第一，把对象的创建细节隐藏在工厂里, \n- 第二, 可以保持产品系列的一致性，也就是加约束。\n\n比如：苹果的IOS只能加苹果的手机壳，苹果CPU, 这就叫一致性，小产品之间的约束。\n\n## 设计模式大全\n\n- 创建型模式：\n    1. 工厂方法模式\n    2. 抽象工厂模式\n    3. 创建者模式\n    4. 原型模式\n    5. 单例模式\n- 结构型模式\n    1. 适配器模式\n    2. 桥模式\n    3. 组合模式\n    4. 装饰模式\n    5. 外观模式\n    6. 享元模式\n    7. 代理模式\n- 行为型模式\n    1. 解释器模式\n    2. 责任链模式\n    3. 命令模式\n    4. 迭代器模式\n    5. 中介者模式\n    6. 备忘录模式\n    7. 观察者模式\n    8. 状态模式\n    9. 策略模式\n    1. 访问者模式\n    2. 模板方法模式\n\n","slug":"design-patterns","published":1,"updated":"2018-04-01T13:23:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfgx5ox40010mxgoalcej3j9","content":"<h1 id=\"什么是设计模式\"><a href=\"#什么是设计模式\" class=\"headerlink\" title=\"什么是设计模式\"></a>什么是设计模式</h1><p>Christopher Alexander:“每一个模式描述了一个在我们周围不断重复发生的问题，以及该问题的解决方案的核心。这样你就能一次又一次地使用该方案而不必做重复劳动。”</p>\n<p>每一个设计模式系统地命名、解释和评价了面向对象系统中一个重要的和重复出现的设计。</p>\n<p>GoF（Gang of Four）</p>\n<p>设计模式四个基本要素：模式名称、问题、解决方案、效果</p>\n<p>面向对象的三大特性: </p>\n<ul>\n<li>封装：把数据和函数包装在类里 类的边界限制了一些外界的访问</li>\n<li>继承：复用</li>\n<li>多态：多态语言</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 封装</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        self.__test = x <span class=\"comment\"># 私有变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gettest</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__test</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">settest</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        self.__test = x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 继承：复用</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span><span class=\"params\">(A)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># override 重写 覆写</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">settest</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.__test = x + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 多态 python 是一种多态语言</span></span><br><span class=\"line\"><span class=\"comment\"># 一个函数的多种表现</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重载 python 不支持</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">(x, y)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">(x, y, z)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+y+z</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">test(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><p>一种特殊的类（抽象类），声明了若干方法，要求继承该接口的类必须实现这些方法。目的就是对外保持一致</p>\n<p><strong>作用：</strong>限制继承接口的类的方法的名称及调用方式；隐藏了类的内部实现。</p>\n<p>接口就是一种抽象的基类（父类），限制继承它的类必须实现接口中定义的某些方法</p>\n<p>其实就是限制程序员的东西, 不能乱写, 按照定的规范去写</p>\n<p><a href=\"https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-intergace-py\" target=\"_blank\" rel=\"noopener\">示例</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 接口的两种写法</span></span><br><span class=\"line\"><span class=\"comment\"># 1.</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">raise</span> NotImplementedError <span class=\"comment\"># 限制  子类必须实现</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span><span class=\"params\">(A)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'B.test'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 2. 抽象类不能实例化        </span></span><br><span class=\"line\"><span class=\"keyword\">from</span> abs <span class=\"keyword\">import</span> bastractmethod,ABCMeta  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span><span class=\"params\">(metaclass=ABCMeta)</span>:</span>    <span class=\"comment\"># 抽象类</span></span><br><span class=\"line\"><span class=\"meta\">    @abstractmethod </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">(self)</span>:</span>    <span class=\"comment\"># 抽象方法   必须在子类实现</span></span><br><span class=\"line\">        <span class=\"keyword\">raise</span> NotImplementedError <span class=\"comment\"># 限制  子类必须实现</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span><span class=\"params\">(A)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span><span class=\"params\">(A)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'B.test'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">a = B() <span class=\"comment\"># 不能实例化</span></span><br><span class=\"line\">b = C() <span class=\"comment\"># 可以实例化</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"设计模式六大原则\"><a href=\"#设计模式六大原则\" class=\"headerlink\" title=\"设计模式六大原则\"></a>设计模式六大原则</h1><h2 id=\"开闭原则\"><a href=\"#开闭原则\" class=\"headerlink\" title=\"开闭原则\"></a>开闭原则</h2><p>一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。即软件实体应尽量在不修改原有代码的情况下进行扩展。</p>\n<h2 id=\"里氏（Liskov）替换原则\"><a href=\"#里氏（Liskov）替换原则\" class=\"headerlink\" title=\"里氏（Liskov）替换原则\"></a>里氏（Liskov）替换原则</h2><p>所有引用基类（父类）的地方必须能透明地使用其子类的对象。功能保持一致</p>\n<h2 id=\"依赖倒置原则\"><a href=\"#依赖倒置原则\" class=\"headerlink\" title=\"依赖倒置原则\"></a>依赖倒置原则</h2><p>高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。换言之，<strong>要针对接口（抽象）编程，而不是针对实现（实例）编程。</strong></p>\n<h2 id=\"接口隔离原则\"><a href=\"#接口隔离原则\" class=\"headerlink\" title=\"接口隔离原则\"></a>接口隔离原则</h2><p>使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口。（多继承）<a href=\"https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-0x02-py\" target=\"_blank\" rel=\"noopener\">示例</a></p>\n<h2 id=\"迪米特法则\"><a href=\"#迪米特法则\" class=\"headerlink\" title=\"迪米特法则\"></a>迪米特法则</h2><p>一个软件实体应当尽可能少地与其他实体发生相互作用。<strong>解耦</strong></p>\n<p><em>五大原则没有这个迪米特法则</em></p>\n<h2 id=\"单一职责原则\"><a href=\"#单一职责原则\" class=\"headerlink\" title=\"单一职责原则\"></a>单一职责原则</h2><p>不要存在多于一个导致类变更的原因。通俗的说，即一个类只负责一项职责。 一个类（class）只干一件事</p>\n<ul>\n<li>合成复用原则</li>\n</ul>\n<p>尽量使用合成／聚合的方式，而不是继承。<a href=\"https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-0x03-py\" target=\"_blank\" rel=\"noopener\">示例</a></p>\n<p><code>合成</code> <code>复用</code> <code>继承</code> 的使用分情况而定</p>\n<h1 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h1><h2 id=\"创建型模式\"><a href=\"#创建型模式\" class=\"headerlink\" title=\"创建型模式\"></a>创建型模式</h2><h3 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h3><p>定义一个用于创建对象的接口（工厂接口），让子类决定实例化哪一个产品类。<br><strong>角色：</strong></p>\n<ul>\n<li>抽象工厂角色（Creator）</li>\n<li>具体工厂角色（Concrete Creator）</li>\n<li>抽象产品角色（Product）</li>\n<li>具体产品角色（Concrete Product）</li>\n</ul>\n<p>工厂方法模式相比简单工厂模式将每个具体产品都对应了一个具体工厂。</p>\n<p><a href=\"https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-factory_method-py\" target=\"_blank\" rel=\"noopener\">示例</a></p>\n<p><img src=\"https://i.imgur.com/pgobtQV.jpg\" alt=\"工厂方法模式\"></p>\n<p><strong>适用场景：</strong></p>\n<ul>\n<li>需要生产多种、大量复杂对象的时候</li>\n<li>需要降低耦合度的时候</li>\n<li>当系统中的产品种类需要经常扩展的时候</li>\n</ul>\n<p><strong>优点：</strong></p>\n<ul>\n<li>每个具体产品都对应一个具体工厂类，不需要修改工厂类代码</li>\n<li>隐藏了对象创建的实现细节</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>每增加一个具体产品类，就必须增加一个相应的具体工厂类</li>\n</ul>\n<h4 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h4><p>不直接向客户端暴露对象创建的实现细节，而是通过一个工厂类来负责创建产品类的实例。<br><strong>角色：</strong></p>\n<ul>\n<li>工厂角色（Creator）</li>\n<li>抽象产品角色（Product）</li>\n<li>具体产品角色（Concrete Product）</li>\n</ul>\n<p><strong>优点：</strong></p>\n<ul>\n<li>隐藏了对象创建的实现细节</li>\n<li>客户端不需要修改代码</li>\n</ul>\n<p><strong>缺点：</strong><br>违反了单一职责原则，将创建逻辑集中到一个工厂类里<br>当添加新产品时，需要修改工厂类代码，违反了开闭原则</p>\n<p><a href=\"https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-factory-py\" target=\"_blank\" rel=\"noopener\">示例</a></p>\n<h3 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h3><p>比如: 数据库连接</p>\n<p>好的单列模式会写一个基类（<a href=\"https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-singleton-py\" target=\"_blank\" rel=\"noopener\">示例</a>）</p>\n<p>单例（Singleton）: 保证一个类只有一个实例，并提供一个访问它的全局访问点。</p>\n<p>适用场景:</p>\n<ul>\n<li>当类只能有一个实例而且客户可以从一个众所周知的访问点访问它时</li>\n</ul>\n<p>优点:</p>\n<ul>\n<li>对唯一实例的受控访问</li>\n<li>单例相当于全局变量，但防止了命名空间被污染</li>\n</ul>\n<p>与单例模式功能相似的概念：全局变量、静态变量（方法）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>:</span></span><br><span class=\"line\">    test = <span class=\"number\">0</span></span><br><span class=\"line\">    </span><br><span class=\"line\">A.test = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = A()</span><br><span class=\"line\">print(a.test)</span><br><span class=\"line\"><span class=\"comment\"># a.test = 1 # 对象变量的修改不会影响到类的静态变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">b = A()</span><br><span class=\"line\">print(b.test)</span><br></pre></td></tr></table></figure>\n<h3 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h3><p>定义一个工厂类接口，让工厂子类来创建一系列相关或相互依赖的对象。<br><strong>例：</strong>生产一部手机，需要<code>手机壳</code>、<code>CPU</code>、<code>操作系统</code>三类对象进行组装，其中每类对象都有不同的种类。对每个具体工厂，分别生产一部手机所需要的三个对象。</p>\n<p><strong>角色：</strong></p>\n<p><a href=\"https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-abstract_factory-py\" target=\"_blank\" rel=\"noopener\">示例</a></p>\n<ul>\n<li>抽象工厂角色（Creator）</li>\n<li>具体工厂角色（Concrete Creator）</li>\n<li>抽象产品角色（Product）</li>\n<li>具体产品角色（Concrete Product）</li>\n<li>客户端（Client)</li>\n</ul>\n<p>相比工厂方法模式，抽象工厂模式中的每个具体工厂都生产一套产品。</p>\n<p><img src=\"https://i.imgur.com/fW3OyP8.jpg\" alt=\"抽象工厂模式\"></p>\n<p>适用场景：</p>\n<ul>\n<li>系统要独立于产品的创建与组合时</li>\n<li>强调一系列相关的产品对象的设计以便进行联合使用时</li>\n<li>提供一个产品类库，想隐藏产品的具体实现时</li>\n</ul>\n<p>优点：</p>\n<ul>\n<li>将客户端与类的具体实现相分离</li>\n<li>每个工厂创建了一个完整的产品系列，使得易于交换产品系列</li>\n<li>有利于产品的一致性（即产品之间的约束关系）</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>难以支持新种类的（抽象）产品</li>\n</ul>\n<h3 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h3><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>\n<p><strong>角色：</strong></p>\n<ul>\n<li>抽象建造者（Builder）</li>\n<li>具体建造者（Concrete Builder）</li>\n<li>指挥者（Director）</li>\n<li>产品（Product）</li>\n</ul>\n<p>建造者模式与抽象工厂模式相似，也用来创建复杂对象。主要区别是建造者模式着重一步步构造一个复杂对象，而抽象工厂模式着重于多个系列的产品对象。</p>\n<p><img src=\"https://i.imgur.com/z8IFFM0.jpg\" alt=\"建造者模式\"></p>\n<p><a href=\"https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-builder-py\" target=\"_blank\" rel=\"noopener\">示例</a></p>\n<p>适用场景：</p>\n<ul>\n<li>当创建复杂对象的算法（Director）应该独立于该对象的组成部分（Builder）时</li>\n<li>当构造过程允许被构造的对象有不同的表示时（不同Builder）。</li>\n</ul>\n<p>优点：</p>\n<ul>\n<li>隐藏了一个产品的内部结构和装配过程</li>\n<li>将构造代码与表示代码分开</li>\n<li>可以对构造过程进行更精细的控制</li>\n</ul>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p><img src=\"https://i.imgur.com/Drh1aHu.jpg\" alt=\"小结\"></p>\n<p>使用 Abstract Factory（抽象工厂）、<del>Prototype（原型模式）</del> 或 Builder（建造者） 的设计甚至比使用 Factory Method（工厂方法） 的那些设计更灵活，但它们也更加复杂。通常，设计以使用 Factory Method（简单工厂也可以） 开始，并且当设计者发现需要更大的灵活性时，设计便会向其他创建型模式演化。当你在设计标准之间进行权衡的时候，了解多个模式可以给你提供更多的选择余地。</p>\n<p><strong>也就是说，不用一开始就选好模式，先从简单的模式开始，如果需要频繁的改代码，就用工厂方法，等等…… 一步一步递进</strong></p>\n<p>依赖于继承的创建型模式：工厂方法模式<br>依赖于组合的创建性模式：抽象工厂模式、创建者模式</p>\n<h2 id=\"结构型模式\"><a href=\"#结构型模式\" class=\"headerlink\" title=\"结构型模式\"></a>结构型模式</h2><h3 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h3><p>将一个类的接口转换成客户希望的另一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。<br>角色：</p>\n<ul>\n<li>目标接口（Target）</li>\n<li>待适配的类（Adaptee）</li>\n<li>适配器（Adapter）(套壳)</li>\n</ul>\n<p>两种实现方式：</p>\n<ul>\n<li>类适配器：使用多继承</li>\n<li>对象适配器：使用组合</li>\n</ul>\n<p><a href=\"https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-singleton-py\" target=\"_blank\" rel=\"noopener\">示例</a></p>\n<p><img src=\"https://i.imgur.com/JOPSOGt.jpg\" alt=\"适配器模式\"></p>\n<p><strong>适用场景：</strong><br>想使用一个已经存在的类，而它的接口不符合你的要求<br>（对象适配器）想使用一些已经存在的子类，但不可能对每一个都进行子类化以匹配它们的接口。对象适配器可以适配它的父类接口。</p>\n<p><img src=\"https://i.imgur.com/59PiTXw.jpg\" alt=\"\"></p>\n<p>类适配器和对象适配器有不同的权衡。</p>\n<p><strong>类适配器</strong></p>\n<ul>\n<li>用一个具体的 Adapter 类对 Adaptee 和 Target 进行匹配。结果是当我们想要匹配一个类以及所有它的子类时，类 Adapter 将不能胜任工作。</li>\n<li>使得 Adapter 可以重定义 Adaptee 的部分行为，因为 Adapter 是 Adaptee 的一个子类。</li>\n<li>仅仅引入（继承）了一个对象，并不需要额外的指针以间接得到 adaptee。</li>\n</ul>\n<p><strong>对象适配器则</strong></p>\n<ul>\n<li>允许一个 Adapter 与多个 Adaptee-即 Adaptee 本身以及它的所有子类（如果有子类的话）一同时工作。Adapter 也可以一次给所有的 Adaptee 添加功能。</li>\n<li>使得重定义 Adaptee 的行为比较困难。这就需要生成 Adaptee 的子类并且使得 Adapter 引用这个子类而不是引用 Adaptee 本身。</li>\n</ul>\n<h3 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h3><p>将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p>\n<p>二叉树的结构<br><strong>角色：</strong></p>\n<ul>\n<li>抽象组件（Component）</li>\n<li>叶子组件（Leaf）</li>\n<li>复合组件（Composite）</li>\n<li>客户端（Client）</li>\n</ul>\n<p><a href=\"https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-composite-py\" target=\"_blank\" rel=\"noopener\">示例</a></p>\n<p><img src=\"https://i.imgur.com/PFRWJ87.jpg\" alt=\"组合模式\"></p>\n<p><strong>适用场景：</strong></p>\n<ul>\n<li>表示对象的“部分-整体”层次结构（特别是结构是递归的）</li>\n<li>希望用户忽略组合对象与单个对象的不同，用户统一地使用组合结构中的所有对象</li>\n</ul>\n<p>优点：</p>\n<ul>\n<li>定义了包含基本对象和组合对象的类层次结构</li>\n<li>简化客户端代码，即客户端可以一致地使用组合对象和单个对象</li>\n<li>更容易增加新类型的组件</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>很难限制组合中的组件</li>\n</ul>\n<h3 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h3><p>为其他对象提供一种代理以控制对这个对象的访问。<br><strong>角色：</strong></p>\n<ul>\n<li>抽象实体（Subject）</li>\n<li>实体（RealSubject）</li>\n<li>代理（Proxy）</li>\n</ul>\n<p><a href=\"https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-daili-py\" target=\"_blank\" rel=\"noopener\">示例</a></p>\n<p><strong>适用场景：</strong></p>\n<ul>\n<li>远程代理：为远程的对象提供代理</li>\n<li>虚代理：根据需要创建很大的对象</li>\n<li>保护代理：控制对原始对象的访问，用于对象有不同访问权限时</li>\n</ul>\n<p><strong>优点：</strong></p>\n<ul>\n<li>远程代理：可以隐藏对象位于远程地址空间的事实</li>\n<li>虚代理：可以进行优化，例如根据要求创建对象</li>\n<li>保护代理：允许在访问一个对象时有一些附加的内务处理</li>\n</ul>\n<p><img src=\"https://i.imgur.com/TCdmacp.jpg\" alt=\"代理模式\"></p>\n<h2 id=\"行为型模式\"><a href=\"#行为型模式\" class=\"headerlink\" title=\"行为型模式\"></a>行为型模式</h2><h3 id=\"责任链模式\"><a href=\"#责任链模式\" class=\"headerlink\" title=\"责任链模式\"></a>责任链模式</h3><p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p>\n<p><strong>角色：</strong></p>\n<ul>\n<li>抽象处理者（Handler）</li>\n<li>具体处理者（ConcreteHandler）</li>\n<li>客户端（Client）</li>\n</ul>\n<p><a href=\"https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-chain_of_responsibility-py\" target=\"_blank\" rel=\"noopener\">示例</a></p>\n<p><strong>例：</strong><br>请假部门批准：leader -&gt; 部门经理 -&gt; 总经理<br>Javascript事件浮升机制</p>\n<p><img src=\"https://i.imgur.com/o9AR9Wq.jpg\" alt=\"责任链模式\"></p>\n<p><strong>适用场景：</strong></p>\n<ul>\n<li>有多个对象可以处理一个请求，哪个对象处理由运行时决定</li>\n<li>在不明确接收者的情况下，向多个对象中的一个提交一个请求</li>\n</ul>\n<p><strong>优点：</strong></p>\n<ul>\n<li>降低耦合度：一个对象无需知道是其他哪一个对象处理其请求</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>请求不保证被接收：链的末端没有处理或链配置错误</li>\n</ul>\n<h3 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h3><p>提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示</p>\n<p>实现方法：<code>__iter__</code>、<code>__next__</code></p>\n<p><a href=\"https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-iterator-py\" target=\"_blank\" rel=\"noopener\">示例</a></p>\n<p>适用于封装数据结构,这种结构类似与列表,或树,封装数据类型,不让外人知道是怎么存的</p>\n<h3 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h3><p>定义对象间的一种一对多的依赖关系,当一个对象的状态发生改变时, 所有依赖于它的对象都得到通知并被自动更新。观察者模式又称“发布-订阅”模式</p>\n<p><strong>角色：</strong></p>\n<ul>\n<li>抽象主题（Subject）</li>\n<li>具体主题（ConcreteSubject）——发布者</li>\n<li>抽象观察者（Observer）</li>\n<li>具体观察者（ConcreteObserver）——订阅者</li>\n</ul>\n<p><a href=\"https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-iterator-py\" target=\"_blank\" rel=\"noopener\">示例</a></p>\n<p><img src=\"https://i.imgur.com/P23pGAX.jpg\" alt=\"观察者模式\"></p>\n<p><strong>适用场景：</strong></p>\n<ul>\n<li>当一个抽象模型有两方面，其中一个方面依赖于另一个方面。将这两者封装在独立对象中以使它们可以各自独立地改变和复用。</li>\n<li>当对一个对象的改变需要同时改变其它对象，而不知道具体有多少对象有待改变。</li>\n<li>当一个对象必须通知其它对象，而它又不能假定其它对象是谁。换言之，你不希望这些对象是紧密耦合的。</li>\n</ul>\n<p><strong>优点：</strong></p>\n<ul>\n<li>目标和观察者之间的耦合最小</li>\n<li>支持广播通信</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>多个观察者之间互不知道对方存在，因此一个观察者对主题的修改可能造成错误的更新。</li>\n</ul>\n<h3 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h3><p>定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。</p>\n<p><strong>角色：</strong></p>\n<ul>\n<li>抽象策略（Strategy）</li>\n<li>具体策略（ConcreteStrategy）</li>\n<li>上下文（Context）</li>\n</ul>\n<p><a href=\"https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-strategy-py\" target=\"_blank\" rel=\"noopener\">示例</a></p>\n<p><strong>适用场景：</strong></p>\n<ul>\n<li>许多相关的类仅仅是行为有异</li>\n<li>需要使用一个算法的不同变体</li>\n<li>算法使用了客户端无需知道的数据</li>\n<li>一个类中的多种行为以多个条件语句的形式存在，可以将这些行为封装如不同的策略类中。</li>\n</ul>\n<p><img src=\"https://i.imgur.com/T3L7jr1.jpg\" alt=\"策略模式\"></p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>定义了一系列可重用的算法和行为</li>\n<li>消除了一些条件语句</li>\n<li>可以提供相同行为的不同实现</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>客户必须了解不同的策略</li>\n<li>策略与上下文之间的通信开销</li>\n<li>增加了对象的数目</li>\n</ul>\n<h3 id=\"模板方法模式\"><a href=\"#模板方法模式\" class=\"headerlink\" title=\"模板方法模式\"></a>模板方法模式</h3><p>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p>\n<p><strong>角色：</strong></p>\n<ul>\n<li>抽象类（AbstractClass）：定义抽象的原子操作（钩子操作）；实现一个模板方法作为算法的骨架。</li>\n<li>具体类（ConcreteClass）：实现原子操作</li>\n</ul>\n<p><a href=\"https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-template_method-py\" target=\"_blank\" rel=\"noopener\">示例</a></p>\n<p><img src=\"https://i.imgur.com/GX4zMoi.jpg\" alt=\"模板方法模式\"></p>\n<p><strong>适用场景：</strong></p>\n<ul>\n<li>一次性实现一个算法的不变的部分</li>\n<li>各个子类中的公共行为应该被提取出来并集中到一个公共父类中以避免代码重复</li>\n<li>控制子类扩展</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p><em>设计模式可互相嵌套, 如: 策略模式的算法写成单例模式比较好; </em></p>\n<ul>\n<li><p>创建型模式都是对象怎么创建</p>\n</li>\n<li><p>结构型模式是怎么把类组织在一起</p>\n<ol>\n<li>适配器模式类写坏了, 和其他类不适配</li>\n<li>组合模式是几个类怎么表现一样, 叶子节点和复合节点怎么表现一样</li>\n<li>代理模式提供几种代理, 以控制加权限, 或加内容</li>\n</ol>\n</li>\n<li><p>行为型模式是怎么做事, 方法函数怎么做</p>\n<ol>\n<li>责任链模式, 一个一个传下去</li>\n<li>迭代器模式, 一个一个拿元素处理 （应用面狭小）</li>\n<li>观察者模式, 一个一个更新</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"加深理解\"><a href=\"#加深理解\" class=\"headerlink\" title=\"加深理解\"></a>加深理解</h2><p>工厂模式是什么？有什么用？怎么用？什么好处？</p>\n<p><del>哪个工厂模式,简单工厂模式，工厂方法模式还是抽象工厂模式。</del></p>\n<p><strong>简单工厂模式</strong>就是把所有产品的创建细节都隐藏在一个工厂里，也就是把要创建的这个类的对象的创建细节隐藏在工厂里，这就叫简单工厂。</p>\n<p><strong>问题：</strong>因为这个类所有的产品创建细节都隐藏在一个工厂里，那如果要加产品，就需要改工厂的代码，这个就不符合开闭原则。简单工厂的一个类，承载了很多产品的创建，所以不符合<strong>单一职责原则</strong>。就需要从简单工厂升级到工厂方法模式。</p>\n<hr>\n<p><strong>工厂方法模式</strong>就是是一个产品，一种产品的创建过程，它隐藏在一个单独的工厂里，每一个产品对应一个工厂，同样, 产品的创建过程隐藏在这个工厂里，</p>\n<p><strong>需要的注意的是：</strong>有多个工厂的时候，我们需要一个工厂的接口<del>–<strong>抽象工厂</strong>，</del>也就是工厂方法模式。工厂方法模式还是把对象的创建过程隐藏在了工厂里。它和之前简单工厂相比的话，一个产品对应一个工厂，加新产品的话，只需要再加一个工厂就可以了，不需要修改工厂代码。缺点就是加一个产品需要添加两类。类写的比较多，这是工厂方法模式。</p>\n<hr>\n<p><strong>抽象工厂模式</strong>和跟前面的两个就不太一样，它是生产一个产品系列，或者叫一套产品，生产一套产品的时候，一个工厂负责生产一套。<br>好处: </p>\n<ul>\n<li>第一，把对象的创建细节隐藏在工厂里, </li>\n<li>第二, 可以保持产品系列的一致性，也就是加约束。</li>\n</ul>\n<p>比如：苹果的IOS只能加苹果的手机壳，苹果CPU, 这就叫一致性，小产品之间的约束。</p>\n<h2 id=\"设计模式大全\"><a href=\"#设计模式大全\" class=\"headerlink\" title=\"设计模式大全\"></a>设计模式大全</h2><ul>\n<li>创建型模式：<ol>\n<li>工厂方法模式</li>\n<li>抽象工厂模式</li>\n<li>创建者模式</li>\n<li>原型模式</li>\n<li>单例模式</li>\n</ol>\n</li>\n<li>结构型模式<ol>\n<li>适配器模式</li>\n<li>桥模式</li>\n<li>组合模式</li>\n<li>装饰模式</li>\n<li>外观模式</li>\n<li>享元模式</li>\n<li>代理模式</li>\n</ol>\n</li>\n<li>行为型模式<ol>\n<li>解释器模式</li>\n<li>责任链模式</li>\n<li>命令模式</li>\n<li>迭代器模式</li>\n<li>中介者模式</li>\n<li>备忘录模式</li>\n<li>观察者模式</li>\n<li>状态模式</li>\n<li>策略模式</li>\n<li>访问者模式</li>\n<li>模板方法模式</li>\n</ol>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"什么是设计模式\"><a href=\"#什么是设计模式\" class=\"headerlink\" title=\"什么是设计模式\"></a>什么是设计模式</h1><p>Christopher Alexander:“每一个模式描述了一个在我们周围不断重复发生的问题，以及该问题的解决方案的核心。这样你就能一次又一次地使用该方案而不必做重复劳动。”</p>\n<p>每一个设计模式系统地命名、解释和评价了面向对象系统中一个重要的和重复出现的设计。</p>\n<p>GoF（Gang of Four）</p>\n<p>设计模式四个基本要素：模式名称、问题、解决方案、效果</p>\n<p>面向对象的三大特性: </p>\n<ul>\n<li>封装：把数据和函数包装在类里 类的边界限制了一些外界的访问</li>\n<li>继承：复用</li>\n<li>多态：多态语言</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 封装</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        self.__test = x <span class=\"comment\"># 私有变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gettest</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__test</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">settest</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        self.__test = x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 继承：复用</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span><span class=\"params\">(A)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># override 重写 覆写</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">settest</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.__test = x + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 多态 python 是一种多态语言</span></span><br><span class=\"line\"><span class=\"comment\"># 一个函数的多种表现</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重载 python 不支持</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">(x, y)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">(x, y, z)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+y+z</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">test(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><p>一种特殊的类（抽象类），声明了若干方法，要求继承该接口的类必须实现这些方法。目的就是对外保持一致</p>\n<p><strong>作用：</strong>限制继承接口的类的方法的名称及调用方式；隐藏了类的内部实现。</p>\n<p>接口就是一种抽象的基类（父类），限制继承它的类必须实现接口中定义的某些方法</p>\n<p>其实就是限制程序员的东西, 不能乱写, 按照定的规范去写</p>\n<p><a href=\"https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-intergace-py\" target=\"_blank\" rel=\"noopener\">示例</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 接口的两种写法</span></span><br><span class=\"line\"><span class=\"comment\"># 1.</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">raise</span> NotImplementedError <span class=\"comment\"># 限制  子类必须实现</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span><span class=\"params\">(A)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'B.test'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 2. 抽象类不能实例化        </span></span><br><span class=\"line\"><span class=\"keyword\">from</span> abs <span class=\"keyword\">import</span> bastractmethod,ABCMeta  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span><span class=\"params\">(metaclass=ABCMeta)</span>:</span>    <span class=\"comment\"># 抽象类</span></span><br><span class=\"line\"><span class=\"meta\">    @abstractmethod </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">(self)</span>:</span>    <span class=\"comment\"># 抽象方法   必须在子类实现</span></span><br><span class=\"line\">        <span class=\"keyword\">raise</span> NotImplementedError <span class=\"comment\"># 限制  子类必须实现</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span><span class=\"params\">(A)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span><span class=\"params\">(A)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'B.test'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">a = B() <span class=\"comment\"># 不能实例化</span></span><br><span class=\"line\">b = C() <span class=\"comment\"># 可以实例化</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"设计模式六大原则\"><a href=\"#设计模式六大原则\" class=\"headerlink\" title=\"设计模式六大原则\"></a>设计模式六大原则</h1><h2 id=\"开闭原则\"><a href=\"#开闭原则\" class=\"headerlink\" title=\"开闭原则\"></a>开闭原则</h2><p>一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。即软件实体应尽量在不修改原有代码的情况下进行扩展。</p>\n<h2 id=\"里氏（Liskov）替换原则\"><a href=\"#里氏（Liskov）替换原则\" class=\"headerlink\" title=\"里氏（Liskov）替换原则\"></a>里氏（Liskov）替换原则</h2><p>所有引用基类（父类）的地方必须能透明地使用其子类的对象。功能保持一致</p>\n<h2 id=\"依赖倒置原则\"><a href=\"#依赖倒置原则\" class=\"headerlink\" title=\"依赖倒置原则\"></a>依赖倒置原则</h2><p>高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。换言之，<strong>要针对接口（抽象）编程，而不是针对实现（实例）编程。</strong></p>\n<h2 id=\"接口隔离原则\"><a href=\"#接口隔离原则\" class=\"headerlink\" title=\"接口隔离原则\"></a>接口隔离原则</h2><p>使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口。（多继承）<a href=\"https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-0x02-py\" target=\"_blank\" rel=\"noopener\">示例</a></p>\n<h2 id=\"迪米特法则\"><a href=\"#迪米特法则\" class=\"headerlink\" title=\"迪米特法则\"></a>迪米特法则</h2><p>一个软件实体应当尽可能少地与其他实体发生相互作用。<strong>解耦</strong></p>\n<p><em>五大原则没有这个迪米特法则</em></p>\n<h2 id=\"单一职责原则\"><a href=\"#单一职责原则\" class=\"headerlink\" title=\"单一职责原则\"></a>单一职责原则</h2><p>不要存在多于一个导致类变更的原因。通俗的说，即一个类只负责一项职责。 一个类（class）只干一件事</p>\n<ul>\n<li>合成复用原则</li>\n</ul>\n<p>尽量使用合成／聚合的方式，而不是继承。<a href=\"https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-0x03-py\" target=\"_blank\" rel=\"noopener\">示例</a></p>\n<p><code>合成</code> <code>复用</code> <code>继承</code> 的使用分情况而定</p>\n<h1 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h1><h2 id=\"创建型模式\"><a href=\"#创建型模式\" class=\"headerlink\" title=\"创建型模式\"></a>创建型模式</h2><h3 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h3><p>定义一个用于创建对象的接口（工厂接口），让子类决定实例化哪一个产品类。<br><strong>角色：</strong></p>\n<ul>\n<li>抽象工厂角色（Creator）</li>\n<li>具体工厂角色（Concrete Creator）</li>\n<li>抽象产品角色（Product）</li>\n<li>具体产品角色（Concrete Product）</li>\n</ul>\n<p>工厂方法模式相比简单工厂模式将每个具体产品都对应了一个具体工厂。</p>\n<p><a href=\"https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-factory_method-py\" target=\"_blank\" rel=\"noopener\">示例</a></p>\n<p><img src=\"https://i.imgur.com/pgobtQV.jpg\" alt=\"工厂方法模式\"></p>\n<p><strong>适用场景：</strong></p>\n<ul>\n<li>需要生产多种、大量复杂对象的时候</li>\n<li>需要降低耦合度的时候</li>\n<li>当系统中的产品种类需要经常扩展的时候</li>\n</ul>\n<p><strong>优点：</strong></p>\n<ul>\n<li>每个具体产品都对应一个具体工厂类，不需要修改工厂类代码</li>\n<li>隐藏了对象创建的实现细节</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>每增加一个具体产品类，就必须增加一个相应的具体工厂类</li>\n</ul>\n<h4 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h4><p>不直接向客户端暴露对象创建的实现细节，而是通过一个工厂类来负责创建产品类的实例。<br><strong>角色：</strong></p>\n<ul>\n<li>工厂角色（Creator）</li>\n<li>抽象产品角色（Product）</li>\n<li>具体产品角色（Concrete Product）</li>\n</ul>\n<p><strong>优点：</strong></p>\n<ul>\n<li>隐藏了对象创建的实现细节</li>\n<li>客户端不需要修改代码</li>\n</ul>\n<p><strong>缺点：</strong><br>违反了单一职责原则，将创建逻辑集中到一个工厂类里<br>当添加新产品时，需要修改工厂类代码，违反了开闭原则</p>\n<p><a href=\"https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-factory-py\" target=\"_blank\" rel=\"noopener\">示例</a></p>\n<h3 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h3><p>比如: 数据库连接</p>\n<p>好的单列模式会写一个基类（<a href=\"https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-singleton-py\" target=\"_blank\" rel=\"noopener\">示例</a>）</p>\n<p>单例（Singleton）: 保证一个类只有一个实例，并提供一个访问它的全局访问点。</p>\n<p>适用场景:</p>\n<ul>\n<li>当类只能有一个实例而且客户可以从一个众所周知的访问点访问它时</li>\n</ul>\n<p>优点:</p>\n<ul>\n<li>对唯一实例的受控访问</li>\n<li>单例相当于全局变量，但防止了命名空间被污染</li>\n</ul>\n<p>与单例模式功能相似的概念：全局变量、静态变量（方法）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>:</span></span><br><span class=\"line\">    test = <span class=\"number\">0</span></span><br><span class=\"line\">    </span><br><span class=\"line\">A.test = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = A()</span><br><span class=\"line\">print(a.test)</span><br><span class=\"line\"><span class=\"comment\"># a.test = 1 # 对象变量的修改不会影响到类的静态变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">b = A()</span><br><span class=\"line\">print(b.test)</span><br></pre></td></tr></table></figure>\n<h3 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h3><p>定义一个工厂类接口，让工厂子类来创建一系列相关或相互依赖的对象。<br><strong>例：</strong>生产一部手机，需要<code>手机壳</code>、<code>CPU</code>、<code>操作系统</code>三类对象进行组装，其中每类对象都有不同的种类。对每个具体工厂，分别生产一部手机所需要的三个对象。</p>\n<p><strong>角色：</strong></p>\n<p><a href=\"https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-abstract_factory-py\" target=\"_blank\" rel=\"noopener\">示例</a></p>\n<ul>\n<li>抽象工厂角色（Creator）</li>\n<li>具体工厂角色（Concrete Creator）</li>\n<li>抽象产品角色（Product）</li>\n<li>具体产品角色（Concrete Product）</li>\n<li>客户端（Client)</li>\n</ul>\n<p>相比工厂方法模式，抽象工厂模式中的每个具体工厂都生产一套产品。</p>\n<p><img src=\"https://i.imgur.com/fW3OyP8.jpg\" alt=\"抽象工厂模式\"></p>\n<p>适用场景：</p>\n<ul>\n<li>系统要独立于产品的创建与组合时</li>\n<li>强调一系列相关的产品对象的设计以便进行联合使用时</li>\n<li>提供一个产品类库，想隐藏产品的具体实现时</li>\n</ul>\n<p>优点：</p>\n<ul>\n<li>将客户端与类的具体实现相分离</li>\n<li>每个工厂创建了一个完整的产品系列，使得易于交换产品系列</li>\n<li>有利于产品的一致性（即产品之间的约束关系）</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>难以支持新种类的（抽象）产品</li>\n</ul>\n<h3 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h3><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>\n<p><strong>角色：</strong></p>\n<ul>\n<li>抽象建造者（Builder）</li>\n<li>具体建造者（Concrete Builder）</li>\n<li>指挥者（Director）</li>\n<li>产品（Product）</li>\n</ul>\n<p>建造者模式与抽象工厂模式相似，也用来创建复杂对象。主要区别是建造者模式着重一步步构造一个复杂对象，而抽象工厂模式着重于多个系列的产品对象。</p>\n<p><img src=\"https://i.imgur.com/z8IFFM0.jpg\" alt=\"建造者模式\"></p>\n<p><a href=\"https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-builder-py\" target=\"_blank\" rel=\"noopener\">示例</a></p>\n<p>适用场景：</p>\n<ul>\n<li>当创建复杂对象的算法（Director）应该独立于该对象的组成部分（Builder）时</li>\n<li>当构造过程允许被构造的对象有不同的表示时（不同Builder）。</li>\n</ul>\n<p>优点：</p>\n<ul>\n<li>隐藏了一个产品的内部结构和装配过程</li>\n<li>将构造代码与表示代码分开</li>\n<li>可以对构造过程进行更精细的控制</li>\n</ul>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p><img src=\"https://i.imgur.com/Drh1aHu.jpg\" alt=\"小结\"></p>\n<p>使用 Abstract Factory（抽象工厂）、<del>Prototype（原型模式）</del> 或 Builder（建造者） 的设计甚至比使用 Factory Method（工厂方法） 的那些设计更灵活，但它们也更加复杂。通常，设计以使用 Factory Method（简单工厂也可以） 开始，并且当设计者发现需要更大的灵活性时，设计便会向其他创建型模式演化。当你在设计标准之间进行权衡的时候，了解多个模式可以给你提供更多的选择余地。</p>\n<p><strong>也就是说，不用一开始就选好模式，先从简单的模式开始，如果需要频繁的改代码，就用工厂方法，等等…… 一步一步递进</strong></p>\n<p>依赖于继承的创建型模式：工厂方法模式<br>依赖于组合的创建性模式：抽象工厂模式、创建者模式</p>\n<h2 id=\"结构型模式\"><a href=\"#结构型模式\" class=\"headerlink\" title=\"结构型模式\"></a>结构型模式</h2><h3 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h3><p>将一个类的接口转换成客户希望的另一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。<br>角色：</p>\n<ul>\n<li>目标接口（Target）</li>\n<li>待适配的类（Adaptee）</li>\n<li>适配器（Adapter）(套壳)</li>\n</ul>\n<p>两种实现方式：</p>\n<ul>\n<li>类适配器：使用多继承</li>\n<li>对象适配器：使用组合</li>\n</ul>\n<p><a href=\"https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-singleton-py\" target=\"_blank\" rel=\"noopener\">示例</a></p>\n<p><img src=\"https://i.imgur.com/JOPSOGt.jpg\" alt=\"适配器模式\"></p>\n<p><strong>适用场景：</strong><br>想使用一个已经存在的类，而它的接口不符合你的要求<br>（对象适配器）想使用一些已经存在的子类，但不可能对每一个都进行子类化以匹配它们的接口。对象适配器可以适配它的父类接口。</p>\n<p><img src=\"https://i.imgur.com/59PiTXw.jpg\" alt=\"\"></p>\n<p>类适配器和对象适配器有不同的权衡。</p>\n<p><strong>类适配器</strong></p>\n<ul>\n<li>用一个具体的 Adapter 类对 Adaptee 和 Target 进行匹配。结果是当我们想要匹配一个类以及所有它的子类时，类 Adapter 将不能胜任工作。</li>\n<li>使得 Adapter 可以重定义 Adaptee 的部分行为，因为 Adapter 是 Adaptee 的一个子类。</li>\n<li>仅仅引入（继承）了一个对象，并不需要额外的指针以间接得到 adaptee。</li>\n</ul>\n<p><strong>对象适配器则</strong></p>\n<ul>\n<li>允许一个 Adapter 与多个 Adaptee-即 Adaptee 本身以及它的所有子类（如果有子类的话）一同时工作。Adapter 也可以一次给所有的 Adaptee 添加功能。</li>\n<li>使得重定义 Adaptee 的行为比较困难。这就需要生成 Adaptee 的子类并且使得 Adapter 引用这个子类而不是引用 Adaptee 本身。</li>\n</ul>\n<h3 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h3><p>将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p>\n<p>二叉树的结构<br><strong>角色：</strong></p>\n<ul>\n<li>抽象组件（Component）</li>\n<li>叶子组件（Leaf）</li>\n<li>复合组件（Composite）</li>\n<li>客户端（Client）</li>\n</ul>\n<p><a href=\"https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-composite-py\" target=\"_blank\" rel=\"noopener\">示例</a></p>\n<p><img src=\"https://i.imgur.com/PFRWJ87.jpg\" alt=\"组合模式\"></p>\n<p><strong>适用场景：</strong></p>\n<ul>\n<li>表示对象的“部分-整体”层次结构（特别是结构是递归的）</li>\n<li>希望用户忽略组合对象与单个对象的不同，用户统一地使用组合结构中的所有对象</li>\n</ul>\n<p>优点：</p>\n<ul>\n<li>定义了包含基本对象和组合对象的类层次结构</li>\n<li>简化客户端代码，即客户端可以一致地使用组合对象和单个对象</li>\n<li>更容易增加新类型的组件</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>很难限制组合中的组件</li>\n</ul>\n<h3 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h3><p>为其他对象提供一种代理以控制对这个对象的访问。<br><strong>角色：</strong></p>\n<ul>\n<li>抽象实体（Subject）</li>\n<li>实体（RealSubject）</li>\n<li>代理（Proxy）</li>\n</ul>\n<p><a href=\"https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-daili-py\" target=\"_blank\" rel=\"noopener\">示例</a></p>\n<p><strong>适用场景：</strong></p>\n<ul>\n<li>远程代理：为远程的对象提供代理</li>\n<li>虚代理：根据需要创建很大的对象</li>\n<li>保护代理：控制对原始对象的访问，用于对象有不同访问权限时</li>\n</ul>\n<p><strong>优点：</strong></p>\n<ul>\n<li>远程代理：可以隐藏对象位于远程地址空间的事实</li>\n<li>虚代理：可以进行优化，例如根据要求创建对象</li>\n<li>保护代理：允许在访问一个对象时有一些附加的内务处理</li>\n</ul>\n<p><img src=\"https://i.imgur.com/TCdmacp.jpg\" alt=\"代理模式\"></p>\n<h2 id=\"行为型模式\"><a href=\"#行为型模式\" class=\"headerlink\" title=\"行为型模式\"></a>行为型模式</h2><h3 id=\"责任链模式\"><a href=\"#责任链模式\" class=\"headerlink\" title=\"责任链模式\"></a>责任链模式</h3><p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p>\n<p><strong>角色：</strong></p>\n<ul>\n<li>抽象处理者（Handler）</li>\n<li>具体处理者（ConcreteHandler）</li>\n<li>客户端（Client）</li>\n</ul>\n<p><a href=\"https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-chain_of_responsibility-py\" target=\"_blank\" rel=\"noopener\">示例</a></p>\n<p><strong>例：</strong><br>请假部门批准：leader -&gt; 部门经理 -&gt; 总经理<br>Javascript事件浮升机制</p>\n<p><img src=\"https://i.imgur.com/o9AR9Wq.jpg\" alt=\"责任链模式\"></p>\n<p><strong>适用场景：</strong></p>\n<ul>\n<li>有多个对象可以处理一个请求，哪个对象处理由运行时决定</li>\n<li>在不明确接收者的情况下，向多个对象中的一个提交一个请求</li>\n</ul>\n<p><strong>优点：</strong></p>\n<ul>\n<li>降低耦合度：一个对象无需知道是其他哪一个对象处理其请求</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>请求不保证被接收：链的末端没有处理或链配置错误</li>\n</ul>\n<h3 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h3><p>提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示</p>\n<p>实现方法：<code>__iter__</code>、<code>__next__</code></p>\n<p><a href=\"https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-iterator-py\" target=\"_blank\" rel=\"noopener\">示例</a></p>\n<p>适用于封装数据结构,这种结构类似与列表,或树,封装数据类型,不让外人知道是怎么存的</p>\n<h3 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h3><p>定义对象间的一种一对多的依赖关系,当一个对象的状态发生改变时, 所有依赖于它的对象都得到通知并被自动更新。观察者模式又称“发布-订阅”模式</p>\n<p><strong>角色：</strong></p>\n<ul>\n<li>抽象主题（Subject）</li>\n<li>具体主题（ConcreteSubject）——发布者</li>\n<li>抽象观察者（Observer）</li>\n<li>具体观察者（ConcreteObserver）——订阅者</li>\n</ul>\n<p><a href=\"https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-iterator-py\" target=\"_blank\" rel=\"noopener\">示例</a></p>\n<p><img src=\"https://i.imgur.com/P23pGAX.jpg\" alt=\"观察者模式\"></p>\n<p><strong>适用场景：</strong></p>\n<ul>\n<li>当一个抽象模型有两方面，其中一个方面依赖于另一个方面。将这两者封装在独立对象中以使它们可以各自独立地改变和复用。</li>\n<li>当对一个对象的改变需要同时改变其它对象，而不知道具体有多少对象有待改变。</li>\n<li>当一个对象必须通知其它对象，而它又不能假定其它对象是谁。换言之，你不希望这些对象是紧密耦合的。</li>\n</ul>\n<p><strong>优点：</strong></p>\n<ul>\n<li>目标和观察者之间的耦合最小</li>\n<li>支持广播通信</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>多个观察者之间互不知道对方存在，因此一个观察者对主题的修改可能造成错误的更新。</li>\n</ul>\n<h3 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h3><p>定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。</p>\n<p><strong>角色：</strong></p>\n<ul>\n<li>抽象策略（Strategy）</li>\n<li>具体策略（ConcreteStrategy）</li>\n<li>上下文（Context）</li>\n</ul>\n<p><a href=\"https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-strategy-py\" target=\"_blank\" rel=\"noopener\">示例</a></p>\n<p><strong>适用场景：</strong></p>\n<ul>\n<li>许多相关的类仅仅是行为有异</li>\n<li>需要使用一个算法的不同变体</li>\n<li>算法使用了客户端无需知道的数据</li>\n<li>一个类中的多种行为以多个条件语句的形式存在，可以将这些行为封装如不同的策略类中。</li>\n</ul>\n<p><img src=\"https://i.imgur.com/T3L7jr1.jpg\" alt=\"策略模式\"></p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>定义了一系列可重用的算法和行为</li>\n<li>消除了一些条件语句</li>\n<li>可以提供相同行为的不同实现</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>客户必须了解不同的策略</li>\n<li>策略与上下文之间的通信开销</li>\n<li>增加了对象的数目</li>\n</ul>\n<h3 id=\"模板方法模式\"><a href=\"#模板方法模式\" class=\"headerlink\" title=\"模板方法模式\"></a>模板方法模式</h3><p>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p>\n<p><strong>角色：</strong></p>\n<ul>\n<li>抽象类（AbstractClass）：定义抽象的原子操作（钩子操作）；实现一个模板方法作为算法的骨架。</li>\n<li>具体类（ConcreteClass）：实现原子操作</li>\n</ul>\n<p><a href=\"https://gist.github.com/cvno/7f92b3a09c119f30d02460817f3de9cf#file-template_method-py\" target=\"_blank\" rel=\"noopener\">示例</a></p>\n<p><img src=\"https://i.imgur.com/GX4zMoi.jpg\" alt=\"模板方法模式\"></p>\n<p><strong>适用场景：</strong></p>\n<ul>\n<li>一次性实现一个算法的不变的部分</li>\n<li>各个子类中的公共行为应该被提取出来并集中到一个公共父类中以避免代码重复</li>\n<li>控制子类扩展</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p><em>设计模式可互相嵌套, 如: 策略模式的算法写成单例模式比较好; </em></p>\n<ul>\n<li><p>创建型模式都是对象怎么创建</p>\n</li>\n<li><p>结构型模式是怎么把类组织在一起</p>\n<ol>\n<li>适配器模式类写坏了, 和其他类不适配</li>\n<li>组合模式是几个类怎么表现一样, 叶子节点和复合节点怎么表现一样</li>\n<li>代理模式提供几种代理, 以控制加权限, 或加内容</li>\n</ol>\n</li>\n<li><p>行为型模式是怎么做事, 方法函数怎么做</p>\n<ol>\n<li>责任链模式, 一个一个传下去</li>\n<li>迭代器模式, 一个一个拿元素处理 （应用面狭小）</li>\n<li>观察者模式, 一个一个更新</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"加深理解\"><a href=\"#加深理解\" class=\"headerlink\" title=\"加深理解\"></a>加深理解</h2><p>工厂模式是什么？有什么用？怎么用？什么好处？</p>\n<p><del>哪个工厂模式,简单工厂模式，工厂方法模式还是抽象工厂模式。</del></p>\n<p><strong>简单工厂模式</strong>就是把所有产品的创建细节都隐藏在一个工厂里，也就是把要创建的这个类的对象的创建细节隐藏在工厂里，这就叫简单工厂。</p>\n<p><strong>问题：</strong>因为这个类所有的产品创建细节都隐藏在一个工厂里，那如果要加产品，就需要改工厂的代码，这个就不符合开闭原则。简单工厂的一个类，承载了很多产品的创建，所以不符合<strong>单一职责原则</strong>。就需要从简单工厂升级到工厂方法模式。</p>\n<hr>\n<p><strong>工厂方法模式</strong>就是是一个产品，一种产品的创建过程，它隐藏在一个单独的工厂里，每一个产品对应一个工厂，同样, 产品的创建过程隐藏在这个工厂里，</p>\n<p><strong>需要的注意的是：</strong>有多个工厂的时候，我们需要一个工厂的接口<del>–<strong>抽象工厂</strong>，</del>也就是工厂方法模式。工厂方法模式还是把对象的创建过程隐藏在了工厂里。它和之前简单工厂相比的话，一个产品对应一个工厂，加新产品的话，只需要再加一个工厂就可以了，不需要修改工厂代码。缺点就是加一个产品需要添加两类。类写的比较多，这是工厂方法模式。</p>\n<hr>\n<p><strong>抽象工厂模式</strong>和跟前面的两个就不太一样，它是生产一个产品系列，或者叫一套产品，生产一套产品的时候，一个工厂负责生产一套。<br>好处: </p>\n<ul>\n<li>第一，把对象的创建细节隐藏在工厂里, </li>\n<li>第二, 可以保持产品系列的一致性，也就是加约束。</li>\n</ul>\n<p>比如：苹果的IOS只能加苹果的手机壳，苹果CPU, 这就叫一致性，小产品之间的约束。</p>\n<h2 id=\"设计模式大全\"><a href=\"#设计模式大全\" class=\"headerlink\" title=\"设计模式大全\"></a>设计模式大全</h2><ul>\n<li>创建型模式：<ol>\n<li>工厂方法模式</li>\n<li>抽象工厂模式</li>\n<li>创建者模式</li>\n<li>原型模式</li>\n<li>单例模式</li>\n</ol>\n</li>\n<li>结构型模式<ol>\n<li>适配器模式</li>\n<li>桥模式</li>\n<li>组合模式</li>\n<li>装饰模式</li>\n<li>外观模式</li>\n<li>享元模式</li>\n<li>代理模式</li>\n</ol>\n</li>\n<li>行为型模式<ol>\n<li>解释器模式</li>\n<li>责任链模式</li>\n<li>命令模式</li>\n<li>迭代器模式</li>\n<li>中介者模式</li>\n<li>备忘录模式</li>\n<li>观察者模式</li>\n<li>状态模式</li>\n<li>策略模式</li>\n<li>访问者模式</li>\n<li>模板方法模式</li>\n</ol>\n</li>\n</ul>\n"},{"title":"列表查找","date":"2017-09-21T04:09:36.000Z","keywords":null,"description":"顺序查找与二分查找","_content":"\n<!-- more -->\n\n# 顺序查找\n\n\n- 从列表第一个元素开始，顺序进行搜索，直到找到为止。\n\n```python\nli = [1,2,3]\nindex(1)    # 顺序查找\n\n# 顺序查找 ipython  O(n) 复杂度\nimport random\nn = 10000\nli = list(range(n))\nrandom.shuffle(li)\n%timeit li.index(3200)\n#221 µs ± 11.1 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n```\n\n# 二分查找\n>只能用于有序列表\n\n从有序列表的候选区`data[0:n]`开始，通过对待查找的值与候选区中间值的比较，可以使候选区减少一半。`O(logn)` 复杂度\n\n```python\n# 二分查找\n# 循环版本\n# def bin_search(li,low,high):\ndef bin_search(li, val):\n    '''循环二分 时间复杂度 O(logn)'''\n    low = 0\n    high = len(li) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if li[mid] == val:\n            return mid\n        elif li[mid] < val:\n            low = mid + 1\n        else:  # >\n            high = mid - 1\n    return None\n# 5.6 µs ± 441 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n\n# 递归版本  递归需要切换进出栈\ndef bin_search_rec(data_set,value,low,high):\n    ''' 尾递归 和 非递归的效率基本一样 '''\n    if low <= high:\n        mid = (low+high) // 2\n        if data_set[mid] == value:\n            return mid\n        elif data_set[mid] > value:\n            # 尾递归不用切换出栈\n            return bin_search_rec(data_set,value,low,mid-1)\n        else:\n            return bin_search_rec(data_set,value,mid+1,high)\n    else:\n        return\n\n# %timeit l1.index(3200)\n# l1.sort()   # 排序\n# %timeit bin_search(l1,3200)\nprint(bin_search(l1,4000))\n```\n\n\n刷题：Letcode\n[34. Search for a Range (二分查找升级版)](https://leetcode.com/problems/search-for-a-range/?tab=Description)\n[1. Two Sum](https://leetcode.com/problems/two-sum/?tab=Description)\n\n# 习题\n1  [34. Search for a Range (二分查找升级版)](https://leetcode.com/problems/search-for-a-range/?tab=Description)\n\n```python\ndef bin_search(li, val):\n    '''循环二分 时间复杂度 O(logn)'''\n    low = 0\n    high = len(li) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if li[mid] == val:\n            a = mid\n            b = mid\n            while li[a] = value and a >= 1:\n                a -= 1\n            while li[b] = value and b < len(li):    # b <= len(li) - 1\n                b += 1\n            return (a+1,b-1)\n        elif li[mid] < val:\n            low = mid + 1\n        else:  # >\n            high = mid - 1\n    return None\n```\n\n2 . [1. Two Sum](https://leetcode.com/problems/two-sum/?tab=Description)\n\n```python\ndef two_sum(nums, target):\n    l = len(nums)\n    for i in range(l):\n        for j in range(i+1,l):\n            print(nums[i],nums[j])\n            if nums[i] + nums[j] == target:\n                return (i,j)\n    return None\n            \nprint(two_sum([2, 7, 11, 15],9))\n```\n或者\n\n```python\ndef bin_search(data_set, value):\n    low = 0\n    high = len(data_set) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if data_set[mid] == value:\n            return mid\n        elif data_set[mid] > value:\n            high = mid - 1\n        else:\n            low = mid + 1\n\ndef two_sum_2(li, target):\n    li.sort()\n    for i in range(len(li)):\n        b = target - li[i]\n        j = bin_search(li, b)\n        if j != None and i != j:\n            return i, j\n\nprint(two_sum_2([2, 7, 11], 14))\n\ndef two_sum_3(li, target):\n    li.sort()   # nlogn\n    i = 0\n    j = len(li) - 1\n    while i<j:\n        sum = li[i]+li[j]\n        if sum > target:\n            j-=1\n        elif sum < target:\n            i+=1\n        else: #sum==target\n            return (i,j)\n    return None\n```\n\n# 扩展\n[1. Two Sum](https://leetcode.com/problems/two-sum/?tab=Description) 如果是 3 个数 就把第一个数固定, 后面的列表用 two_sum_3 来计算\n> 如果这样时间复杂度\nnlogn + n²\n最终的时间复杂度是 n²\n\n\n如果用二分查找, 就需要先排序, 定住两个数, 排序(nlogn) + `定住两个数(n²)` `二分(n²logn)` 最终的复杂度是 `n²logn`\n\n","source":"_posts/list-search.md","raw":"---\ntitle: 列表查找\ndate: 2017-9-21 12:09:36\ntags:\ncategories: 算法\nkeywords:\ndescription: 顺序查找与二分查找\n---\n\n<!-- more -->\n\n# 顺序查找\n\n\n- 从列表第一个元素开始，顺序进行搜索，直到找到为止。\n\n```python\nli = [1,2,3]\nindex(1)    # 顺序查找\n\n# 顺序查找 ipython  O(n) 复杂度\nimport random\nn = 10000\nli = list(range(n))\nrandom.shuffle(li)\n%timeit li.index(3200)\n#221 µs ± 11.1 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n```\n\n# 二分查找\n>只能用于有序列表\n\n从有序列表的候选区`data[0:n]`开始，通过对待查找的值与候选区中间值的比较，可以使候选区减少一半。`O(logn)` 复杂度\n\n```python\n# 二分查找\n# 循环版本\n# def bin_search(li,low,high):\ndef bin_search(li, val):\n    '''循环二分 时间复杂度 O(logn)'''\n    low = 0\n    high = len(li) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if li[mid] == val:\n            return mid\n        elif li[mid] < val:\n            low = mid + 1\n        else:  # >\n            high = mid - 1\n    return None\n# 5.6 µs ± 441 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n\n# 递归版本  递归需要切换进出栈\ndef bin_search_rec(data_set,value,low,high):\n    ''' 尾递归 和 非递归的效率基本一样 '''\n    if low <= high:\n        mid = (low+high) // 2\n        if data_set[mid] == value:\n            return mid\n        elif data_set[mid] > value:\n            # 尾递归不用切换出栈\n            return bin_search_rec(data_set,value,low,mid-1)\n        else:\n            return bin_search_rec(data_set,value,mid+1,high)\n    else:\n        return\n\n# %timeit l1.index(3200)\n# l1.sort()   # 排序\n# %timeit bin_search(l1,3200)\nprint(bin_search(l1,4000))\n```\n\n\n刷题：Letcode\n[34. Search for a Range (二分查找升级版)](https://leetcode.com/problems/search-for-a-range/?tab=Description)\n[1. Two Sum](https://leetcode.com/problems/two-sum/?tab=Description)\n\n# 习题\n1  [34. Search for a Range (二分查找升级版)](https://leetcode.com/problems/search-for-a-range/?tab=Description)\n\n```python\ndef bin_search(li, val):\n    '''循环二分 时间复杂度 O(logn)'''\n    low = 0\n    high = len(li) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if li[mid] == val:\n            a = mid\n            b = mid\n            while li[a] = value and a >= 1:\n                a -= 1\n            while li[b] = value and b < len(li):    # b <= len(li) - 1\n                b += 1\n            return (a+1,b-1)\n        elif li[mid] < val:\n            low = mid + 1\n        else:  # >\n            high = mid - 1\n    return None\n```\n\n2 . [1. Two Sum](https://leetcode.com/problems/two-sum/?tab=Description)\n\n```python\ndef two_sum(nums, target):\n    l = len(nums)\n    for i in range(l):\n        for j in range(i+1,l):\n            print(nums[i],nums[j])\n            if nums[i] + nums[j] == target:\n                return (i,j)\n    return None\n            \nprint(two_sum([2, 7, 11, 15],9))\n```\n或者\n\n```python\ndef bin_search(data_set, value):\n    low = 0\n    high = len(data_set) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if data_set[mid] == value:\n            return mid\n        elif data_set[mid] > value:\n            high = mid - 1\n        else:\n            low = mid + 1\n\ndef two_sum_2(li, target):\n    li.sort()\n    for i in range(len(li)):\n        b = target - li[i]\n        j = bin_search(li, b)\n        if j != None and i != j:\n            return i, j\n\nprint(two_sum_2([2, 7, 11], 14))\n\ndef two_sum_3(li, target):\n    li.sort()   # nlogn\n    i = 0\n    j = len(li) - 1\n    while i<j:\n        sum = li[i]+li[j]\n        if sum > target:\n            j-=1\n        elif sum < target:\n            i+=1\n        else: #sum==target\n            return (i,j)\n    return None\n```\n\n# 扩展\n[1. Two Sum](https://leetcode.com/problems/two-sum/?tab=Description) 如果是 3 个数 就把第一个数固定, 后面的列表用 two_sum_3 来计算\n> 如果这样时间复杂度\nnlogn + n²\n最终的时间复杂度是 n²\n\n\n如果用二分查找, 就需要先排序, 定住两个数, 排序(nlogn) + `定住两个数(n²)` `二分(n²logn)` 最终的复杂度是 `n²logn`\n\n","slug":"list-search","published":1,"updated":"2018-04-01T13:23:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfgx5ox50012mxgo29keowai","content":"<a id=\"more\"></a>\n<h1 id=\"顺序查找\"><a href=\"#顺序查找\" class=\"headerlink\" title=\"顺序查找\"></a>顺序查找</h1><ul>\n<li>从列表第一个元素开始，顺序进行搜索，直到找到为止。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">li = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">index(<span class=\"number\">1</span>)    <span class=\"comment\"># 顺序查找</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 顺序查找 ipython  O(n) 复杂度</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\">n = <span class=\"number\">10000</span></span><br><span class=\"line\">li = list(range(n))</span><br><span class=\"line\">random.shuffle(li)</span><br><span class=\"line\">%timeit li.index(<span class=\"number\">3200</span>)</span><br><span class=\"line\"><span class=\"comment\">#221 µs ± 11.1 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h1><blockquote>\n<p>只能用于有序列表</p>\n</blockquote>\n<p>从有序列表的候选区<code>data[0:n]</code>开始，通过对待查找的值与候选区中间值的比较，可以使候选区减少一半。<code>O(logn)</code> 复杂度</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 二分查找</span></span><br><span class=\"line\"><span class=\"comment\"># 循环版本</span></span><br><span class=\"line\"><span class=\"comment\"># def bin_search(li,low,high):</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bin_search</span><span class=\"params\">(li, val)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''循环二分 时间复杂度 O(logn)'''</span></span><br><span class=\"line\">    low = <span class=\"number\">0</span></span><br><span class=\"line\">    high = len(li) - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> low &lt;= high:</span><br><span class=\"line\">        mid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> li[mid] == val:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> li[mid] &lt; val:</span><br><span class=\"line\">            low = mid + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:  <span class=\"comment\"># &gt;</span></span><br><span class=\"line\">            high = mid - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br><span class=\"line\"><span class=\"comment\"># 5.6 µs ± 441 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 递归版本  递归需要切换进出栈</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bin_search_rec</span><span class=\"params\">(data_set,value,low,high)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">''' 尾递归 和 非递归的效率基本一样 '''</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> low &lt;= high:</span><br><span class=\"line\">        mid = (low+high) // <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> data_set[mid] == value:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> data_set[mid] &gt; value:</span><br><span class=\"line\">            <span class=\"comment\"># 尾递归不用切换出栈</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> bin_search_rec(data_set,value,low,mid<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> bin_search_rec(data_set,value,mid+<span class=\"number\">1</span>,high)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># %timeit l1.index(3200)</span></span><br><span class=\"line\"><span class=\"comment\"># l1.sort()   # 排序</span></span><br><span class=\"line\"><span class=\"comment\"># %timeit bin_search(l1,3200)</span></span><br><span class=\"line\">print(bin_search(l1,<span class=\"number\">4000</span>))</span><br></pre></td></tr></table></figure>\n<p>刷题：Letcode<br><a href=\"https://leetcode.com/problems/search-for-a-range/?tab=Description\" target=\"_blank\" rel=\"noopener\">34. Search for a Range (二分查找升级版)</a><br><a href=\"https://leetcode.com/problems/two-sum/?tab=Description\" target=\"_blank\" rel=\"noopener\">1. Two Sum</a></p>\n<h1 id=\"习题\"><a href=\"#习题\" class=\"headerlink\" title=\"习题\"></a>习题</h1><p>1  <a href=\"https://leetcode.com/problems/search-for-a-range/?tab=Description\" target=\"_blank\" rel=\"noopener\">34. Search for a Range (二分查找升级版)</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bin_search</span><span class=\"params\">(li, val)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''循环二分 时间复杂度 O(logn)'''</span></span><br><span class=\"line\">    low = <span class=\"number\">0</span></span><br><span class=\"line\">    high = len(li) - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> low &lt;= high:</span><br><span class=\"line\">        mid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> li[mid] == val:</span><br><span class=\"line\">            a = mid</span><br><span class=\"line\">            b = mid</span><br><span class=\"line\">            <span class=\"keyword\">while</span> li[a] = value <span class=\"keyword\">and</span> a &gt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">                a -= <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> li[b] = value <span class=\"keyword\">and</span> b &lt; len(li):    <span class=\"comment\"># b &lt;= len(li) - 1</span></span><br><span class=\"line\">                b += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> (a+<span class=\"number\">1</span>,b<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> li[mid] &lt; val:</span><br><span class=\"line\">            low = mid + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:  <span class=\"comment\"># &gt;</span></span><br><span class=\"line\">            high = mid - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br></pre></td></tr></table></figure>\n<p>2 . <a href=\"https://leetcode.com/problems/two-sum/?tab=Description\" target=\"_blank\" rel=\"noopener\">1. Two Sum</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">two_sum</span><span class=\"params\">(nums, target)</span>:</span></span><br><span class=\"line\">    l = len(nums)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(l):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(i+<span class=\"number\">1</span>,l):</span><br><span class=\"line\">            print(nums[i],nums[j])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[i] + nums[j] == target:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (i,j)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br><span class=\"line\">            </span><br><span class=\"line\">print(two_sum([<span class=\"number\">2</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">15</span>],<span class=\"number\">9</span>))</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bin_search</span><span class=\"params\">(data_set, value)</span>:</span></span><br><span class=\"line\">    low = <span class=\"number\">0</span></span><br><span class=\"line\">    high = len(data_set) - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> low &lt;= high:</span><br><span class=\"line\">        mid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> data_set[mid] == value:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> data_set[mid] &gt; value:</span><br><span class=\"line\">            high = mid - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            low = mid + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">two_sum_2</span><span class=\"params\">(li, target)</span>:</span></span><br><span class=\"line\">    li.sort()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(li)):</span><br><span class=\"line\">        b = target - li[i]</span><br><span class=\"line\">        j = bin_search(li, b)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> j != <span class=\"keyword\">None</span> <span class=\"keyword\">and</span> i != j:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i, j</span><br><span class=\"line\"></span><br><span class=\"line\">print(two_sum_2([<span class=\"number\">2</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>], <span class=\"number\">14</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">two_sum_3</span><span class=\"params\">(li, target)</span>:</span></span><br><span class=\"line\">    li.sort()   <span class=\"comment\"># nlogn</span></span><br><span class=\"line\">    i = <span class=\"number\">0</span></span><br><span class=\"line\">    j = len(li) - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> i&lt;j:</span><br><span class=\"line\">        sum = li[i]+li[j]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> sum &gt; target:</span><br><span class=\"line\">            j-=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> sum &lt; target:</span><br><span class=\"line\">            i+=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>: <span class=\"comment\">#sum==target</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> (i,j)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><p><a href=\"https://leetcode.com/problems/two-sum/?tab=Description\" target=\"_blank\" rel=\"noopener\">1. Two Sum</a> 如果是 3 个数 就把第一个数固定, 后面的列表用 two_sum_3 来计算</p>\n<blockquote>\n<p>如果这样时间复杂度<br>nlogn + n²<br>最终的时间复杂度是 n²</p>\n</blockquote>\n<p>如果用二分查找, 就需要先排序, 定住两个数, 排序(nlogn) + <code>定住两个数(n²)</code> <code>二分(n²logn)</code> 最终的复杂度是 <code>n²logn</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"顺序查找\"><a href=\"#顺序查找\" class=\"headerlink\" title=\"顺序查找\"></a>顺序查找</h1><ul>\n<li>从列表第一个元素开始，顺序进行搜索，直到找到为止。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">li = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">index(<span class=\"number\">1</span>)    <span class=\"comment\"># 顺序查找</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 顺序查找 ipython  O(n) 复杂度</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\">n = <span class=\"number\">10000</span></span><br><span class=\"line\">li = list(range(n))</span><br><span class=\"line\">random.shuffle(li)</span><br><span class=\"line\">%timeit li.index(<span class=\"number\">3200</span>)</span><br><span class=\"line\"><span class=\"comment\">#221 µs ± 11.1 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h1><blockquote>\n<p>只能用于有序列表</p>\n</blockquote>\n<p>从有序列表的候选区<code>data[0:n]</code>开始，通过对待查找的值与候选区中间值的比较，可以使候选区减少一半。<code>O(logn)</code> 复杂度</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 二分查找</span></span><br><span class=\"line\"><span class=\"comment\"># 循环版本</span></span><br><span class=\"line\"><span class=\"comment\"># def bin_search(li,low,high):</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bin_search</span><span class=\"params\">(li, val)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''循环二分 时间复杂度 O(logn)'''</span></span><br><span class=\"line\">    low = <span class=\"number\">0</span></span><br><span class=\"line\">    high = len(li) - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> low &lt;= high:</span><br><span class=\"line\">        mid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> li[mid] == val:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> li[mid] &lt; val:</span><br><span class=\"line\">            low = mid + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:  <span class=\"comment\"># &gt;</span></span><br><span class=\"line\">            high = mid - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br><span class=\"line\"><span class=\"comment\"># 5.6 µs ± 441 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 递归版本  递归需要切换进出栈</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bin_search_rec</span><span class=\"params\">(data_set,value,low,high)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">''' 尾递归 和 非递归的效率基本一样 '''</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> low &lt;= high:</span><br><span class=\"line\">        mid = (low+high) // <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> data_set[mid] == value:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> data_set[mid] &gt; value:</span><br><span class=\"line\">            <span class=\"comment\"># 尾递归不用切换出栈</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> bin_search_rec(data_set,value,low,mid<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> bin_search_rec(data_set,value,mid+<span class=\"number\">1</span>,high)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># %timeit l1.index(3200)</span></span><br><span class=\"line\"><span class=\"comment\"># l1.sort()   # 排序</span></span><br><span class=\"line\"><span class=\"comment\"># %timeit bin_search(l1,3200)</span></span><br><span class=\"line\">print(bin_search(l1,<span class=\"number\">4000</span>))</span><br></pre></td></tr></table></figure>\n<p>刷题：Letcode<br><a href=\"https://leetcode.com/problems/search-for-a-range/?tab=Description\" target=\"_blank\" rel=\"noopener\">34. Search for a Range (二分查找升级版)</a><br><a href=\"https://leetcode.com/problems/two-sum/?tab=Description\" target=\"_blank\" rel=\"noopener\">1. Two Sum</a></p>\n<h1 id=\"习题\"><a href=\"#习题\" class=\"headerlink\" title=\"习题\"></a>习题</h1><p>1  <a href=\"https://leetcode.com/problems/search-for-a-range/?tab=Description\" target=\"_blank\" rel=\"noopener\">34. Search for a Range (二分查找升级版)</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bin_search</span><span class=\"params\">(li, val)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''循环二分 时间复杂度 O(logn)'''</span></span><br><span class=\"line\">    low = <span class=\"number\">0</span></span><br><span class=\"line\">    high = len(li) - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> low &lt;= high:</span><br><span class=\"line\">        mid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> li[mid] == val:</span><br><span class=\"line\">            a = mid</span><br><span class=\"line\">            b = mid</span><br><span class=\"line\">            <span class=\"keyword\">while</span> li[a] = value <span class=\"keyword\">and</span> a &gt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">                a -= <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> li[b] = value <span class=\"keyword\">and</span> b &lt; len(li):    <span class=\"comment\"># b &lt;= len(li) - 1</span></span><br><span class=\"line\">                b += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> (a+<span class=\"number\">1</span>,b<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> li[mid] &lt; val:</span><br><span class=\"line\">            low = mid + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:  <span class=\"comment\"># &gt;</span></span><br><span class=\"line\">            high = mid - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br></pre></td></tr></table></figure>\n<p>2 . <a href=\"https://leetcode.com/problems/two-sum/?tab=Description\" target=\"_blank\" rel=\"noopener\">1. Two Sum</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">two_sum</span><span class=\"params\">(nums, target)</span>:</span></span><br><span class=\"line\">    l = len(nums)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(l):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(i+<span class=\"number\">1</span>,l):</span><br><span class=\"line\">            print(nums[i],nums[j])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[i] + nums[j] == target:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (i,j)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br><span class=\"line\">            </span><br><span class=\"line\">print(two_sum([<span class=\"number\">2</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">15</span>],<span class=\"number\">9</span>))</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bin_search</span><span class=\"params\">(data_set, value)</span>:</span></span><br><span class=\"line\">    low = <span class=\"number\">0</span></span><br><span class=\"line\">    high = len(data_set) - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> low &lt;= high:</span><br><span class=\"line\">        mid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> data_set[mid] == value:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> data_set[mid] &gt; value:</span><br><span class=\"line\">            high = mid - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            low = mid + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">two_sum_2</span><span class=\"params\">(li, target)</span>:</span></span><br><span class=\"line\">    li.sort()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(li)):</span><br><span class=\"line\">        b = target - li[i]</span><br><span class=\"line\">        j = bin_search(li, b)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> j != <span class=\"keyword\">None</span> <span class=\"keyword\">and</span> i != j:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i, j</span><br><span class=\"line\"></span><br><span class=\"line\">print(two_sum_2([<span class=\"number\">2</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>], <span class=\"number\">14</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">two_sum_3</span><span class=\"params\">(li, target)</span>:</span></span><br><span class=\"line\">    li.sort()   <span class=\"comment\"># nlogn</span></span><br><span class=\"line\">    i = <span class=\"number\">0</span></span><br><span class=\"line\">    j = len(li) - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> i&lt;j:</span><br><span class=\"line\">        sum = li[i]+li[j]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> sum &gt; target:</span><br><span class=\"line\">            j-=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> sum &lt; target:</span><br><span class=\"line\">            i+=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>: <span class=\"comment\">#sum==target</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> (i,j)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><p><a href=\"https://leetcode.com/problems/two-sum/?tab=Description\" target=\"_blank\" rel=\"noopener\">1. Two Sum</a> 如果是 3 个数 就把第一个数固定, 后面的列表用 two_sum_3 来计算</p>\n<blockquote>\n<p>如果这样时间复杂度<br>nlogn + n²<br>最终的时间复杂度是 n²</p>\n</blockquote>\n<p>如果用二分查找, 就需要先排序, 定住两个数, 排序(nlogn) + <code>定住两个数(n²)</code> <code>二分(n²logn)</code> 最终的复杂度是 <code>n²logn</code></p>"},{"title":"node-express","date":"2018-03-31T15:57:03.000Z","keywords":null,"description":null,"_content":"\n需要用`node`写`api`，狗哥说`express`比较合适。\ncome on.\n\n<!-- more -->\n\n# hello world\n\n\n```js\nnpm install -g express  //安装 express\nnpm install -g express-generator    //安装 express 命令行工具\nexpress -V  // 版本\n```\n\n`npm list express` 查看版本\n\n## 导入\n\n```js\nvar express    = require('express');    // 导入 express\nvar router = express.Router();\n```\n\n## 路由映射\n\n```js\nvar router = express.Router();  // 接上文\n\n// 子路由 关系对应 req: 用户请求 res:响应用户\nrouter.get('/', function(req, res) {\n  res.send('<h1>Hello World</h1>'); // 回应内容\n});\n\napp.use('/home', router);   // app 对应的路径\n```\n\n## 端口\n\n```js\nvar port = process.env.PORT || 8080;    // 服务端口\n\napp.listen(port);   // 监听端口\nconsole.log('Magic happens on port ' + port);   // 输出文字\n```\n\n## 启动\n\n```sh\nnode app1.js\n# 指定端口启动 bash\n# Linux & Mac\nPORT=7070 node app1.js\n\n# windows\nset PORT=7070\nnode app1.js\n```\n\n\n# 进阶\n\n## 访问路径\n\n```js\n// :name 获取路径的参数\nrouter.get('/:name', function(req, res) {\n  // 获取访问的路由 如果加了 / 并且后面有字符就识别不出来\n  res.send('<h1>Hello ' + req.params.name + '</h1>');\n  // 获取路由上的参数 /?name=gou\n  // res.send('<h1>Hello ' + req.query.name + '</h1>');\n});\n```\n\n## 更多请求方式\n\n```\nvar bodyParser = require('body-parser');\napp.use(bodyParser.urlencoded({ extended: true }));\n```\n`body-parser`模块的作用，是对`POST`、`PUT`、`DELETE`等 HTTP 方法的数据体进行解析。`app.use`用来将这个模块加载到当前应用。有了这两句，就可以处理`POST`、`PUT`、`DELETE`等请求了。\n\n```js\n// post 映射\nrouter.post('/', function (req, res) {\n  var name = req.body.name; // 获取用户发来的 name 字段\n  res.json({message: 'Hello ' + name}); // 序列化返回给用户\n  // 如果字段不正确将返回 undefined\n});\n```\n\n## 中间件\n\n```js\n// 定义方式 next 下一个中间件\nrouter.use(function(req, res, next) {\n  console.log('There is a requesting.');    // 业务逻辑\n  next();\n});\n```\n\n# REST API\n\nREST API 的基本用法\n\n（1） 命令行进入`demos/rest-api-demo`目录，执行下面的命令。\n\n```bash\n$ npm install -S json-server\n```\n\n（2） 在项目根目录下，新建一个 JSON 文件`db.json`。\n\n```javascript\n{\n  \"posts\": [\n    { \"id\": 1, \"title\": \"json-server\", \"author\": \"typicode\" }\n  ],\n  \"comments\": [\n    { \"id\": 1, \"body\": \"some comment\", \"postId\": 1 }\n  ],\n  \"profile\": { \"name\": \"typicode\" }\n}\n```\n\n（3） 打开`package.json`，在`scripts`字段添加一行。\n\n```javascript\n\"scripts\": {\n  \"server\": \"json-server db.json\",\n  \"test\": \"...\"\n},\n```\n\n（4） 命令行下执行下面的命令，启动服务。\n\n```bash\n$ npm run server\n```\n\n（5）打开 Chrome 浏览器的 Postman 应用。依次向`http://127.0.0.1:3000/posts`、`http://127.0.0.1:3000/posts/1`发出`GET`请求，查看结果。\n\n（6）向`http://127.0.0.1:3000/comments`发出`POST`请求。注意，数据体`Body`要选择`x-www-form-urlencoded`编码，然后依次添加下面两个字段。\n\n```javascript\nbody: \"hello world\"\npostId: 1\n```\n\n发出该请求后，再向`http://127.0.0.1:3000/comments`发出`GET`请求，查看结果。\n\n（7） 向`http://127.0.0.1:3000/comments/2`发出`PUT`请求，数据体`Body`要选择`x-www-form-urlencoded`编码，然后添加下面的字段。\n\n```javascript\nbody: \"hello react\"\n```\n\n发出该请求后，再向`http://127.0.0.1:3000/comments`发出`GET`请求，查看结果。\n\n（8）向`http://127.0.0.1:3000/comments/2`发出`delete`请求。\n\n发出该请求后，再向`http://127.0.0.1:3000/comments`发出`GET`请求，查看结果。\n\n\n# 参考\n- https://github.com/ruanyf/jstraining/blob/master/demos/README.md#rest-api\n- https://github.com/ruanyf/jstraining/blob/master/demos/README.md#express\n\n","source":"_posts/node-express.md","raw":"---\ntitle: node-express\ndate: 2018-03-31 23:57:03\ntags: express\ncategories: node\nkeywords:\ndescription:\n---\n\n需要用`node`写`api`，狗哥说`express`比较合适。\ncome on.\n\n<!-- more -->\n\n# hello world\n\n\n```js\nnpm install -g express  //安装 express\nnpm install -g express-generator    //安装 express 命令行工具\nexpress -V  // 版本\n```\n\n`npm list express` 查看版本\n\n## 导入\n\n```js\nvar express    = require('express');    // 导入 express\nvar router = express.Router();\n```\n\n## 路由映射\n\n```js\nvar router = express.Router();  // 接上文\n\n// 子路由 关系对应 req: 用户请求 res:响应用户\nrouter.get('/', function(req, res) {\n  res.send('<h1>Hello World</h1>'); // 回应内容\n});\n\napp.use('/home', router);   // app 对应的路径\n```\n\n## 端口\n\n```js\nvar port = process.env.PORT || 8080;    // 服务端口\n\napp.listen(port);   // 监听端口\nconsole.log('Magic happens on port ' + port);   // 输出文字\n```\n\n## 启动\n\n```sh\nnode app1.js\n# 指定端口启动 bash\n# Linux & Mac\nPORT=7070 node app1.js\n\n# windows\nset PORT=7070\nnode app1.js\n```\n\n\n# 进阶\n\n## 访问路径\n\n```js\n// :name 获取路径的参数\nrouter.get('/:name', function(req, res) {\n  // 获取访问的路由 如果加了 / 并且后面有字符就识别不出来\n  res.send('<h1>Hello ' + req.params.name + '</h1>');\n  // 获取路由上的参数 /?name=gou\n  // res.send('<h1>Hello ' + req.query.name + '</h1>');\n});\n```\n\n## 更多请求方式\n\n```\nvar bodyParser = require('body-parser');\napp.use(bodyParser.urlencoded({ extended: true }));\n```\n`body-parser`模块的作用，是对`POST`、`PUT`、`DELETE`等 HTTP 方法的数据体进行解析。`app.use`用来将这个模块加载到当前应用。有了这两句，就可以处理`POST`、`PUT`、`DELETE`等请求了。\n\n```js\n// post 映射\nrouter.post('/', function (req, res) {\n  var name = req.body.name; // 获取用户发来的 name 字段\n  res.json({message: 'Hello ' + name}); // 序列化返回给用户\n  // 如果字段不正确将返回 undefined\n});\n```\n\n## 中间件\n\n```js\n// 定义方式 next 下一个中间件\nrouter.use(function(req, res, next) {\n  console.log('There is a requesting.');    // 业务逻辑\n  next();\n});\n```\n\n# REST API\n\nREST API 的基本用法\n\n（1） 命令行进入`demos/rest-api-demo`目录，执行下面的命令。\n\n```bash\n$ npm install -S json-server\n```\n\n（2） 在项目根目录下，新建一个 JSON 文件`db.json`。\n\n```javascript\n{\n  \"posts\": [\n    { \"id\": 1, \"title\": \"json-server\", \"author\": \"typicode\" }\n  ],\n  \"comments\": [\n    { \"id\": 1, \"body\": \"some comment\", \"postId\": 1 }\n  ],\n  \"profile\": { \"name\": \"typicode\" }\n}\n```\n\n（3） 打开`package.json`，在`scripts`字段添加一行。\n\n```javascript\n\"scripts\": {\n  \"server\": \"json-server db.json\",\n  \"test\": \"...\"\n},\n```\n\n（4） 命令行下执行下面的命令，启动服务。\n\n```bash\n$ npm run server\n```\n\n（5）打开 Chrome 浏览器的 Postman 应用。依次向`http://127.0.0.1:3000/posts`、`http://127.0.0.1:3000/posts/1`发出`GET`请求，查看结果。\n\n（6）向`http://127.0.0.1:3000/comments`发出`POST`请求。注意，数据体`Body`要选择`x-www-form-urlencoded`编码，然后依次添加下面两个字段。\n\n```javascript\nbody: \"hello world\"\npostId: 1\n```\n\n发出该请求后，再向`http://127.0.0.1:3000/comments`发出`GET`请求，查看结果。\n\n（7） 向`http://127.0.0.1:3000/comments/2`发出`PUT`请求，数据体`Body`要选择`x-www-form-urlencoded`编码，然后添加下面的字段。\n\n```javascript\nbody: \"hello react\"\n```\n\n发出该请求后，再向`http://127.0.0.1:3000/comments`发出`GET`请求，查看结果。\n\n（8）向`http://127.0.0.1:3000/comments/2`发出`delete`请求。\n\n发出该请求后，再向`http://127.0.0.1:3000/comments`发出`GET`请求，查看结果。\n\n\n# 参考\n- https://github.com/ruanyf/jstraining/blob/master/demos/README.md#rest-api\n- https://github.com/ruanyf/jstraining/blob/master/demos/README.md#express\n\n","slug":"node-express","published":1,"updated":"2018-04-01T13:23:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfgx5ox60014mxgo7vcbdhpk","content":"<p>需要用<code>node</code>写<code>api</code>，狗哥说<code>express</code>比较合适。<br>come on.</p>\n<a id=\"more\"></a>\n<h1 id=\"hello-world\"><a href=\"#hello-world\" class=\"headerlink\" title=\"hello world\"></a>hello world</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g express  <span class=\"comment\">//安装 express</span></span><br><span class=\"line\">npm install -g express-generator    <span class=\"comment\">//安装 express 命令行工具</span></span><br><span class=\"line\">express -V  <span class=\"comment\">// 版本</span></span><br></pre></td></tr></table></figure>\n<p><code>npm list express</code> 查看版本</p>\n<h2 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express    = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);    <span class=\"comment\">// 导入 express</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</span><br></pre></td></tr></table></figure>\n<h2 id=\"路由映射\"><a href=\"#路由映射\" class=\"headerlink\" title=\"路由映射\"></a>路由映射</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> router = express.Router();  <span class=\"comment\">// 接上文</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子路由 关系对应 req: 用户请求 res:响应用户</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'&lt;h1&gt;Hello World&lt;/h1&gt;'</span>); <span class=\"comment\">// 回应内容</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"string\">'/home'</span>, router);   <span class=\"comment\">// app 对应的路径</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"端口\"><a href=\"#端口\" class=\"headerlink\" title=\"端口\"></a>端口</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> port = process.env.PORT || <span class=\"number\">8080</span>;    <span class=\"comment\">// 服务端口</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(port);   <span class=\"comment\">// 监听端口</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Magic happens on port '</span> + port);   <span class=\"comment\">// 输出文字</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node app1.js</span><br><span class=\"line\"><span class=\"comment\"># 指定端口启动 bash</span></span><br><span class=\"line\"><span class=\"comment\"># Linux &amp; Mac</span></span><br><span class=\"line\">PORT=7070 node app1.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># windows</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> PORT=7070</span><br><span class=\"line\">node app1.js</span><br></pre></td></tr></table></figure>\n<h1 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h1><h2 id=\"访问路径\"><a href=\"#访问路径\" class=\"headerlink\" title=\"访问路径\"></a>访问路径</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// :name 获取路径的参数</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/:name'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取访问的路由 如果加了 / 并且后面有字符就识别不出来</span></span><br><span class=\"line\">  res.send(<span class=\"string\">'&lt;h1&gt;Hello '</span> + req.params.name + <span class=\"string\">'&lt;/h1&gt;'</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 获取路由上的参数 /?name=gou</span></span><br><span class=\"line\">  <span class=\"comment\">// res.send('&lt;h1&gt;Hello ' + req.query.name + '&lt;/h1&gt;');</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"更多请求方式\"><a href=\"#更多请求方式\" class=\"headerlink\" title=\"更多请求方式\"></a>更多请求方式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123; extended: true &#125;));</span><br></pre></td></tr></table></figure>\n<p><code>body-parser</code>模块的作用，是对<code>POST</code>、<code>PUT</code>、<code>DELETE</code>等 HTTP 方法的数据体进行解析。<code>app.use</code>用来将这个模块加载到当前应用。有了这两句，就可以处理<code>POST</code>、<code>PUT</code>、<code>DELETE</code>等请求了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// post 映射</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = req.body.name; <span class=\"comment\">// 获取用户发来的 name 字段</span></span><br><span class=\"line\">  res.json(&#123;<span class=\"attr\">message</span>: <span class=\"string\">'Hello '</span> + name&#125;); <span class=\"comment\">// 序列化返回给用户</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果字段不正确将返回 undefined</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义方式 next 下一个中间件</span></span><br><span class=\"line\">router.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'There is a requesting.'</span>);    <span class=\"comment\">// 业务逻辑</span></span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"REST-API\"><a href=\"#REST-API\" class=\"headerlink\" title=\"REST API\"></a>REST API</h1><p>REST API 的基本用法</p>\n<p>（1） 命令行进入<code>demos/rest-api-demo</code>目录，执行下面的命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -S json-server</span><br></pre></td></tr></table></figure>\n<p>（2） 在项目根目录下，新建一个 JSON 文件<code>db.json</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"posts\"</span>: [</span><br><span class=\"line\">    &#123; <span class=\"string\">\"id\"</span>: <span class=\"number\">1</span>, <span class=\"string\">\"title\"</span>: <span class=\"string\">\"json-server\"</span>, <span class=\"string\">\"author\"</span>: <span class=\"string\">\"typicode\"</span> &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">\"comments\"</span>: [</span><br><span class=\"line\">    &#123; <span class=\"string\">\"id\"</span>: <span class=\"number\">1</span>, <span class=\"string\">\"body\"</span>: <span class=\"string\">\"some comment\"</span>, <span class=\"string\">\"postId\"</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">\"profile\"</span>: &#123; <span class=\"string\">\"name\"</span>: <span class=\"string\">\"typicode\"</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（3） 打开<code>package.json</code>，在<code>scripts</code>字段添加一行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"server\"</span>: <span class=\"string\">\"json-server db.json\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"test\"</span>: <span class=\"string\">\"...\"</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>（4） 命令行下执行下面的命令，启动服务。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm run server</span><br></pre></td></tr></table></figure>\n<p>（5）打开 Chrome 浏览器的 Postman 应用。依次向<code>http://127.0.0.1:3000/posts</code>、<code>http://127.0.0.1:3000/posts/1</code>发出<code>GET</code>请求，查看结果。</p>\n<p>（6）向<code>http://127.0.0.1:3000/comments</code>发出<code>POST</code>请求。注意，数据体<code>Body</code>要选择<code>x-www-form-urlencoded</code>编码，然后依次添加下面两个字段。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body: <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">postId: <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>发出该请求后，再向<code>http://127.0.0.1:3000/comments</code>发出<code>GET</code>请求，查看结果。</p>\n<p>（7） 向<code>http://127.0.0.1:3000/comments/2</code>发出<code>PUT</code>请求，数据体<code>Body</code>要选择<code>x-www-form-urlencoded</code>编码，然后添加下面的字段。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body: <span class=\"string\">\"hello react\"</span></span><br></pre></td></tr></table></figure>\n<p>发出该请求后，再向<code>http://127.0.0.1:3000/comments</code>发出<code>GET</code>请求，查看结果。</p>\n<p>（8）向<code>http://127.0.0.1:3000/comments/2</code>发出<code>delete</code>请求。</p>\n<p>发出该请求后，再向<code>http://127.0.0.1:3000/comments</code>发出<code>GET</code>请求，查看结果。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://github.com/ruanyf/jstraining/blob/master/demos/README.md#rest-api\" target=\"_blank\" rel=\"noopener\">https://github.com/ruanyf/jstraining/blob/master/demos/README.md#rest-api</a></li>\n<li><a href=\"https://github.com/ruanyf/jstraining/blob/master/demos/README.md#express\" target=\"_blank\" rel=\"noopener\">https://github.com/ruanyf/jstraining/blob/master/demos/README.md#express</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>需要用<code>node</code>写<code>api</code>，狗哥说<code>express</code>比较合适。<br>come on.</p>","more":"<h1 id=\"hello-world\"><a href=\"#hello-world\" class=\"headerlink\" title=\"hello world\"></a>hello world</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g express  <span class=\"comment\">//安装 express</span></span><br><span class=\"line\">npm install -g express-generator    <span class=\"comment\">//安装 express 命令行工具</span></span><br><span class=\"line\">express -V  <span class=\"comment\">// 版本</span></span><br></pre></td></tr></table></figure>\n<p><code>npm list express</code> 查看版本</p>\n<h2 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express    = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);    <span class=\"comment\">// 导入 express</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</span><br></pre></td></tr></table></figure>\n<h2 id=\"路由映射\"><a href=\"#路由映射\" class=\"headerlink\" title=\"路由映射\"></a>路由映射</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> router = express.Router();  <span class=\"comment\">// 接上文</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子路由 关系对应 req: 用户请求 res:响应用户</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'&lt;h1&gt;Hello World&lt;/h1&gt;'</span>); <span class=\"comment\">// 回应内容</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"string\">'/home'</span>, router);   <span class=\"comment\">// app 对应的路径</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"端口\"><a href=\"#端口\" class=\"headerlink\" title=\"端口\"></a>端口</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> port = process.env.PORT || <span class=\"number\">8080</span>;    <span class=\"comment\">// 服务端口</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(port);   <span class=\"comment\">// 监听端口</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Magic happens on port '</span> + port);   <span class=\"comment\">// 输出文字</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node app1.js</span><br><span class=\"line\"><span class=\"comment\"># 指定端口启动 bash</span></span><br><span class=\"line\"><span class=\"comment\"># Linux &amp; Mac</span></span><br><span class=\"line\">PORT=7070 node app1.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># windows</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> PORT=7070</span><br><span class=\"line\">node app1.js</span><br></pre></td></tr></table></figure>\n<h1 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h1><h2 id=\"访问路径\"><a href=\"#访问路径\" class=\"headerlink\" title=\"访问路径\"></a>访问路径</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// :name 获取路径的参数</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/:name'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取访问的路由 如果加了 / 并且后面有字符就识别不出来</span></span><br><span class=\"line\">  res.send(<span class=\"string\">'&lt;h1&gt;Hello '</span> + req.params.name + <span class=\"string\">'&lt;/h1&gt;'</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 获取路由上的参数 /?name=gou</span></span><br><span class=\"line\">  <span class=\"comment\">// res.send('&lt;h1&gt;Hello ' + req.query.name + '&lt;/h1&gt;');</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"更多请求方式\"><a href=\"#更多请求方式\" class=\"headerlink\" title=\"更多请求方式\"></a>更多请求方式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123; extended: true &#125;));</span><br></pre></td></tr></table></figure>\n<p><code>body-parser</code>模块的作用，是对<code>POST</code>、<code>PUT</code>、<code>DELETE</code>等 HTTP 方法的数据体进行解析。<code>app.use</code>用来将这个模块加载到当前应用。有了这两句，就可以处理<code>POST</code>、<code>PUT</code>、<code>DELETE</code>等请求了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// post 映射</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = req.body.name; <span class=\"comment\">// 获取用户发来的 name 字段</span></span><br><span class=\"line\">  res.json(&#123;<span class=\"attr\">message</span>: <span class=\"string\">'Hello '</span> + name&#125;); <span class=\"comment\">// 序列化返回给用户</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果字段不正确将返回 undefined</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义方式 next 下一个中间件</span></span><br><span class=\"line\">router.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'There is a requesting.'</span>);    <span class=\"comment\">// 业务逻辑</span></span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"REST-API\"><a href=\"#REST-API\" class=\"headerlink\" title=\"REST API\"></a>REST API</h1><p>REST API 的基本用法</p>\n<p>（1） 命令行进入<code>demos/rest-api-demo</code>目录，执行下面的命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -S json-server</span><br></pre></td></tr></table></figure>\n<p>（2） 在项目根目录下，新建一个 JSON 文件<code>db.json</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"posts\"</span>: [</span><br><span class=\"line\">    &#123; <span class=\"string\">\"id\"</span>: <span class=\"number\">1</span>, <span class=\"string\">\"title\"</span>: <span class=\"string\">\"json-server\"</span>, <span class=\"string\">\"author\"</span>: <span class=\"string\">\"typicode\"</span> &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">\"comments\"</span>: [</span><br><span class=\"line\">    &#123; <span class=\"string\">\"id\"</span>: <span class=\"number\">1</span>, <span class=\"string\">\"body\"</span>: <span class=\"string\">\"some comment\"</span>, <span class=\"string\">\"postId\"</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">\"profile\"</span>: &#123; <span class=\"string\">\"name\"</span>: <span class=\"string\">\"typicode\"</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（3） 打开<code>package.json</code>，在<code>scripts</code>字段添加一行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"server\"</span>: <span class=\"string\">\"json-server db.json\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"test\"</span>: <span class=\"string\">\"...\"</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>（4） 命令行下执行下面的命令，启动服务。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm run server</span><br></pre></td></tr></table></figure>\n<p>（5）打开 Chrome 浏览器的 Postman 应用。依次向<code>http://127.0.0.1:3000/posts</code>、<code>http://127.0.0.1:3000/posts/1</code>发出<code>GET</code>请求，查看结果。</p>\n<p>（6）向<code>http://127.0.0.1:3000/comments</code>发出<code>POST</code>请求。注意，数据体<code>Body</code>要选择<code>x-www-form-urlencoded</code>编码，然后依次添加下面两个字段。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body: <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">postId: <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>发出该请求后，再向<code>http://127.0.0.1:3000/comments</code>发出<code>GET</code>请求，查看结果。</p>\n<p>（7） 向<code>http://127.0.0.1:3000/comments/2</code>发出<code>PUT</code>请求，数据体<code>Body</code>要选择<code>x-www-form-urlencoded</code>编码，然后添加下面的字段。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body: <span class=\"string\">\"hello react\"</span></span><br></pre></td></tr></table></figure>\n<p>发出该请求后，再向<code>http://127.0.0.1:3000/comments</code>发出<code>GET</code>请求，查看结果。</p>\n<p>（8）向<code>http://127.0.0.1:3000/comments/2</code>发出<code>delete</code>请求。</p>\n<p>发出该请求后，再向<code>http://127.0.0.1:3000/comments</code>发出<code>GET</code>请求，查看结果。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://github.com/ruanyf/jstraining/blob/master/demos/README.md#rest-api\" target=\"_blank\" rel=\"noopener\">https://github.com/ruanyf/jstraining/blob/master/demos/README.md#rest-api</a></li>\n<li><a href=\"https://github.com/ruanyf/jstraining/blob/master/demos/README.md#express\" target=\"_blank\" rel=\"noopener\">https://github.com/ruanyf/jstraining/blob/master/demos/README.md#express</a></li>\n</ul>"},{"title":"linux 权限","date":"2017-05-24T11:41:31.000Z","keywords":"权限","description":"权限是操作系统用来限制资源访问的机制，权限一般分为读、写、执行。","_content":"\n\n系统中每个文件都拥有特定的权限、所属用户及所属组，通过这样的机制来限制哪些用户、哪些组可以对特定的文件进行什么样的操作。\n\n每个进程都是以某个用户的身份运行，所以进程的权限与该用户的权限一样，用户的权限越大，该进程所拥有的权限也就越大。\n\n<!-- more -->\n\n```sh\ndrwxr-xr-x  22 hyhnm  staff   748B  2 24 19:41 .\ndrwxr-xr-x   9 hyhnm  staff   306B 12 27 19:22 ..\n-rw-r--r--@  1 hyhnm  staff   913B 12 20 21:18 Charles-Response-error.md\n-rw-r--r--@  1 hyhnm  staff   895B  2  1 14:59 GV-python-api.md\n-rw-r--r--@  1 hyhnm  staff   1.0K  1  4 11:57 Phantomjs.md\n```\n\n```sh\nll -dl /test # 查看指定目录权限\nll a.txt # 指定文件权限\n```\n\n\n# 文件标识符\n\n`drwxr-xr-x` `d`代表的是目录\n`-rwxr-xr-x` `-`代表的是普通文件\n`lrwxr-xr-x` `l`代表的是符号链接（快捷方式）\n`crw-rw-rw-` `c`代表的是专门设备文件\n`brw-r-----` `b`代表的是块专门设备文件\n`srwxr-xr-x` `s`代表的是套接字\n`prwxr-xr-x` `p`代表的是命名管道文件\n\n\n# 权限标识\n\n权限三个一组（rwx），对应 UGO 分别设置（总共有 3 个组 9 个权限）\n\n| 可读 r | 可写 w |  可执行x |\n| --- | --- | --- |\n| 4 | 2 | 1 |\n\nrwx rwx rwx = 777\n\n| rwx | rwx | rwx |\n| --- | --- | --- |\n| 属主 U | 属组 G | 其他人 O |\n\nLinux 权限基于 UGO 模型进行控制：U 代表 User，是文件或文件夹所属用户的权限；G 代表 Group，是文件或文件夹所属组的权限；O 代表 Other，是其他用户对文件或文件夹的权限\n\n![](https://i.imgur.com/Mt3Z2rm.jpg)\n\n\n\n# 修改权限\n\n命令 `chmod` 用以修改文件的权限：\n\n示例：`chmod 777`\n\n**mode 参数格式如下：**\n\n```\nu、g、o     分别代表用户、组、其他\na           代表ugo\n+、-        代表加入或删除对应权限\nr、w、x     代表三种权限\n-R          递归地修改\n```\n\n**示例：**\n\n```\nchmod u +rw test.md    给文件的所属用户添加rw权限\nchmod g -x test.md     给文件的所属组移除x权限\nchmod go +r test.md    给文件的所属组和其他用户添加r权限\nchmod a -x test.md     给文件的所属UGO三个模型均移除x权限\nchmod u=rw,g=-,o=rwx test.md\n```\n\n命令 chmod 也支持以三位八进制数值的方式修改权限，rwx 权限值分别由数字表示如下：\n\n```\nr = 4 (2 ^ 2)\nw = 2 (2 ^ 1)\nx = 1 (2 ^ 0)\n```\n使用数字表示权限时，每组权限分别为对应数字之和：\n\n```\nrw  = 4 + 2 = 6\nrwx = 4 + 2 + 1 = 7\nr-x = 4 + 1 = 5\n```\n所以，使用数字表示 UGO 权限时，可以用如下方式表示：\n\n```\nchmod 0660 test.md  设置 UGO 权限为 rw-rw----\nchmod 0775 test.md  设置 UGO 权限为 rwxrwxr-x\n```\n\n# 修改文件所属用户和组\n命令 chown 用以改变文件的所属用户：\n\n```sh\nchown username filename\n```\n常用参数：\n\n```\n-R   归地修改目录下所有文件的所属用户\n```\n命令 chgrp 用以改变文件的所属组：\n\n```sh\nchgrp groupname filename\n```\n常用参数：\n\n```\n-R   递归地修改目录下所有文件的所属组\n```\n\n\n# 实例\n如何修改文件的拥有者的权限为可读可写不可执行？\n\n```sh\nchmod u=rw <file name>\n```\n\n# 总结\n\n- 文件\n    - read：查看文件内容\n    - write：修改文件内容\n    - x：执行文件（把文件当做命令一样执行）\n- 目录\n    - read：浏览目录下的子目录名，子文件名\n    - write：创建、重命名、删除主目录、子文件\n    - x：可以 cd 目录（有这个权限才可以修改目录下面的文件）\n\n# 参考\n- http://blog.sina.com.cn/s/blog_81aecb810102waaq.html\n- http://blog.csdn.net/qq_36221862/article/details/56012469\n- https://www.cnblogs.com/mingc/p/7591287.html\n- http://blog.csdn.net/fan_zhen_hua/article/details/2050009\n\n","source":"_posts/linux-permissions.md","raw":"---\ntitle: linux 权限\ndate: 2017-05-24 19:41:31\ntags:\ncategories: linux\nkeywords: 权限\ndescription: 权限是操作系统用来限制资源访问的机制，权限一般分为读、写、执行。\n---\n\n\n系统中每个文件都拥有特定的权限、所属用户及所属组，通过这样的机制来限制哪些用户、哪些组可以对特定的文件进行什么样的操作。\n\n每个进程都是以某个用户的身份运行，所以进程的权限与该用户的权限一样，用户的权限越大，该进程所拥有的权限也就越大。\n\n<!-- more -->\n\n```sh\ndrwxr-xr-x  22 hyhnm  staff   748B  2 24 19:41 .\ndrwxr-xr-x   9 hyhnm  staff   306B 12 27 19:22 ..\n-rw-r--r--@  1 hyhnm  staff   913B 12 20 21:18 Charles-Response-error.md\n-rw-r--r--@  1 hyhnm  staff   895B  2  1 14:59 GV-python-api.md\n-rw-r--r--@  1 hyhnm  staff   1.0K  1  4 11:57 Phantomjs.md\n```\n\n```sh\nll -dl /test # 查看指定目录权限\nll a.txt # 指定文件权限\n```\n\n\n# 文件标识符\n\n`drwxr-xr-x` `d`代表的是目录\n`-rwxr-xr-x` `-`代表的是普通文件\n`lrwxr-xr-x` `l`代表的是符号链接（快捷方式）\n`crw-rw-rw-` `c`代表的是专门设备文件\n`brw-r-----` `b`代表的是块专门设备文件\n`srwxr-xr-x` `s`代表的是套接字\n`prwxr-xr-x` `p`代表的是命名管道文件\n\n\n# 权限标识\n\n权限三个一组（rwx），对应 UGO 分别设置（总共有 3 个组 9 个权限）\n\n| 可读 r | 可写 w |  可执行x |\n| --- | --- | --- |\n| 4 | 2 | 1 |\n\nrwx rwx rwx = 777\n\n| rwx | rwx | rwx |\n| --- | --- | --- |\n| 属主 U | 属组 G | 其他人 O |\n\nLinux 权限基于 UGO 模型进行控制：U 代表 User，是文件或文件夹所属用户的权限；G 代表 Group，是文件或文件夹所属组的权限；O 代表 Other，是其他用户对文件或文件夹的权限\n\n![](https://i.imgur.com/Mt3Z2rm.jpg)\n\n\n\n# 修改权限\n\n命令 `chmod` 用以修改文件的权限：\n\n示例：`chmod 777`\n\n**mode 参数格式如下：**\n\n```\nu、g、o     分别代表用户、组、其他\na           代表ugo\n+、-        代表加入或删除对应权限\nr、w、x     代表三种权限\n-R          递归地修改\n```\n\n**示例：**\n\n```\nchmod u +rw test.md    给文件的所属用户添加rw权限\nchmod g -x test.md     给文件的所属组移除x权限\nchmod go +r test.md    给文件的所属组和其他用户添加r权限\nchmod a -x test.md     给文件的所属UGO三个模型均移除x权限\nchmod u=rw,g=-,o=rwx test.md\n```\n\n命令 chmod 也支持以三位八进制数值的方式修改权限，rwx 权限值分别由数字表示如下：\n\n```\nr = 4 (2 ^ 2)\nw = 2 (2 ^ 1)\nx = 1 (2 ^ 0)\n```\n使用数字表示权限时，每组权限分别为对应数字之和：\n\n```\nrw  = 4 + 2 = 6\nrwx = 4 + 2 + 1 = 7\nr-x = 4 + 1 = 5\n```\n所以，使用数字表示 UGO 权限时，可以用如下方式表示：\n\n```\nchmod 0660 test.md  设置 UGO 权限为 rw-rw----\nchmod 0775 test.md  设置 UGO 权限为 rwxrwxr-x\n```\n\n# 修改文件所属用户和组\n命令 chown 用以改变文件的所属用户：\n\n```sh\nchown username filename\n```\n常用参数：\n\n```\n-R   归地修改目录下所有文件的所属用户\n```\n命令 chgrp 用以改变文件的所属组：\n\n```sh\nchgrp groupname filename\n```\n常用参数：\n\n```\n-R   递归地修改目录下所有文件的所属组\n```\n\n\n# 实例\n如何修改文件的拥有者的权限为可读可写不可执行？\n\n```sh\nchmod u=rw <file name>\n```\n\n# 总结\n\n- 文件\n    - read：查看文件内容\n    - write：修改文件内容\n    - x：执行文件（把文件当做命令一样执行）\n- 目录\n    - read：浏览目录下的子目录名，子文件名\n    - write：创建、重命名、删除主目录、子文件\n    - x：可以 cd 目录（有这个权限才可以修改目录下面的文件）\n\n# 参考\n- http://blog.sina.com.cn/s/blog_81aecb810102waaq.html\n- http://blog.csdn.net/qq_36221862/article/details/56012469\n- https://www.cnblogs.com/mingc/p/7591287.html\n- http://blog.csdn.net/fan_zhen_hua/article/details/2050009\n\n","slug":"linux-permissions","published":1,"updated":"2018-04-01T13:23:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfgx5ox80017mxgo8pfshca6","content":"<p>系统中每个文件都拥有特定的权限、所属用户及所属组，通过这样的机制来限制哪些用户、哪些组可以对特定的文件进行什么样的操作。</p>\n<p>每个进程都是以某个用户的身份运行，所以进程的权限与该用户的权限一样，用户的权限越大，该进程所拥有的权限也就越大。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drwxr-xr-x  22 hyhnm  staff   748B  2 24 19:41 .</span><br><span class=\"line\">drwxr-xr-x   9 hyhnm  staff   306B 12 27 19:22 ..</span><br><span class=\"line\">-rw-r--r--@  1 hyhnm  staff   913B 12 20 21:18 Charles-Response-error.md</span><br><span class=\"line\">-rw-r--r--@  1 hyhnm  staff   895B  2  1 14:59 GV-python-api.md</span><br><span class=\"line\">-rw-r--r--@  1 hyhnm  staff   1.0K  1  4 11:57 Phantomjs.md</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ll -dl /<span class=\"built_in\">test</span> <span class=\"comment\"># 查看指定目录权限</span></span><br><span class=\"line\">ll a.txt <span class=\"comment\"># 指定文件权限</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"文件标识符\"><a href=\"#文件标识符\" class=\"headerlink\" title=\"文件标识符\"></a>文件标识符</h1><p><code>drwxr-xr-x</code> <code>d</code>代表的是目录<br><code>-rwxr-xr-x</code> <code>-</code>代表的是普通文件<br><code>lrwxr-xr-x</code> <code>l</code>代表的是符号链接（快捷方式）<br><code>crw-rw-rw-</code> <code>c</code>代表的是专门设备文件<br><code>brw-r-----</code> <code>b</code>代表的是块专门设备文件<br><code>srwxr-xr-x</code> <code>s</code>代表的是套接字<br><code>prwxr-xr-x</code> <code>p</code>代表的是命名管道文件</p>\n<h1 id=\"权限标识\"><a href=\"#权限标识\" class=\"headerlink\" title=\"权限标识\"></a>权限标识</h1><p>权限三个一组（rwx），对应 UGO 分别设置（总共有 3 个组 9 个权限）</p>\n<table>\n<thead>\n<tr>\n<th>可读 r</th>\n<th>可写 w</th>\n<th>可执行x</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>4</td>\n<td>2</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>rwx rwx rwx = 777</p>\n<table>\n<thead>\n<tr>\n<th>rwx</th>\n<th>rwx</th>\n<th>rwx</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>属主 U</td>\n<td>属组 G</td>\n<td>其他人 O</td>\n</tr>\n</tbody>\n</table>\n<p>Linux 权限基于 UGO 模型进行控制：U 代表 User，是文件或文件夹所属用户的权限；G 代表 Group，是文件或文件夹所属组的权限；O 代表 Other，是其他用户对文件或文件夹的权限</p>\n<p><img src=\"https://i.imgur.com/Mt3Z2rm.jpg\" alt=\"\"></p>\n<h1 id=\"修改权限\"><a href=\"#修改权限\" class=\"headerlink\" title=\"修改权限\"></a>修改权限</h1><p>命令 <code>chmod</code> 用以修改文件的权限：</p>\n<p>示例：<code>chmod 777</code></p>\n<p><strong>mode 参数格式如下：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">u、g、o     分别代表用户、组、其他</span><br><span class=\"line\">a           代表ugo</span><br><span class=\"line\">+、-        代表加入或删除对应权限</span><br><span class=\"line\">r、w、x     代表三种权限</span><br><span class=\"line\">-R          递归地修改</span><br></pre></td></tr></table></figure>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod u +rw test.md    给文件的所属用户添加rw权限</span><br><span class=\"line\">chmod g -x test.md     给文件的所属组移除x权限</span><br><span class=\"line\">chmod go +r test.md    给文件的所属组和其他用户添加r权限</span><br><span class=\"line\">chmod a -x test.md     给文件的所属UGO三个模型均移除x权限</span><br><span class=\"line\">chmod u=rw,g=-,o=rwx test.md</span><br></pre></td></tr></table></figure>\n<p>命令 chmod 也支持以三位八进制数值的方式修改权限，rwx 权限值分别由数字表示如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r = 4 (2 ^ 2)</span><br><span class=\"line\">w = 2 (2 ^ 1)</span><br><span class=\"line\">x = 1 (2 ^ 0)</span><br></pre></td></tr></table></figure>\n<p>使用数字表示权限时，每组权限分别为对应数字之和：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rw  = 4 + 2 = 6</span><br><span class=\"line\">rwx = 4 + 2 + 1 = 7</span><br><span class=\"line\">r-x = 4 + 1 = 5</span><br></pre></td></tr></table></figure>\n<p>所以，使用数字表示 UGO 权限时，可以用如下方式表示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 0660 test.md  设置 UGO 权限为 rw-rw----</span><br><span class=\"line\">chmod 0775 test.md  设置 UGO 权限为 rwxrwxr-x</span><br></pre></td></tr></table></figure>\n<h1 id=\"修改文件所属用户和组\"><a href=\"#修改文件所属用户和组\" class=\"headerlink\" title=\"修改文件所属用户和组\"></a>修改文件所属用户和组</h1><p>命令 chown 用以改变文件的所属用户：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown username filename</span><br></pre></td></tr></table></figure>\n<p>常用参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-R   归地修改目录下所有文件的所属用户</span><br></pre></td></tr></table></figure>\n<p>命令 chgrp 用以改变文件的所属组：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chgrp groupname filename</span><br></pre></td></tr></table></figure>\n<p>常用参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-R   递归地修改目录下所有文件的所属组</span><br></pre></td></tr></table></figure>\n<h1 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h1><p>如何修改文件的拥有者的权限为可读可写不可执行？</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod u=rw &lt;file name&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li>文件<ul>\n<li>read：查看文件内容</li>\n<li>write：修改文件内容</li>\n<li>x：执行文件（把文件当做命令一样执行）</li>\n</ul>\n</li>\n<li>目录<ul>\n<li>read：浏览目录下的子目录名，子文件名</li>\n<li>write：创建、重命名、删除主目录、子文件</li>\n<li>x：可以 cd 目录（有这个权限才可以修改目录下面的文件）</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://blog.sina.com.cn/s/blog_81aecb810102waaq.html\" target=\"_blank\" rel=\"noopener\">http://blog.sina.com.cn/s/blog_81aecb810102waaq.html</a></li>\n<li><a href=\"http://blog.csdn.net/qq_36221862/article/details/56012469\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/qq_36221862/article/details/56012469</a></li>\n<li><a href=\"https://www.cnblogs.com/mingc/p/7591287.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/mingc/p/7591287.html</a></li>\n<li><a href=\"http://blog.csdn.net/fan_zhen_hua/article/details/2050009\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/fan_zhen_hua/article/details/2050009</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>系统中每个文件都拥有特定的权限、所属用户及所属组，通过这样的机制来限制哪些用户、哪些组可以对特定的文件进行什么样的操作。</p>\n<p>每个进程都是以某个用户的身份运行，所以进程的权限与该用户的权限一样，用户的权限越大，该进程所拥有的权限也就越大。</p>","more":"<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drwxr-xr-x  22 hyhnm  staff   748B  2 24 19:41 .</span><br><span class=\"line\">drwxr-xr-x   9 hyhnm  staff   306B 12 27 19:22 ..</span><br><span class=\"line\">-rw-r--r--@  1 hyhnm  staff   913B 12 20 21:18 Charles-Response-error.md</span><br><span class=\"line\">-rw-r--r--@  1 hyhnm  staff   895B  2  1 14:59 GV-python-api.md</span><br><span class=\"line\">-rw-r--r--@  1 hyhnm  staff   1.0K  1  4 11:57 Phantomjs.md</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ll -dl /<span class=\"built_in\">test</span> <span class=\"comment\"># 查看指定目录权限</span></span><br><span class=\"line\">ll a.txt <span class=\"comment\"># 指定文件权限</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"文件标识符\"><a href=\"#文件标识符\" class=\"headerlink\" title=\"文件标识符\"></a>文件标识符</h1><p><code>drwxr-xr-x</code> <code>d</code>代表的是目录<br><code>-rwxr-xr-x</code> <code>-</code>代表的是普通文件<br><code>lrwxr-xr-x</code> <code>l</code>代表的是符号链接（快捷方式）<br><code>crw-rw-rw-</code> <code>c</code>代表的是专门设备文件<br><code>brw-r-----</code> <code>b</code>代表的是块专门设备文件<br><code>srwxr-xr-x</code> <code>s</code>代表的是套接字<br><code>prwxr-xr-x</code> <code>p</code>代表的是命名管道文件</p>\n<h1 id=\"权限标识\"><a href=\"#权限标识\" class=\"headerlink\" title=\"权限标识\"></a>权限标识</h1><p>权限三个一组（rwx），对应 UGO 分别设置（总共有 3 个组 9 个权限）</p>\n<table>\n<thead>\n<tr>\n<th>可读 r</th>\n<th>可写 w</th>\n<th>可执行x</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>4</td>\n<td>2</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>rwx rwx rwx = 777</p>\n<table>\n<thead>\n<tr>\n<th>rwx</th>\n<th>rwx</th>\n<th>rwx</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>属主 U</td>\n<td>属组 G</td>\n<td>其他人 O</td>\n</tr>\n</tbody>\n</table>\n<p>Linux 权限基于 UGO 模型进行控制：U 代表 User，是文件或文件夹所属用户的权限；G 代表 Group，是文件或文件夹所属组的权限；O 代表 Other，是其他用户对文件或文件夹的权限</p>\n<p><img src=\"https://i.imgur.com/Mt3Z2rm.jpg\" alt=\"\"></p>\n<h1 id=\"修改权限\"><a href=\"#修改权限\" class=\"headerlink\" title=\"修改权限\"></a>修改权限</h1><p>命令 <code>chmod</code> 用以修改文件的权限：</p>\n<p>示例：<code>chmod 777</code></p>\n<p><strong>mode 参数格式如下：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">u、g、o     分别代表用户、组、其他</span><br><span class=\"line\">a           代表ugo</span><br><span class=\"line\">+、-        代表加入或删除对应权限</span><br><span class=\"line\">r、w、x     代表三种权限</span><br><span class=\"line\">-R          递归地修改</span><br></pre></td></tr></table></figure>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod u +rw test.md    给文件的所属用户添加rw权限</span><br><span class=\"line\">chmod g -x test.md     给文件的所属组移除x权限</span><br><span class=\"line\">chmod go +r test.md    给文件的所属组和其他用户添加r权限</span><br><span class=\"line\">chmod a -x test.md     给文件的所属UGO三个模型均移除x权限</span><br><span class=\"line\">chmod u=rw,g=-,o=rwx test.md</span><br></pre></td></tr></table></figure>\n<p>命令 chmod 也支持以三位八进制数值的方式修改权限，rwx 权限值分别由数字表示如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r = 4 (2 ^ 2)</span><br><span class=\"line\">w = 2 (2 ^ 1)</span><br><span class=\"line\">x = 1 (2 ^ 0)</span><br></pre></td></tr></table></figure>\n<p>使用数字表示权限时，每组权限分别为对应数字之和：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rw  = 4 + 2 = 6</span><br><span class=\"line\">rwx = 4 + 2 + 1 = 7</span><br><span class=\"line\">r-x = 4 + 1 = 5</span><br></pre></td></tr></table></figure>\n<p>所以，使用数字表示 UGO 权限时，可以用如下方式表示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 0660 test.md  设置 UGO 权限为 rw-rw----</span><br><span class=\"line\">chmod 0775 test.md  设置 UGO 权限为 rwxrwxr-x</span><br></pre></td></tr></table></figure>\n<h1 id=\"修改文件所属用户和组\"><a href=\"#修改文件所属用户和组\" class=\"headerlink\" title=\"修改文件所属用户和组\"></a>修改文件所属用户和组</h1><p>命令 chown 用以改变文件的所属用户：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown username filename</span><br></pre></td></tr></table></figure>\n<p>常用参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-R   归地修改目录下所有文件的所属用户</span><br></pre></td></tr></table></figure>\n<p>命令 chgrp 用以改变文件的所属组：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chgrp groupname filename</span><br></pre></td></tr></table></figure>\n<p>常用参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-R   递归地修改目录下所有文件的所属组</span><br></pre></td></tr></table></figure>\n<h1 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h1><p>如何修改文件的拥有者的权限为可读可写不可执行？</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod u=rw &lt;file name&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li>文件<ul>\n<li>read：查看文件内容</li>\n<li>write：修改文件内容</li>\n<li>x：执行文件（把文件当做命令一样执行）</li>\n</ul>\n</li>\n<li>目录<ul>\n<li>read：浏览目录下的子目录名，子文件名</li>\n<li>write：创建、重命名、删除主目录、子文件</li>\n<li>x：可以 cd 目录（有这个权限才可以修改目录下面的文件）</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://blog.sina.com.cn/s/blog_81aecb810102waaq.html\" target=\"_blank\" rel=\"noopener\">http://blog.sina.com.cn/s/blog_81aecb810102waaq.html</a></li>\n<li><a href=\"http://blog.csdn.net/qq_36221862/article/details/56012469\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/qq_36221862/article/details/56012469</a></li>\n<li><a href=\"https://www.cnblogs.com/mingc/p/7591287.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/mingc/p/7591287.html</a></li>\n<li><a href=\"http://blog.csdn.net/fan_zhen_hua/article/details/2050009\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/fan_zhen_hua/article/details/2050009</a></li>\n</ul>"},{"title":"常用排序算法","date":"2017-12-22T07:22:38.000Z","keywords":null,"description":"冒泡排序、选择排序、插入排序、快速排序、堆排序、归并排序、计数排序、希尔排序","_content":"\n**重点:**\n\n- 有序区\n- 无序区\n\n# 冒泡排序（BUB）\n>列表每两个相邻的数, 如果前边的比后边的大, 那么交换这两个数\n\n**冒泡排序算法的流程如下：**\n\n1. 比较相邻的元素。如果第一个比第二个大，就交换他们两个。\n2. 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。\n3. 针对所有的元素重复以上的步骤，除了最后一个。\n4. 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。\n\n![冒泡排序](https://i.imgur.com/T0nk855.gif)\n\n**关键点:**  趟, 无序区\n\n## code\n\n```python\n# O(n²) 时间复杂度\ndef bubble_sort(li):\n    if len(li) <= 1:\n        return li\n    for i in range(len(li)-1): # i 是趟\n        for j in range(len(li)-i - 1): # j 是指针\n            if li[j] > li[j+1]:\n                li[j], li[j+1] = li[j+1] , li[j]\n    return li\nli = list(range(10000))\nimport random as rd\nrd.shuffle(li) # 打乱顺序\nprint(li)\nprint(bubble_sort(li))\n```\n## 优化版\n\n```python\ndef bubble_sort(li):\n    if len(li) <= 1:\n        return li\n    for i in range(len(li) - 1):  # i 是趟\n        exchange = Flase\n        for j in range(len(li) - i - 1):  # j 是指针\n            if li[j] > li[j + 1]:\n                li[j], li[j + 1] = li[j + 1], li[j]\n                exchange = True\n        if not exchange:\n            break\n    return li\n```\n\n| 空间时间复杂度 | O(1) |\n| --- | --- |\n| 最坏时间复杂度 | O(n²) |\n| 最优时间复杂度 | O(n) |\n| 平均时间复杂度 | O(n²) |\n\n\n# 选择排序（SEL）\n每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。\n![选择排序](https://i.imgur.com/Y7JK85g.gif)\n\n```python\ndef select_sort(li):\n    for i in range(len(li) - 1):  # i 是趟\n        min_doc = i\n        # 找i位置到最后位置范围内最小的数\n        for j in range(i, len(li)):  # i可以换成i+1,省去和自己比\n            if li[j] < li[min_doc]:\n                min_doc = j\n        # 和无序区第一个数作交换\n        # 可以加上 i==min_loc 的判断,省去和自己换\n        if min_doc != i:\n            li[min_doc], li[i] = li[i], li[min_doc]\n        '''\n        i, j, min_doc 都是下标\n        '''\n    return li\n```\n| 空间时间复杂度 | O(1) |\n| --- | --- |\n| 最坏时间复杂度 | O(n²) |\n| 最优时间复杂度 | O(n²) |\n| 平均时间复杂度 | O(n²) |\n\n\n# 插入排序（INS）\n插入排序每次取出数组后半部分的第一个元素，在排好序的前半部分中，为其找到最合适的位置并进行插入(扑克牌)\n![插入排序](https://i.imgur.com/UzdoF4Z.gif)\n\n- 列表被分为有序区和无序区两个部分。最初有序区只有一个元素。\n- 每次从无序区选择一个元素，插入到有序区的位置，直到无序区变空。\n\n**插入排序算法的流程如下：**\n\n1. 从第一个元素开始，该元素可以认为已经被排序\n2. 取出下一个元素，在已经排序的元素序列中从后向前扫描\n3. 如果该元素（已排序）大于新元素，将该元素移到下一位置\n4. 重复步骤 3，直到找到已排序的元素小于或者等于新元素的位置\n5. 将新元素插入到该位置后\n6. 重复步骤 2~5\n\n**关键点：**\n\n- 摸到的牌\n- 手里的牌 (有序)\n\n## code\n\n```python\ndef insert_sort(li):\n    if len(li) == 1:\n        return li\n    for i in range(1, len(li)):  # i代表每次摸到的牌的下标\n        tmp = li[i]\n        j = i - 1  # j代表手里最后一张牌的下标\n        while j >= 0 and tmp < li[j]: # 摸到的牌比手牌最后的牌小\n            li[j + 1] = li[j] # 把最大的手牌往后挪动\n            j -= 1\n        li[j + 1] = tmp # 摸到的牌比手牌最后的牌大\n    return li\n```\n\n| 空间时间复杂度 | O(1) |\n| --- | --- |\n| 最坏时间复杂度 | O(n²) |\n| 最优时间复杂度 | O(n²) |\n| 平均时间复杂度 | O(n²) |\n\n# 快速排序（QUI）\n博主看动图不是很理解, 建议看 [这里](http://bbs.ahalei.com/thread-4419-1-1.html)\n![快速排序](https://upload.wikimedia.org/wikipedia/commons/6/6a/Sorting_quicksort_anim.gif)\n![快速排序](https://i.imgur.com/mEG5lt2.gif)\n\n**快速排序算法的流程如下：**\n\n- 取一个元素p（第一个元素），使元素p归位；\n- 列表被p分成两部分，左边都比p小，右边都比p大；\n- 递归完成排序。\n\n**关键点：**\n\n- 整理(让元素归位)\n- 递归\n\n```python\ndef partition(data, left, right):\n    '''\n    partition:归位函数\n    右手左手一个慢动作\n    右手左手慢动作重播\n    '''\n    tmp = data[left] # 取基准数\n    while left < right:\n        # 如果需要降序排序的话, 就把 data[right] >= tmp 中的小于等于改为大于等于\n        while left < right and data[right] >= tmp:\n            right -= 1 # 左移\n        if left < right: # 如果上面的循环是因为找到了 right 小于 tmp 的数而跳出循环\n            data[left] = data[right] # 把小于 tmp 的这个元素放到 tmp 的位置上\n        # 如果需要降序排序的话, 就把 data[right] >= tmp 中的大于等于改为小于等于\n        while left < right and data[left] <= tmp:\n            left += 1 # 右移\n        data[right] = data[left] # 把大于 tmp 的这个元素放到 tmp 的位置上\n    data[left] = tmp # 那个 mid 回来\n    return left\n    \ndef _quick_sort(data, left, right):\n    if left < right:\n        mid = partition(data, left, right)\n        _quick_sort(data, left, mid - 1)\n        _quick_sort(data, mid + 1, right)\n\n@cal_time\ndef quick_sort(data):\n    return _quick_sort(data,0,len(data)-1)\n```\n## 优化版\n\n```python\n# 来自知乎 @风满楼\ndef quick_sort(lists, left, right):\n    if left > right:\n        return lists\n    low, high = left, right\n    key = lists[left]  # key即是基准数\n    while left < right:\n        while left < right and lists[right] >= key:\n            right -= 1 # 左移\n        lists[left] = lists[right] \n        while left < right and lists[left] <= key:\n            left += 1 # 右移\n        lists[right] = lists[left]\n    lists[right] = key\n    quick_sort(lists, low, left - 1)\n    quick_sort(lists, right + 1, high)\n    return lists\n\nquick(data,0,len(data)-1)\n```\n\n```python\n# 快排精简版\ndef quick(data):\n    if data == []:\n        return []\n    else:\n        pivot = data[0]\n        lesser = [x for x in data[1:] if x <= pivot]\n        greater = [x for x in data[1:] if x > pivot]\n    return quick(lesser) + [pivot] + quick(greater)\n```\n\n## 问题\n某些极端的情况下复杂度非常高, 如：\n\n```\n9 8 7 6 5 4 3 2 1\n```\n出现的概率不多, 属于极端情况, 解决方法: 选基准的时候随机选一个数与第一个数交换。\n\n| 空间时间复杂度 | 根据实现的方式不同而不同 |\n| --- | --- |\n| 最坏时间复杂度 | O(n²) |\n| 最优时间复杂度 | O(nlogn) |\n| 平均时间复杂度 | O(nlogn) |\n\nPS: 看到一个最狠的快排\n\n```python\n# https://github.com/qiwsir/algorithm/blob/master/quick_sort.md\nqs = lambda xs : ( (len(xs) <= 1 and [xs]) or [ qs( [x for x in xs[1:] if x < xs[0]] ) + [xs[0]] + qs( [x for x in xs[1:] if x >= xs[0]] ) ] )[0]\n```\n\n## 参考资料\n\n- [Ele - A面](http://ictar.github.io/2015/12/08/%E4%B9%9D%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%8F%8A%E5%85%B6Python%E5%AE%9E%E7%8E%B0%E4%B9%8B%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/)\n- <http://bbs.ahalei.com/thread-4419-1-1.html>\n- http://blog.csdn.net/v_july_v/article/details/6116297\n- https://www.zhihu.com/question/26786398\n- https://hellolynn.hpd.io/2017/08/03/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-quick-sort/\n- https://github.com/qiwsir/algorithm/blob/master/quick_sort.md\n\n# 堆排序（HEAP）\n堆排序用的是[树](/2017/12/data-structure-tree.html)的结构\n![树（数据结构）](https://i.imgur.com/JH2f8TO.jpg)\n\n## 堆\n- 大根堆：一棵完全二叉树，满足任一节点都比其孩子节点大\n- 小根堆：一棵完全二叉树，满足任一节点都比其孩子节点小\n\n![大小根堆](https://i.imgur.com/ShbrOiR.jpg)\n\n\n**假设：节点的左右子树都是堆，但自身不是堆**\n>当根节点的左右子树都是堆时，可以通过一次向下的调整来将其变换成一个堆。\n\n![调整](https://i.imgur.com/Vyt45u6.gif)\n\n**堆排序过程:**\n\n1. 建立堆\n2. 得到堆顶元素，为最大元素\n3. 去掉堆顶，将堆最后一个元素放到堆顶，此时可通过一次调整重新使堆有序。\n4. 堆顶元素为第二大元素。\n5. 重复步骤3，直到堆变空。\n\n- 构建堆\n\n先从最小的子树开始看, 最后一步看整个的堆; 从最后一个非叶子节点为根的子树开始做调整\n![构建堆](https://i.imgur.com/VF7ia3X.gif)\n\n- 挨个出数\n\n![挨个出数](https://i.imgur.com/4fYb7L4.gif)\n\n\n## code\n\n```python\ndef sift(data, low, high):\n    \"\"\"\n    调整函数\n    data: 列表\n    low：待调整的子树的根位置\n    high：待调整的子树的最后一个节点的位置\n    \"\"\"\n    i = low\n    j = 2 * i + 1\n    tmp = data[i]\n    # i指向空位置\n    while j<=high:      #领导已经撸到底了\n        if j != high and data[j] < data[j+1]:\n            j += 1\n        #j指向数值大的孩子\n        if tmp < data[j]:   #如果小领导比撸下来的大领导能力值大\n            data[i] = data[j]\n            i = j\n            j = 2*i+1\n        else:\n            break       #撸下来的领导比候选的领导能力值大\n    data[i] = tmp\n\ndef heap_sort(data):\n    n = len(data)\n    # 建堆 从最后一个非叶子节点所以是 -1(2) 列表倒序\n    # n//2-1 找最后一个非叶子节点\n    # -1(1) 顾前不顾后\n    for i in range(n//2-1, -1, -1):\n        sift(data, i,  n - 1) # 这里的 n-1 是把所有子树的 high 都设置成整个堆的 high\n    # 挨个出数\n    for high in range(n - 1, -1, -1):\n        data[0], data[high] = data[high], data[0]\n        sift(data, 0, high - 1)\n```\n\n| 空间时间复杂度 | \tO(n)，O(1) |\n| --- | --- |\n| 最坏时间复杂度 | O(nlogn) |\n| 最优时间复杂度 | O(nlogn) |\n| 平均时间复杂度 | O(nlogn) |\n\n## 引用\n- [数据结构：树](/数据结构：树/)\n- https://www.cnblogs.com/chengxiao/p/6129630.html\n- http://bubkoo.com/2014/01/14/sort-algorithm/heap-sort/\n- http://wuchong.me/blog/2014/02/09/algorithm-sort-summary/\n\n# 归并排序（MER）\n![归并排序](https://i.imgur.com/7sbKXQt.gif)\n![归并排序](https://i.imgur.com/FN392sX.gif)\n**归并排序思路:**\n\n1. 分解：将列表越分越小，直至分成一个元素。\n2. 一个元素是有序的。\n3. 合并：将两个有序列表归并，列表越来越大。\n\n![归并排序流程](https://i.imgur.com/dXgFcwQ.png)\n\n1. 递归地将数组划分为两部分\n2. 直到两个子数组元素都为1时，返回并将两个数组进行排序融合\n3. 逐步返回，并递归融合，最终使得数组有序\n\n## code\n\n```python\ndef merge(data, low, mid, high):\n    '''一次归并'''\n    i = low\n    j = mid + 1\n    ltmp = []  # 临时列表\n    while i <= mid and j <= high:\n        if data[i] <= data[j]:\n            ltmp.append((data[i]))\n            i += 1\n        else:  # data[i] > data[j]\n            ltmp.append(data[j])\n            j += 1\n    while i <= mid:\n        ltmp.append(data[i])\n        i += 1\n    while j <= high:\n        ltmp.append(data[j])\n        j += 1\n    data[low:high + 1] = ltmp\n\n\ndef mergesort(data, low, high):\n    '''归并排序'''\n    if low < high:\n        mid = (low + high) // 2 # 获取中间位置\n        mergesort(data, low, mid) # 分解左半部分\n        mergesort(data, mid + 1, high) # 分解右半部分\n        merge(data, low, mid, high) # 归并\n    return data\n```\n## 加深理解\n\n```python\ndef func(x):\n    if x > 1:\n        y = x // 2\n        func(y)\n        func(y)\n        print(y)\nfunc(20)\n# 看最后的输出 画图\n```\n\n或者结合[递归](/递归/)\n\n![递归输出](https://i.imgur.com/XBeGCIP.png)\n\n| 空间时间复杂度 | \tO(n)|\n| --- | --- |\n| 最坏时间复杂度 | O(nlogn) |\n| 最优时间复杂度 | O(n) |\n| 平均时间复杂度 | O(nlogn) |\n\n- 快速排序、堆排序、归并排序 - 小结\n\n三种排序算法的时间复杂度都是O(nlogn)\n\n- 运行时间:\n\n`快速排序` < `归并排序` < `堆排序`\n\n三种排序算法的缺点：\n\n|快速排序|极端情况下排序效率低|\n| --- | --- |\n|归并排序|需要额外的内存开销|\n|堆排序|在快的排序算法中相对较慢|\n\n# 计数排序（COU）\n\n![计数排序](https://i.imgur.com/piK8FYS.gif)\n\n>题: 现在有一个列表，列表中的数范围都在 0 到 100 之间，列表长度大约为 100 万。设计算法在 O(n) 时间复杂度内将列表进行排序。\n\n\n```python\ndef count_sort(data, maxnum = 100):\n    '''计数排序  O(n)'''\n    count = [0 for i in range(maxnum+1)]\n    result = []\n    for i in data:\n        count[i] += 1\n    for num,count in enumerate(count):\n        for i in range(count):\n            result.append(num)\n# 或\ndef count_sort(data, max_num):\n    count = [0 for i in range(max_num + 1)]\n    for num in data:\n        count[num] += 1\n    i = 0\n    for num, m in enumerate(count):\n        for j in range(m):\n            data[i] = num\n            i += 1\n```\n\n因为要开额外的内存空间，所以使用并不多。计数排序限定元素不会太大的时候，如：年龄可以使用计数排序\n\n# 希尔排序（SHE）\n\n希尔排序是一种分组插入排序算法。O(1.3n)\n\n![希尔排序](https://i.imgur.com/s1gQYYA.gif)\n\n1. 以数组元素长度的一半做为初始步长gap，将数组划分为gap个子数组\n2. 循环切换遍历子数组，在子数组内分别进行插入排序\n3. 将gap更新为gap/2，重复上述步骤1，2，直到gap为1\n\n![步长为4的shell sort示例](https://i.imgur.com/HXBOgwr.jpg)\n\n\n**希尔排序思路：**\n\n1. 先取一个正整数 d<sub>1</sub>(d<sub>1</sub> < n)，把全部记录分成 d<sub>1</sub> 个组，所有距离为 d<sub>1</sub> 的倍数的记录看成一组，然后在各组内进行插入排序\n2. 然后取 d<sub>2</sub>(d<sub>2</sub> < d<sub>1</sub>)\n3. 重复上述分组和排序操作；直到取 d<sub>i</sub> = 1(i >= 1) 位置，即所有记录成为一个组，最后对这个组进行插入排序。一般选 d1 约为 n/2，d<sub>2</sub> 为 d<sub>1</sub> /2， d<sub>3</sub> 为 d<sub>2</sub>/2 ，…， d<sub>i</sub> = 1。\n\n\n希尔排序每趟并不使某些元素有序，而是使整体数据越来越接近有序；最后一趟排序使得所有数据有序。\n\n\n```python\n# 修改插入排序\ndef insert_sort_gap(data, gap):\n    for i in range(gap, len(data)):\n        tmp = data[i]\n        j = i - gap\n        while j >= 0 and tmp < data[j]:\n            data[j + gap] = data[j]\n            j = j - gap\n        data[j + gap] = tmp\n\ndef shell_sort(data):\n    '''希尔排序'''\n    d = len(data) // 2\n    while d > 0:\n        insert_sort_gap(data,d)\n        d = d // 2\n    return data\n```\n## 优化版\n\n```python\ndef shell_sort(data):\n    n = len(data)\n    gap = len(data) // 2\n    while gap > 0:\n        for i in range(gap, n):\n            tmp = data[i]\n            j = i - gap\n            while j >= 0 and tmp < data[j]:\n                data[j + gap] = data[j]\n                j -= gap\n            data[j + gap] = tmp\n        gap = gap // 2\n    return data\n```\n\n# 后记\n## 排序算法指标\n\n![排序算法指标](https://i.imgur.com/kkVSVGH.jpg)\n## 排序的稳定性\n排序关键字相同的情况下，对象的相对位置不变\n## 计时装饰器\n\n```python\ndef cal_time(func):\n    def wrapper(*args, **kwargs):\n        t1 = time.time()\n        x = func(*args, **kwargs)\n        t2 = time.time()\n        print(\"%s running time %s secs.\" % (func.__name__, t2 - t1))\n        return x\n    return wrapper\n```\n## 参考资料\n- 博客部分图片截取自 <https://visualgo.net/zh/sorting>\n- <http://bubkoo.com>\n- <http://chenyvehtung.github.io/2017/02/26/sort-algorithms.html>\n- [维基百科-排序算法](https://zh.wikipedia.org/wiki/Category:%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95)\n\n","source":"_posts/list-algorithm.md","raw":"---\ntitle: 常用排序算法\ndate: 2017-12-22 15:22:38\ntags: Python\ncategories: 算法\nkeywords: \ndescription: 冒泡排序、选择排序、插入排序、快速排序、堆排序、归并排序、计数排序、希尔排序\n---\n\n**重点:**\n\n- 有序区\n- 无序区\n\n# 冒泡排序（BUB）\n>列表每两个相邻的数, 如果前边的比后边的大, 那么交换这两个数\n\n**冒泡排序算法的流程如下：**\n\n1. 比较相邻的元素。如果第一个比第二个大，就交换他们两个。\n2. 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。\n3. 针对所有的元素重复以上的步骤，除了最后一个。\n4. 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。\n\n![冒泡排序](https://i.imgur.com/T0nk855.gif)\n\n**关键点:**  趟, 无序区\n\n## code\n\n```python\n# O(n²) 时间复杂度\ndef bubble_sort(li):\n    if len(li) <= 1:\n        return li\n    for i in range(len(li)-1): # i 是趟\n        for j in range(len(li)-i - 1): # j 是指针\n            if li[j] > li[j+1]:\n                li[j], li[j+1] = li[j+1] , li[j]\n    return li\nli = list(range(10000))\nimport random as rd\nrd.shuffle(li) # 打乱顺序\nprint(li)\nprint(bubble_sort(li))\n```\n## 优化版\n\n```python\ndef bubble_sort(li):\n    if len(li) <= 1:\n        return li\n    for i in range(len(li) - 1):  # i 是趟\n        exchange = Flase\n        for j in range(len(li) - i - 1):  # j 是指针\n            if li[j] > li[j + 1]:\n                li[j], li[j + 1] = li[j + 1], li[j]\n                exchange = True\n        if not exchange:\n            break\n    return li\n```\n\n| 空间时间复杂度 | O(1) |\n| --- | --- |\n| 最坏时间复杂度 | O(n²) |\n| 最优时间复杂度 | O(n) |\n| 平均时间复杂度 | O(n²) |\n\n\n# 选择排序（SEL）\n每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。\n![选择排序](https://i.imgur.com/Y7JK85g.gif)\n\n```python\ndef select_sort(li):\n    for i in range(len(li) - 1):  # i 是趟\n        min_doc = i\n        # 找i位置到最后位置范围内最小的数\n        for j in range(i, len(li)):  # i可以换成i+1,省去和自己比\n            if li[j] < li[min_doc]:\n                min_doc = j\n        # 和无序区第一个数作交换\n        # 可以加上 i==min_loc 的判断,省去和自己换\n        if min_doc != i:\n            li[min_doc], li[i] = li[i], li[min_doc]\n        '''\n        i, j, min_doc 都是下标\n        '''\n    return li\n```\n| 空间时间复杂度 | O(1) |\n| --- | --- |\n| 最坏时间复杂度 | O(n²) |\n| 最优时间复杂度 | O(n²) |\n| 平均时间复杂度 | O(n²) |\n\n\n# 插入排序（INS）\n插入排序每次取出数组后半部分的第一个元素，在排好序的前半部分中，为其找到最合适的位置并进行插入(扑克牌)\n![插入排序](https://i.imgur.com/UzdoF4Z.gif)\n\n- 列表被分为有序区和无序区两个部分。最初有序区只有一个元素。\n- 每次从无序区选择一个元素，插入到有序区的位置，直到无序区变空。\n\n**插入排序算法的流程如下：**\n\n1. 从第一个元素开始，该元素可以认为已经被排序\n2. 取出下一个元素，在已经排序的元素序列中从后向前扫描\n3. 如果该元素（已排序）大于新元素，将该元素移到下一位置\n4. 重复步骤 3，直到找到已排序的元素小于或者等于新元素的位置\n5. 将新元素插入到该位置后\n6. 重复步骤 2~5\n\n**关键点：**\n\n- 摸到的牌\n- 手里的牌 (有序)\n\n## code\n\n```python\ndef insert_sort(li):\n    if len(li) == 1:\n        return li\n    for i in range(1, len(li)):  # i代表每次摸到的牌的下标\n        tmp = li[i]\n        j = i - 1  # j代表手里最后一张牌的下标\n        while j >= 0 and tmp < li[j]: # 摸到的牌比手牌最后的牌小\n            li[j + 1] = li[j] # 把最大的手牌往后挪动\n            j -= 1\n        li[j + 1] = tmp # 摸到的牌比手牌最后的牌大\n    return li\n```\n\n| 空间时间复杂度 | O(1) |\n| --- | --- |\n| 最坏时间复杂度 | O(n²) |\n| 最优时间复杂度 | O(n²) |\n| 平均时间复杂度 | O(n²) |\n\n# 快速排序（QUI）\n博主看动图不是很理解, 建议看 [这里](http://bbs.ahalei.com/thread-4419-1-1.html)\n![快速排序](https://upload.wikimedia.org/wikipedia/commons/6/6a/Sorting_quicksort_anim.gif)\n![快速排序](https://i.imgur.com/mEG5lt2.gif)\n\n**快速排序算法的流程如下：**\n\n- 取一个元素p（第一个元素），使元素p归位；\n- 列表被p分成两部分，左边都比p小，右边都比p大；\n- 递归完成排序。\n\n**关键点：**\n\n- 整理(让元素归位)\n- 递归\n\n```python\ndef partition(data, left, right):\n    '''\n    partition:归位函数\n    右手左手一个慢动作\n    右手左手慢动作重播\n    '''\n    tmp = data[left] # 取基准数\n    while left < right:\n        # 如果需要降序排序的话, 就把 data[right] >= tmp 中的小于等于改为大于等于\n        while left < right and data[right] >= tmp:\n            right -= 1 # 左移\n        if left < right: # 如果上面的循环是因为找到了 right 小于 tmp 的数而跳出循环\n            data[left] = data[right] # 把小于 tmp 的这个元素放到 tmp 的位置上\n        # 如果需要降序排序的话, 就把 data[right] >= tmp 中的大于等于改为小于等于\n        while left < right and data[left] <= tmp:\n            left += 1 # 右移\n        data[right] = data[left] # 把大于 tmp 的这个元素放到 tmp 的位置上\n    data[left] = tmp # 那个 mid 回来\n    return left\n    \ndef _quick_sort(data, left, right):\n    if left < right:\n        mid = partition(data, left, right)\n        _quick_sort(data, left, mid - 1)\n        _quick_sort(data, mid + 1, right)\n\n@cal_time\ndef quick_sort(data):\n    return _quick_sort(data,0,len(data)-1)\n```\n## 优化版\n\n```python\n# 来自知乎 @风满楼\ndef quick_sort(lists, left, right):\n    if left > right:\n        return lists\n    low, high = left, right\n    key = lists[left]  # key即是基准数\n    while left < right:\n        while left < right and lists[right] >= key:\n            right -= 1 # 左移\n        lists[left] = lists[right] \n        while left < right and lists[left] <= key:\n            left += 1 # 右移\n        lists[right] = lists[left]\n    lists[right] = key\n    quick_sort(lists, low, left - 1)\n    quick_sort(lists, right + 1, high)\n    return lists\n\nquick(data,0,len(data)-1)\n```\n\n```python\n# 快排精简版\ndef quick(data):\n    if data == []:\n        return []\n    else:\n        pivot = data[0]\n        lesser = [x for x in data[1:] if x <= pivot]\n        greater = [x for x in data[1:] if x > pivot]\n    return quick(lesser) + [pivot] + quick(greater)\n```\n\n## 问题\n某些极端的情况下复杂度非常高, 如：\n\n```\n9 8 7 6 5 4 3 2 1\n```\n出现的概率不多, 属于极端情况, 解决方法: 选基准的时候随机选一个数与第一个数交换。\n\n| 空间时间复杂度 | 根据实现的方式不同而不同 |\n| --- | --- |\n| 最坏时间复杂度 | O(n²) |\n| 最优时间复杂度 | O(nlogn) |\n| 平均时间复杂度 | O(nlogn) |\n\nPS: 看到一个最狠的快排\n\n```python\n# https://github.com/qiwsir/algorithm/blob/master/quick_sort.md\nqs = lambda xs : ( (len(xs) <= 1 and [xs]) or [ qs( [x for x in xs[1:] if x < xs[0]] ) + [xs[0]] + qs( [x for x in xs[1:] if x >= xs[0]] ) ] )[0]\n```\n\n## 参考资料\n\n- [Ele - A面](http://ictar.github.io/2015/12/08/%E4%B9%9D%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%8F%8A%E5%85%B6Python%E5%AE%9E%E7%8E%B0%E4%B9%8B%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/)\n- <http://bbs.ahalei.com/thread-4419-1-1.html>\n- http://blog.csdn.net/v_july_v/article/details/6116297\n- https://www.zhihu.com/question/26786398\n- https://hellolynn.hpd.io/2017/08/03/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-quick-sort/\n- https://github.com/qiwsir/algorithm/blob/master/quick_sort.md\n\n# 堆排序（HEAP）\n堆排序用的是[树](/2017/12/data-structure-tree.html)的结构\n![树（数据结构）](https://i.imgur.com/JH2f8TO.jpg)\n\n## 堆\n- 大根堆：一棵完全二叉树，满足任一节点都比其孩子节点大\n- 小根堆：一棵完全二叉树，满足任一节点都比其孩子节点小\n\n![大小根堆](https://i.imgur.com/ShbrOiR.jpg)\n\n\n**假设：节点的左右子树都是堆，但自身不是堆**\n>当根节点的左右子树都是堆时，可以通过一次向下的调整来将其变换成一个堆。\n\n![调整](https://i.imgur.com/Vyt45u6.gif)\n\n**堆排序过程:**\n\n1. 建立堆\n2. 得到堆顶元素，为最大元素\n3. 去掉堆顶，将堆最后一个元素放到堆顶，此时可通过一次调整重新使堆有序。\n4. 堆顶元素为第二大元素。\n5. 重复步骤3，直到堆变空。\n\n- 构建堆\n\n先从最小的子树开始看, 最后一步看整个的堆; 从最后一个非叶子节点为根的子树开始做调整\n![构建堆](https://i.imgur.com/VF7ia3X.gif)\n\n- 挨个出数\n\n![挨个出数](https://i.imgur.com/4fYb7L4.gif)\n\n\n## code\n\n```python\ndef sift(data, low, high):\n    \"\"\"\n    调整函数\n    data: 列表\n    low：待调整的子树的根位置\n    high：待调整的子树的最后一个节点的位置\n    \"\"\"\n    i = low\n    j = 2 * i + 1\n    tmp = data[i]\n    # i指向空位置\n    while j<=high:      #领导已经撸到底了\n        if j != high and data[j] < data[j+1]:\n            j += 1\n        #j指向数值大的孩子\n        if tmp < data[j]:   #如果小领导比撸下来的大领导能力值大\n            data[i] = data[j]\n            i = j\n            j = 2*i+1\n        else:\n            break       #撸下来的领导比候选的领导能力值大\n    data[i] = tmp\n\ndef heap_sort(data):\n    n = len(data)\n    # 建堆 从最后一个非叶子节点所以是 -1(2) 列表倒序\n    # n//2-1 找最后一个非叶子节点\n    # -1(1) 顾前不顾后\n    for i in range(n//2-1, -1, -1):\n        sift(data, i,  n - 1) # 这里的 n-1 是把所有子树的 high 都设置成整个堆的 high\n    # 挨个出数\n    for high in range(n - 1, -1, -1):\n        data[0], data[high] = data[high], data[0]\n        sift(data, 0, high - 1)\n```\n\n| 空间时间复杂度 | \tO(n)，O(1) |\n| --- | --- |\n| 最坏时间复杂度 | O(nlogn) |\n| 最优时间复杂度 | O(nlogn) |\n| 平均时间复杂度 | O(nlogn) |\n\n## 引用\n- [数据结构：树](/数据结构：树/)\n- https://www.cnblogs.com/chengxiao/p/6129630.html\n- http://bubkoo.com/2014/01/14/sort-algorithm/heap-sort/\n- http://wuchong.me/blog/2014/02/09/algorithm-sort-summary/\n\n# 归并排序（MER）\n![归并排序](https://i.imgur.com/7sbKXQt.gif)\n![归并排序](https://i.imgur.com/FN392sX.gif)\n**归并排序思路:**\n\n1. 分解：将列表越分越小，直至分成一个元素。\n2. 一个元素是有序的。\n3. 合并：将两个有序列表归并，列表越来越大。\n\n![归并排序流程](https://i.imgur.com/dXgFcwQ.png)\n\n1. 递归地将数组划分为两部分\n2. 直到两个子数组元素都为1时，返回并将两个数组进行排序融合\n3. 逐步返回，并递归融合，最终使得数组有序\n\n## code\n\n```python\ndef merge(data, low, mid, high):\n    '''一次归并'''\n    i = low\n    j = mid + 1\n    ltmp = []  # 临时列表\n    while i <= mid and j <= high:\n        if data[i] <= data[j]:\n            ltmp.append((data[i]))\n            i += 1\n        else:  # data[i] > data[j]\n            ltmp.append(data[j])\n            j += 1\n    while i <= mid:\n        ltmp.append(data[i])\n        i += 1\n    while j <= high:\n        ltmp.append(data[j])\n        j += 1\n    data[low:high + 1] = ltmp\n\n\ndef mergesort(data, low, high):\n    '''归并排序'''\n    if low < high:\n        mid = (low + high) // 2 # 获取中间位置\n        mergesort(data, low, mid) # 分解左半部分\n        mergesort(data, mid + 1, high) # 分解右半部分\n        merge(data, low, mid, high) # 归并\n    return data\n```\n## 加深理解\n\n```python\ndef func(x):\n    if x > 1:\n        y = x // 2\n        func(y)\n        func(y)\n        print(y)\nfunc(20)\n# 看最后的输出 画图\n```\n\n或者结合[递归](/递归/)\n\n![递归输出](https://i.imgur.com/XBeGCIP.png)\n\n| 空间时间复杂度 | \tO(n)|\n| --- | --- |\n| 最坏时间复杂度 | O(nlogn) |\n| 最优时间复杂度 | O(n) |\n| 平均时间复杂度 | O(nlogn) |\n\n- 快速排序、堆排序、归并排序 - 小结\n\n三种排序算法的时间复杂度都是O(nlogn)\n\n- 运行时间:\n\n`快速排序` < `归并排序` < `堆排序`\n\n三种排序算法的缺点：\n\n|快速排序|极端情况下排序效率低|\n| --- | --- |\n|归并排序|需要额外的内存开销|\n|堆排序|在快的排序算法中相对较慢|\n\n# 计数排序（COU）\n\n![计数排序](https://i.imgur.com/piK8FYS.gif)\n\n>题: 现在有一个列表，列表中的数范围都在 0 到 100 之间，列表长度大约为 100 万。设计算法在 O(n) 时间复杂度内将列表进行排序。\n\n\n```python\ndef count_sort(data, maxnum = 100):\n    '''计数排序  O(n)'''\n    count = [0 for i in range(maxnum+1)]\n    result = []\n    for i in data:\n        count[i] += 1\n    for num,count in enumerate(count):\n        for i in range(count):\n            result.append(num)\n# 或\ndef count_sort(data, max_num):\n    count = [0 for i in range(max_num + 1)]\n    for num in data:\n        count[num] += 1\n    i = 0\n    for num, m in enumerate(count):\n        for j in range(m):\n            data[i] = num\n            i += 1\n```\n\n因为要开额外的内存空间，所以使用并不多。计数排序限定元素不会太大的时候，如：年龄可以使用计数排序\n\n# 希尔排序（SHE）\n\n希尔排序是一种分组插入排序算法。O(1.3n)\n\n![希尔排序](https://i.imgur.com/s1gQYYA.gif)\n\n1. 以数组元素长度的一半做为初始步长gap，将数组划分为gap个子数组\n2. 循环切换遍历子数组，在子数组内分别进行插入排序\n3. 将gap更新为gap/2，重复上述步骤1，2，直到gap为1\n\n![步长为4的shell sort示例](https://i.imgur.com/HXBOgwr.jpg)\n\n\n**希尔排序思路：**\n\n1. 先取一个正整数 d<sub>1</sub>(d<sub>1</sub> < n)，把全部记录分成 d<sub>1</sub> 个组，所有距离为 d<sub>1</sub> 的倍数的记录看成一组，然后在各组内进行插入排序\n2. 然后取 d<sub>2</sub>(d<sub>2</sub> < d<sub>1</sub>)\n3. 重复上述分组和排序操作；直到取 d<sub>i</sub> = 1(i >= 1) 位置，即所有记录成为一个组，最后对这个组进行插入排序。一般选 d1 约为 n/2，d<sub>2</sub> 为 d<sub>1</sub> /2， d<sub>3</sub> 为 d<sub>2</sub>/2 ，…， d<sub>i</sub> = 1。\n\n\n希尔排序每趟并不使某些元素有序，而是使整体数据越来越接近有序；最后一趟排序使得所有数据有序。\n\n\n```python\n# 修改插入排序\ndef insert_sort_gap(data, gap):\n    for i in range(gap, len(data)):\n        tmp = data[i]\n        j = i - gap\n        while j >= 0 and tmp < data[j]:\n            data[j + gap] = data[j]\n            j = j - gap\n        data[j + gap] = tmp\n\ndef shell_sort(data):\n    '''希尔排序'''\n    d = len(data) // 2\n    while d > 0:\n        insert_sort_gap(data,d)\n        d = d // 2\n    return data\n```\n## 优化版\n\n```python\ndef shell_sort(data):\n    n = len(data)\n    gap = len(data) // 2\n    while gap > 0:\n        for i in range(gap, n):\n            tmp = data[i]\n            j = i - gap\n            while j >= 0 and tmp < data[j]:\n                data[j + gap] = data[j]\n                j -= gap\n            data[j + gap] = tmp\n        gap = gap // 2\n    return data\n```\n\n# 后记\n## 排序算法指标\n\n![排序算法指标](https://i.imgur.com/kkVSVGH.jpg)\n## 排序的稳定性\n排序关键字相同的情况下，对象的相对位置不变\n## 计时装饰器\n\n```python\ndef cal_time(func):\n    def wrapper(*args, **kwargs):\n        t1 = time.time()\n        x = func(*args, **kwargs)\n        t2 = time.time()\n        print(\"%s running time %s secs.\" % (func.__name__, t2 - t1))\n        return x\n    return wrapper\n```\n## 参考资料\n- 博客部分图片截取自 <https://visualgo.net/zh/sorting>\n- <http://bubkoo.com>\n- <http://chenyvehtung.github.io/2017/02/26/sort-algorithms.html>\n- [维基百科-排序算法](https://zh.wikipedia.org/wiki/Category:%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95)\n\n","slug":"list-algorithm","published":1,"updated":"2018-04-01T13:23:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfgx5ox9001amxgo0qgvugn8","content":"<p><strong>重点:</strong></p>\n<ul>\n<li>有序区</li>\n<li>无序区</li>\n</ul>\n<h1 id=\"冒泡排序（BUB）\"><a href=\"#冒泡排序（BUB）\" class=\"headerlink\" title=\"冒泡排序（BUB）\"></a>冒泡排序（BUB）</h1><blockquote>\n<p>列表每两个相邻的数, 如果前边的比后边的大, 那么交换这两个数</p>\n</blockquote>\n<p><strong>冒泡排序算法的流程如下：</strong></p>\n<ol>\n<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>\n<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</li>\n<li>针对所有的元素重复以上的步骤，除了最后一个。</li>\n<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li>\n</ol>\n<p><img src=\"https://i.imgur.com/T0nk855.gif\" alt=\"冒泡排序\"></p>\n<p><strong>关键点:</strong>  趟, 无序区</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># O(n²) 时间复杂度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bubble_sort</span><span class=\"params\">(li)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(li) &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> li</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(li)<span class=\"number\">-1</span>): <span class=\"comment\"># i 是趟</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(len(li)-i - <span class=\"number\">1</span>): <span class=\"comment\"># j 是指针</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> li[j] &gt; li[j+<span class=\"number\">1</span>]:</span><br><span class=\"line\">                li[j], li[j+<span class=\"number\">1</span>] = li[j+<span class=\"number\">1</span>] , li[j]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> li</span><br><span class=\"line\">li = list(range(<span class=\"number\">10000</span>))</span><br><span class=\"line\"><span class=\"keyword\">import</span> random <span class=\"keyword\">as</span> rd</span><br><span class=\"line\">rd.shuffle(li) <span class=\"comment\"># 打乱顺序</span></span><br><span class=\"line\">print(li)</span><br><span class=\"line\">print(bubble_sort(li))</span><br></pre></td></tr></table></figure>\n<h2 id=\"优化版\"><a href=\"#优化版\" class=\"headerlink\" title=\"优化版\"></a>优化版</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bubble_sort</span><span class=\"params\">(li)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(li) &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> li</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(li) - <span class=\"number\">1</span>):  <span class=\"comment\"># i 是趟</span></span><br><span class=\"line\">        exchange = Flase</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(len(li) - i - <span class=\"number\">1</span>):  <span class=\"comment\"># j 是指针</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> li[j] &gt; li[j + <span class=\"number\">1</span>]:</span><br><span class=\"line\">                li[j], li[j + <span class=\"number\">1</span>] = li[j + <span class=\"number\">1</span>], li[j]</span><br><span class=\"line\">                exchange = <span class=\"keyword\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> exchange:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> li</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>空间时间复杂度</th>\n<th>O(1)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>最坏时间复杂度</td>\n<td>O(n²)</td>\n</tr>\n<tr>\n<td>最优时间复杂度</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>平均时间复杂度</td>\n<td>O(n²)</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"选择排序（SEL）\"><a href=\"#选择排序（SEL）\" class=\"headerlink\" title=\"选择排序（SEL）\"></a>选择排序（SEL）</h1><p>每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。<br><img src=\"https://i.imgur.com/Y7JK85g.gif\" alt=\"选择排序\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">select_sort</span><span class=\"params\">(li)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(li) - <span class=\"number\">1</span>):  <span class=\"comment\"># i 是趟</span></span><br><span class=\"line\">        min_doc = i</span><br><span class=\"line\">        <span class=\"comment\"># 找i位置到最后位置范围内最小的数</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(i, len(li)):  <span class=\"comment\"># i可以换成i+1,省去和自己比</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> li[j] &lt; li[min_doc]:</span><br><span class=\"line\">                min_doc = j</span><br><span class=\"line\">        <span class=\"comment\"># 和无序区第一个数作交换</span></span><br><span class=\"line\">        <span class=\"comment\"># 可以加上 i==min_loc 的判断,省去和自己换</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> min_doc != i:</span><br><span class=\"line\">            li[min_doc], li[i] = li[i], li[min_doc]</span><br><span class=\"line\">        <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">        i, j, min_doc 都是下标</span></span><br><span class=\"line\"><span class=\"string\">        '''</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> li</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>空间时间复杂度</th>\n<th>O(1)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>最坏时间复杂度</td>\n<td>O(n²)</td>\n</tr>\n<tr>\n<td>最优时间复杂度</td>\n<td>O(n²)</td>\n</tr>\n<tr>\n<td>平均时间复杂度</td>\n<td>O(n²)</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"插入排序（INS）\"><a href=\"#插入排序（INS）\" class=\"headerlink\" title=\"插入排序（INS）\"></a>插入排序（INS）</h1><p>插入排序每次取出数组后半部分的第一个元素，在排好序的前半部分中，为其找到最合适的位置并进行插入(扑克牌)<br><img src=\"https://i.imgur.com/UzdoF4Z.gif\" alt=\"插入排序\"></p>\n<ul>\n<li>列表被分为有序区和无序区两个部分。最初有序区只有一个元素。</li>\n<li>每次从无序区选择一个元素，插入到有序区的位置，直到无序区变空。</li>\n</ul>\n<p><strong>插入排序算法的流程如下：</strong></p>\n<ol>\n<li>从第一个元素开始，该元素可以认为已经被排序</li>\n<li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li>\n<li>如果该元素（已排序）大于新元素，将该元素移到下一位置</li>\n<li>重复步骤 3，直到找到已排序的元素小于或者等于新元素的位置</li>\n<li>将新元素插入到该位置后</li>\n<li>重复步骤 2~5</li>\n</ol>\n<p><strong>关键点：</strong></p>\n<ul>\n<li>摸到的牌</li>\n<li>手里的牌 (有序)</li>\n</ul>\n<h2 id=\"code-1\"><a href=\"#code-1\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert_sort</span><span class=\"params\">(li)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(li) == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> li</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, len(li)):  <span class=\"comment\"># i代表每次摸到的牌的下标</span></span><br><span class=\"line\">        tmp = li[i]</span><br><span class=\"line\">        j = i - <span class=\"number\">1</span>  <span class=\"comment\"># j代表手里最后一张牌的下标</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> j &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> tmp &lt; li[j]: <span class=\"comment\"># 摸到的牌比手牌最后的牌小</span></span><br><span class=\"line\">            li[j + <span class=\"number\">1</span>] = li[j] <span class=\"comment\"># 把最大的手牌往后挪动</span></span><br><span class=\"line\">            j -= <span class=\"number\">1</span></span><br><span class=\"line\">        li[j + <span class=\"number\">1</span>] = tmp <span class=\"comment\"># 摸到的牌比手牌最后的牌大</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> li</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>空间时间复杂度</th>\n<th>O(1)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>最坏时间复杂度</td>\n<td>O(n²)</td>\n</tr>\n<tr>\n<td>最优时间复杂度</td>\n<td>O(n²)</td>\n</tr>\n<tr>\n<td>平均时间复杂度</td>\n<td>O(n²)</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"快速排序（QUI）\"><a href=\"#快速排序（QUI）\" class=\"headerlink\" title=\"快速排序（QUI）\"></a>快速排序（QUI）</h1><p>博主看动图不是很理解, 建议看 <a href=\"http://bbs.ahalei.com/thread-4419-1-1.html\" target=\"_blank\" rel=\"noopener\">这里</a><br><img src=\"https://upload.wikimedia.org/wikipedia/commons/6/6a/Sorting_quicksort_anim.gif\" alt=\"快速排序\"><br><img src=\"https://i.imgur.com/mEG5lt2.gif\" alt=\"快速排序\"></p>\n<p><strong>快速排序算法的流程如下：</strong></p>\n<ul>\n<li>取一个元素p（第一个元素），使元素p归位；</li>\n<li>列表被p分成两部分，左边都比p小，右边都比p大；</li>\n<li>递归完成排序。</li>\n</ul>\n<p><strong>关键点：</strong></p>\n<ul>\n<li>整理(让元素归位)</li>\n<li>递归</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">partition</span><span class=\"params\">(data, left, right)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    partition:归位函数</span></span><br><span class=\"line\"><span class=\"string\">    右手左手一个慢动作</span></span><br><span class=\"line\"><span class=\"string\">    右手左手慢动作重播</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\">    tmp = data[left] <span class=\"comment\"># 取基准数</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> left &lt; right:</span><br><span class=\"line\">        <span class=\"comment\"># 如果需要降序排序的话, 就把 data[right] &gt;= tmp 中的小于等于改为大于等于</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> data[right] &gt;= tmp:</span><br><span class=\"line\">            right -= <span class=\"number\">1</span> <span class=\"comment\"># 左移</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> left &lt; right: <span class=\"comment\"># 如果上面的循环是因为找到了 right 小于 tmp 的数而跳出循环</span></span><br><span class=\"line\">            data[left] = data[right] <span class=\"comment\"># 把小于 tmp 的这个元素放到 tmp 的位置上</span></span><br><span class=\"line\">        <span class=\"comment\"># 如果需要降序排序的话, 就把 data[right] &gt;= tmp 中的大于等于改为小于等于</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> data[left] &lt;= tmp:</span><br><span class=\"line\">            left += <span class=\"number\">1</span> <span class=\"comment\"># 右移</span></span><br><span class=\"line\">        data[right] = data[left] <span class=\"comment\"># 把大于 tmp 的这个元素放到 tmp 的位置上</span></span><br><span class=\"line\">    data[left] = tmp <span class=\"comment\"># 那个 mid 回来</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> left</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_quick_sort</span><span class=\"params\">(data, left, right)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> left &lt; right:</span><br><span class=\"line\">        mid = partition(data, left, right)</span><br><span class=\"line\">        _quick_sort(data, left, mid - <span class=\"number\">1</span>)</span><br><span class=\"line\">        _quick_sort(data, mid + <span class=\"number\">1</span>, right)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@cal_time</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quick_sort</span><span class=\"params\">(data)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _quick_sort(data,<span class=\"number\">0</span>,len(data)<span class=\"number\">-1</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"优化版-1\"><a href=\"#优化版-1\" class=\"headerlink\" title=\"优化版\"></a>优化版</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 来自知乎 @风满楼</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quick_sort</span><span class=\"params\">(lists, left, right)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> left &gt; right:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lists</span><br><span class=\"line\">    low, high = left, right</span><br><span class=\"line\">    key = lists[left]  <span class=\"comment\"># key即是基准数</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> left &lt; right:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> lists[right] &gt;= key:</span><br><span class=\"line\">            right -= <span class=\"number\">1</span> <span class=\"comment\"># 左移</span></span><br><span class=\"line\">        lists[left] = lists[right] </span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> lists[left] &lt;= key:</span><br><span class=\"line\">            left += <span class=\"number\">1</span> <span class=\"comment\"># 右移</span></span><br><span class=\"line\">        lists[right] = lists[left]</span><br><span class=\"line\">    lists[right] = key</span><br><span class=\"line\">    quick_sort(lists, low, left - <span class=\"number\">1</span>)</span><br><span class=\"line\">    quick_sort(lists, right + <span class=\"number\">1</span>, high)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lists</span><br><span class=\"line\"></span><br><span class=\"line\">quick(data,<span class=\"number\">0</span>,len(data)<span class=\"number\">-1</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 快排精简版</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quick</span><span class=\"params\">(data)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> data == []:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> []</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        pivot = data[<span class=\"number\">0</span>]</span><br><span class=\"line\">        lesser = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> data[<span class=\"number\">1</span>:] <span class=\"keyword\">if</span> x &lt;= pivot]</span><br><span class=\"line\">        greater = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> data[<span class=\"number\">1</span>:] <span class=\"keyword\">if</span> x &gt; pivot]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> quick(lesser) + [pivot] + quick(greater)</span><br></pre></td></tr></table></figure>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>某些极端的情况下复杂度非常高, 如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">9 8 7 6 5 4 3 2 1</span><br></pre></td></tr></table></figure>\n<p>出现的概率不多, 属于极端情况, 解决方法: 选基准的时候随机选一个数与第一个数交换。</p>\n<table>\n<thead>\n<tr>\n<th>空间时间复杂度</th>\n<th>根据实现的方式不同而不同</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>最坏时间复杂度</td>\n<td>O(n²)</td>\n</tr>\n<tr>\n<td>最优时间复杂度</td>\n<td>O(nlogn)</td>\n</tr>\n<tr>\n<td>平均时间复杂度</td>\n<td>O(nlogn)</td>\n</tr>\n</tbody>\n</table>\n<p>PS: 看到一个最狠的快排</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># https://github.com/qiwsir/algorithm/blob/master/quick_sort.md</span></span><br><span class=\"line\">qs = <span class=\"keyword\">lambda</span> xs : ( (len(xs) &lt;= <span class=\"number\">1</span> <span class=\"keyword\">and</span> [xs]) <span class=\"keyword\">or</span> [ qs( [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> xs[<span class=\"number\">1</span>:] <span class=\"keyword\">if</span> x &lt; xs[<span class=\"number\">0</span>]] ) + [xs[<span class=\"number\">0</span>]] + qs( [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> xs[<span class=\"number\">1</span>:] <span class=\"keyword\">if</span> x &gt;= xs[<span class=\"number\">0</span>]] ) ] )[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"http://ictar.github.io/2015/12/08/%E4%B9%9D%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%8F%8A%E5%85%B6Python%E5%AE%9E%E7%8E%B0%E4%B9%8B%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/\" target=\"_blank\" rel=\"noopener\">Ele - A面</a></li>\n<li><a href=\"http://bbs.ahalei.com/thread-4419-1-1.html\" target=\"_blank\" rel=\"noopener\">http://bbs.ahalei.com/thread-4419-1-1.html</a></li>\n<li><a href=\"http://blog.csdn.net/v_july_v/article/details/6116297\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/v_july_v/article/details/6116297</a></li>\n<li><a href=\"https://www.zhihu.com/question/26786398\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/26786398</a></li>\n<li><a href=\"https://hellolynn.hpd.io/2017/08/03/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-quick-sort/\" target=\"_blank\" rel=\"noopener\">https://hellolynn.hpd.io/2017/08/03/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-quick-sort/</a></li>\n<li><a href=\"https://github.com/qiwsir/algorithm/blob/master/quick_sort.md\" target=\"_blank\" rel=\"noopener\">https://github.com/qiwsir/algorithm/blob/master/quick_sort.md</a></li>\n</ul>\n<h1 id=\"堆排序（HEAP）\"><a href=\"#堆排序（HEAP）\" class=\"headerlink\" title=\"堆排序（HEAP）\"></a>堆排序（HEAP）</h1><p>堆排序用的是<a href=\"/2017/12/data-structure-tree.html\">树</a>的结构<br><img src=\"https://i.imgur.com/JH2f8TO.jpg\" alt=\"树（数据结构）\"></p>\n<h2 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h2><ul>\n<li>大根堆：一棵完全二叉树，满足任一节点都比其孩子节点大</li>\n<li>小根堆：一棵完全二叉树，满足任一节点都比其孩子节点小</li>\n</ul>\n<p><img src=\"https://i.imgur.com/ShbrOiR.jpg\" alt=\"大小根堆\"></p>\n<p><strong>假设：节点的左右子树都是堆，但自身不是堆</strong></p>\n<blockquote>\n<p>当根节点的左右子树都是堆时，可以通过一次向下的调整来将其变换成一个堆。</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/Vyt45u6.gif\" alt=\"调整\"></p>\n<p><strong>堆排序过程:</strong></p>\n<ol>\n<li>建立堆</li>\n<li>得到堆顶元素，为最大元素</li>\n<li>去掉堆顶，将堆最后一个元素放到堆顶，此时可通过一次调整重新使堆有序。</li>\n<li>堆顶元素为第二大元素。</li>\n<li>重复步骤3，直到堆变空。</li>\n</ol>\n<ul>\n<li>构建堆</li>\n</ul>\n<p>先从最小的子树开始看, 最后一步看整个的堆; 从最后一个非叶子节点为根的子树开始做调整<br><img src=\"https://i.imgur.com/VF7ia3X.gif\" alt=\"构建堆\"></p>\n<ul>\n<li>挨个出数</li>\n</ul>\n<p><img src=\"https://i.imgur.com/4fYb7L4.gif\" alt=\"挨个出数\"></p>\n<h2 id=\"code-2\"><a href=\"#code-2\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sift</span><span class=\"params\">(data, low, high)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    调整函数</span></span><br><span class=\"line\"><span class=\"string\">    data: 列表</span></span><br><span class=\"line\"><span class=\"string\">    low：待调整的子树的根位置</span></span><br><span class=\"line\"><span class=\"string\">    high：待调整的子树的最后一个节点的位置</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    i = low</span><br><span class=\"line\">    j = <span class=\"number\">2</span> * i + <span class=\"number\">1</span></span><br><span class=\"line\">    tmp = data[i]</span><br><span class=\"line\">    <span class=\"comment\"># i指向空位置</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> j&lt;=high:      <span class=\"comment\">#领导已经撸到底了</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> j != high <span class=\"keyword\">and</span> data[j] &lt; data[j+<span class=\"number\">1</span>]:</span><br><span class=\"line\">            j += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\">#j指向数值大的孩子</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> tmp &lt; data[j]:   <span class=\"comment\">#如果小领导比撸下来的大领导能力值大</span></span><br><span class=\"line\">            data[i] = data[j]</span><br><span class=\"line\">            i = j</span><br><span class=\"line\">            j = <span class=\"number\">2</span>*i+<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>       <span class=\"comment\">#撸下来的领导比候选的领导能力值大</span></span><br><span class=\"line\">    data[i] = tmp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">heap_sort</span><span class=\"params\">(data)</span>:</span></span><br><span class=\"line\">    n = len(data)</span><br><span class=\"line\">    <span class=\"comment\"># 建堆 从最后一个非叶子节点所以是 -1(2) 列表倒序</span></span><br><span class=\"line\">    <span class=\"comment\"># n//2-1 找最后一个非叶子节点</span></span><br><span class=\"line\">    <span class=\"comment\"># -1(1) 顾前不顾后</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n//<span class=\"number\">2</span><span class=\"number\">-1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">        sift(data, i,  n - <span class=\"number\">1</span>) <span class=\"comment\"># 这里的 n-1 是把所有子树的 high 都设置成整个堆的 high</span></span><br><span class=\"line\">    <span class=\"comment\"># 挨个出数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> high <span class=\"keyword\">in</span> range(n - <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">        data[<span class=\"number\">0</span>], data[high] = data[high], data[<span class=\"number\">0</span>]</span><br><span class=\"line\">        sift(data, <span class=\"number\">0</span>, high - <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>空间时间复杂度</th>\n<th>O(n)，O(1)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>最坏时间复杂度</td>\n<td>O(nlogn)</td>\n</tr>\n<tr>\n<td>最优时间复杂度</td>\n<td>O(nlogn)</td>\n</tr>\n<tr>\n<td>平均时间复杂度</td>\n<td>O(nlogn)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><ul>\n<li><a href=\"/数据结构：树/\">数据结构：树</a></li>\n<li><a href=\"https://www.cnblogs.com/chengxiao/p/6129630.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/chengxiao/p/6129630.html</a></li>\n<li><a href=\"http://bubkoo.com/2014/01/14/sort-algorithm/heap-sort/\" target=\"_blank\" rel=\"noopener\">http://bubkoo.com/2014/01/14/sort-algorithm/heap-sort/</a></li>\n<li><a href=\"http://wuchong.me/blog/2014/02/09/algorithm-sort-summary/\" target=\"_blank\" rel=\"noopener\">http://wuchong.me/blog/2014/02/09/algorithm-sort-summary/</a></li>\n</ul>\n<h1 id=\"归并排序（MER）\"><a href=\"#归并排序（MER）\" class=\"headerlink\" title=\"归并排序（MER）\"></a>归并排序（MER）</h1><p><img src=\"https://i.imgur.com/7sbKXQt.gif\" alt=\"归并排序\"><br><img src=\"https://i.imgur.com/FN392sX.gif\" alt=\"归并排序\"><br><strong>归并排序思路:</strong></p>\n<ol>\n<li>分解：将列表越分越小，直至分成一个元素。</li>\n<li>一个元素是有序的。</li>\n<li>合并：将两个有序列表归并，列表越来越大。</li>\n</ol>\n<p><img src=\"https://i.imgur.com/dXgFcwQ.png\" alt=\"归并排序流程\"></p>\n<ol>\n<li>递归地将数组划分为两部分</li>\n<li>直到两个子数组元素都为1时，返回并将两个数组进行排序融合</li>\n<li>逐步返回，并递归融合，最终使得数组有序</li>\n</ol>\n<h2 id=\"code-3\"><a href=\"#code-3\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">merge</span><span class=\"params\">(data, low, mid, high)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''一次归并'''</span></span><br><span class=\"line\">    i = low</span><br><span class=\"line\">    j = mid + <span class=\"number\">1</span></span><br><span class=\"line\">    ltmp = []  <span class=\"comment\"># 临时列表</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt;= mid <span class=\"keyword\">and</span> j &lt;= high:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> data[i] &lt;= data[j]:</span><br><span class=\"line\">            ltmp.append((data[i]))</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:  <span class=\"comment\"># data[i] &gt; data[j]</span></span><br><span class=\"line\">            ltmp.append(data[j])</span><br><span class=\"line\">            j += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt;= mid:</span><br><span class=\"line\">        ltmp.append(data[i])</span><br><span class=\"line\">        i += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> j &lt;= high:</span><br><span class=\"line\">        ltmp.append(data[j])</span><br><span class=\"line\">        j += <span class=\"number\">1</span></span><br><span class=\"line\">    data[low:high + <span class=\"number\">1</span>] = ltmp</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mergesort</span><span class=\"params\">(data, low, high)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''归并排序'''</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> low &lt; high:</span><br><span class=\"line\">        mid = (low + high) // <span class=\"number\">2</span> <span class=\"comment\"># 获取中间位置</span></span><br><span class=\"line\">        mergesort(data, low, mid) <span class=\"comment\"># 分解左半部分</span></span><br><span class=\"line\">        mergesort(data, mid + <span class=\"number\">1</span>, high) <span class=\"comment\"># 分解右半部分</span></span><br><span class=\"line\">        merge(data, low, mid, high) <span class=\"comment\"># 归并</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br></pre></td></tr></table></figure>\n<h2 id=\"加深理解\"><a href=\"#加深理解\" class=\"headerlink\" title=\"加深理解\"></a>加深理解</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">        y = x // <span class=\"number\">2</span></span><br><span class=\"line\">        func(y)</span><br><span class=\"line\">        func(y)</span><br><span class=\"line\">        print(y)</span><br><span class=\"line\">func(<span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"comment\"># 看最后的输出 画图</span></span><br></pre></td></tr></table></figure>\n<p>或者结合<a href=\"/递归/\">递归</a></p>\n<p><img src=\"https://i.imgur.com/XBeGCIP.png\" alt=\"递归输出\"></p>\n<table>\n<thead>\n<tr>\n<th>空间时间复杂度</th>\n<th>O(n)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>最坏时间复杂度</td>\n<td>O(nlogn)</td>\n</tr>\n<tr>\n<td>最优时间复杂度</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>平均时间复杂度</td>\n<td>O(nlogn)</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>快速排序、堆排序、归并排序 - 小结</li>\n</ul>\n<p>三种排序算法的时间复杂度都是O(nlogn)</p>\n<ul>\n<li>运行时间:</li>\n</ul>\n<p><code>快速排序</code> &lt; <code>归并排序</code> &lt; <code>堆排序</code></p>\n<p>三种排序算法的缺点：</p>\n<table>\n<thead>\n<tr>\n<th>快速排序</th>\n<th>极端情况下排序效率低</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>归并排序</td>\n<td>需要额外的内存开销</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>在快的排序算法中相对较慢</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"计数排序（COU）\"><a href=\"#计数排序（COU）\" class=\"headerlink\" title=\"计数排序（COU）\"></a>计数排序（COU）</h1><p><img src=\"https://i.imgur.com/piK8FYS.gif\" alt=\"计数排序\"></p>\n<blockquote>\n<p>题: 现在有一个列表，列表中的数范围都在 0 到 100 之间，列表长度大约为 100 万。设计算法在 O(n) 时间复杂度内将列表进行排序。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count_sort</span><span class=\"params\">(data, maxnum = <span class=\"number\">100</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''计数排序  O(n)'''</span></span><br><span class=\"line\">    count = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(maxnum+<span class=\"number\">1</span>)]</span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">        count[i] += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> num,count <span class=\"keyword\">in</span> enumerate(count):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(count):</span><br><span class=\"line\">            result.append(num)</span><br><span class=\"line\"><span class=\"comment\"># 或</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count_sort</span><span class=\"params\">(data, max_num)</span>:</span></span><br><span class=\"line\">    count = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(max_num + <span class=\"number\">1</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">        count[num] += <span class=\"number\">1</span></span><br><span class=\"line\">    i = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> num, m <span class=\"keyword\">in</span> enumerate(count):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(m):</span><br><span class=\"line\">            data[i] = num</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>因为要开额外的内存空间，所以使用并不多。计数排序限定元素不会太大的时候，如：年龄可以使用计数排序</p>\n<h1 id=\"希尔排序（SHE）\"><a href=\"#希尔排序（SHE）\" class=\"headerlink\" title=\"希尔排序（SHE）\"></a>希尔排序（SHE）</h1><p>希尔排序是一种分组插入排序算法。O(1.3n)</p>\n<p><img src=\"https://i.imgur.com/s1gQYYA.gif\" alt=\"希尔排序\"></p>\n<ol>\n<li>以数组元素长度的一半做为初始步长gap，将数组划分为gap个子数组</li>\n<li>循环切换遍历子数组，在子数组内分别进行插入排序</li>\n<li>将gap更新为gap/2，重复上述步骤1，2，直到gap为1</li>\n</ol>\n<p><img src=\"https://i.imgur.com/HXBOgwr.jpg\" alt=\"步长为4的shell sort示例\"></p>\n<p><strong>希尔排序思路：</strong></p>\n<ol>\n<li>先取一个正整数 d<sub>1</sub>(d<sub>1</sub> &lt; n)，把全部记录分成 d<sub>1</sub> 个组，所有距离为 d<sub>1</sub> 的倍数的记录看成一组，然后在各组内进行插入排序</li>\n<li>然后取 d<sub>2</sub>(d<sub>2</sub> &lt; d<sub>1</sub>)</li>\n<li>重复上述分组和排序操作；直到取 d<sub>i</sub> = 1(i &gt;= 1) 位置，即所有记录成为一个组，最后对这个组进行插入排序。一般选 d1 约为 n/2，d<sub>2</sub> 为 d<sub>1</sub> /2， d<sub>3</sub> 为 d<sub>2</sub>/2 ，…， d<sub>i</sub> = 1。</li>\n</ol>\n<p>希尔排序每趟并不使某些元素有序，而是使整体数据越来越接近有序；最后一趟排序使得所有数据有序。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改插入排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert_sort_gap</span><span class=\"params\">(data, gap)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(gap, len(data)):</span><br><span class=\"line\">        tmp = data[i]</span><br><span class=\"line\">        j = i - gap</span><br><span class=\"line\">        <span class=\"keyword\">while</span> j &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> tmp &lt; data[j]:</span><br><span class=\"line\">            data[j + gap] = data[j]</span><br><span class=\"line\">            j = j - gap</span><br><span class=\"line\">        data[j + gap] = tmp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">shell_sort</span><span class=\"params\">(data)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''希尔排序'''</span></span><br><span class=\"line\">    d = len(data) // <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> d &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        insert_sort_gap(data,d)</span><br><span class=\"line\">        d = d // <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br></pre></td></tr></table></figure>\n<h2 id=\"优化版-2\"><a href=\"#优化版-2\" class=\"headerlink\" title=\"优化版\"></a>优化版</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">shell_sort</span><span class=\"params\">(data)</span>:</span></span><br><span class=\"line\">    n = len(data)</span><br><span class=\"line\">    gap = len(data) // <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> gap &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(gap, n):</span><br><span class=\"line\">            tmp = data[i]</span><br><span class=\"line\">            j = i - gap</span><br><span class=\"line\">            <span class=\"keyword\">while</span> j &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> tmp &lt; data[j]:</span><br><span class=\"line\">                data[j + gap] = data[j]</span><br><span class=\"line\">                j -= gap</span><br><span class=\"line\">            data[j + gap] = tmp</span><br><span class=\"line\">        gap = gap // <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br></pre></td></tr></table></figure>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><h2 id=\"排序算法指标\"><a href=\"#排序算法指标\" class=\"headerlink\" title=\"排序算法指标\"></a>排序算法指标</h2><p><img src=\"https://i.imgur.com/kkVSVGH.jpg\" alt=\"排序算法指标\"></p>\n<h2 id=\"排序的稳定性\"><a href=\"#排序的稳定性\" class=\"headerlink\" title=\"排序的稳定性\"></a>排序的稳定性</h2><p>排序关键字相同的情况下，对象的相对位置不变</p>\n<h2 id=\"计时装饰器\"><a href=\"#计时装饰器\" class=\"headerlink\" title=\"计时装饰器\"></a>计时装饰器</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cal_time</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">        t1 = time.time()</span><br><span class=\"line\">        x = func(*args, **kwargs)</span><br><span class=\"line\">        t2 = time.time()</span><br><span class=\"line\">        print(<span class=\"string\">\"%s running time %s secs.\"</span> % (func.__name__, t2 - t1))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料-1\"><a href=\"#参考资料-1\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>博客部分图片截取自 <a href=\"https://visualgo.net/zh/sorting\" target=\"_blank\" rel=\"noopener\">https://visualgo.net/zh/sorting</a></li>\n<li><a href=\"http://bubkoo.com\" target=\"_blank\" rel=\"noopener\">http://bubkoo.com</a></li>\n<li><a href=\"http://chenyvehtung.github.io/2017/02/26/sort-algorithms.html\" target=\"_blank\" rel=\"noopener\">http://chenyvehtung.github.io/2017/02/26/sort-algorithms.html</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/Category:%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95\" target=\"_blank\" rel=\"noopener\">维基百科-排序算法</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>重点:</strong></p>\n<ul>\n<li>有序区</li>\n<li>无序区</li>\n</ul>\n<h1 id=\"冒泡排序（BUB）\"><a href=\"#冒泡排序（BUB）\" class=\"headerlink\" title=\"冒泡排序（BUB）\"></a>冒泡排序（BUB）</h1><blockquote>\n<p>列表每两个相邻的数, 如果前边的比后边的大, 那么交换这两个数</p>\n</blockquote>\n<p><strong>冒泡排序算法的流程如下：</strong></p>\n<ol>\n<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>\n<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</li>\n<li>针对所有的元素重复以上的步骤，除了最后一个。</li>\n<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li>\n</ol>\n<p><img src=\"https://i.imgur.com/T0nk855.gif\" alt=\"冒泡排序\"></p>\n<p><strong>关键点:</strong>  趟, 无序区</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># O(n²) 时间复杂度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bubble_sort</span><span class=\"params\">(li)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(li) &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> li</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(li)<span class=\"number\">-1</span>): <span class=\"comment\"># i 是趟</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(len(li)-i - <span class=\"number\">1</span>): <span class=\"comment\"># j 是指针</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> li[j] &gt; li[j+<span class=\"number\">1</span>]:</span><br><span class=\"line\">                li[j], li[j+<span class=\"number\">1</span>] = li[j+<span class=\"number\">1</span>] , li[j]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> li</span><br><span class=\"line\">li = list(range(<span class=\"number\">10000</span>))</span><br><span class=\"line\"><span class=\"keyword\">import</span> random <span class=\"keyword\">as</span> rd</span><br><span class=\"line\">rd.shuffle(li) <span class=\"comment\"># 打乱顺序</span></span><br><span class=\"line\">print(li)</span><br><span class=\"line\">print(bubble_sort(li))</span><br></pre></td></tr></table></figure>\n<h2 id=\"优化版\"><a href=\"#优化版\" class=\"headerlink\" title=\"优化版\"></a>优化版</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bubble_sort</span><span class=\"params\">(li)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(li) &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> li</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(li) - <span class=\"number\">1</span>):  <span class=\"comment\"># i 是趟</span></span><br><span class=\"line\">        exchange = Flase</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(len(li) - i - <span class=\"number\">1</span>):  <span class=\"comment\"># j 是指针</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> li[j] &gt; li[j + <span class=\"number\">1</span>]:</span><br><span class=\"line\">                li[j], li[j + <span class=\"number\">1</span>] = li[j + <span class=\"number\">1</span>], li[j]</span><br><span class=\"line\">                exchange = <span class=\"keyword\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> exchange:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> li</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>空间时间复杂度</th>\n<th>O(1)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>最坏时间复杂度</td>\n<td>O(n²)</td>\n</tr>\n<tr>\n<td>最优时间复杂度</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>平均时间复杂度</td>\n<td>O(n²)</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"选择排序（SEL）\"><a href=\"#选择排序（SEL）\" class=\"headerlink\" title=\"选择排序（SEL）\"></a>选择排序（SEL）</h1><p>每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。<br><img src=\"https://i.imgur.com/Y7JK85g.gif\" alt=\"选择排序\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">select_sort</span><span class=\"params\">(li)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(li) - <span class=\"number\">1</span>):  <span class=\"comment\"># i 是趟</span></span><br><span class=\"line\">        min_doc = i</span><br><span class=\"line\">        <span class=\"comment\"># 找i位置到最后位置范围内最小的数</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(i, len(li)):  <span class=\"comment\"># i可以换成i+1,省去和自己比</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> li[j] &lt; li[min_doc]:</span><br><span class=\"line\">                min_doc = j</span><br><span class=\"line\">        <span class=\"comment\"># 和无序区第一个数作交换</span></span><br><span class=\"line\">        <span class=\"comment\"># 可以加上 i==min_loc 的判断,省去和自己换</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> min_doc != i:</span><br><span class=\"line\">            li[min_doc], li[i] = li[i], li[min_doc]</span><br><span class=\"line\">        <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">        i, j, min_doc 都是下标</span></span><br><span class=\"line\"><span class=\"string\">        '''</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> li</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>空间时间复杂度</th>\n<th>O(1)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>最坏时间复杂度</td>\n<td>O(n²)</td>\n</tr>\n<tr>\n<td>最优时间复杂度</td>\n<td>O(n²)</td>\n</tr>\n<tr>\n<td>平均时间复杂度</td>\n<td>O(n²)</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"插入排序（INS）\"><a href=\"#插入排序（INS）\" class=\"headerlink\" title=\"插入排序（INS）\"></a>插入排序（INS）</h1><p>插入排序每次取出数组后半部分的第一个元素，在排好序的前半部分中，为其找到最合适的位置并进行插入(扑克牌)<br><img src=\"https://i.imgur.com/UzdoF4Z.gif\" alt=\"插入排序\"></p>\n<ul>\n<li>列表被分为有序区和无序区两个部分。最初有序区只有一个元素。</li>\n<li>每次从无序区选择一个元素，插入到有序区的位置，直到无序区变空。</li>\n</ul>\n<p><strong>插入排序算法的流程如下：</strong></p>\n<ol>\n<li>从第一个元素开始，该元素可以认为已经被排序</li>\n<li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li>\n<li>如果该元素（已排序）大于新元素，将该元素移到下一位置</li>\n<li>重复步骤 3，直到找到已排序的元素小于或者等于新元素的位置</li>\n<li>将新元素插入到该位置后</li>\n<li>重复步骤 2~5</li>\n</ol>\n<p><strong>关键点：</strong></p>\n<ul>\n<li>摸到的牌</li>\n<li>手里的牌 (有序)</li>\n</ul>\n<h2 id=\"code-1\"><a href=\"#code-1\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert_sort</span><span class=\"params\">(li)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(li) == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> li</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, len(li)):  <span class=\"comment\"># i代表每次摸到的牌的下标</span></span><br><span class=\"line\">        tmp = li[i]</span><br><span class=\"line\">        j = i - <span class=\"number\">1</span>  <span class=\"comment\"># j代表手里最后一张牌的下标</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> j &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> tmp &lt; li[j]: <span class=\"comment\"># 摸到的牌比手牌最后的牌小</span></span><br><span class=\"line\">            li[j + <span class=\"number\">1</span>] = li[j] <span class=\"comment\"># 把最大的手牌往后挪动</span></span><br><span class=\"line\">            j -= <span class=\"number\">1</span></span><br><span class=\"line\">        li[j + <span class=\"number\">1</span>] = tmp <span class=\"comment\"># 摸到的牌比手牌最后的牌大</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> li</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>空间时间复杂度</th>\n<th>O(1)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>最坏时间复杂度</td>\n<td>O(n²)</td>\n</tr>\n<tr>\n<td>最优时间复杂度</td>\n<td>O(n²)</td>\n</tr>\n<tr>\n<td>平均时间复杂度</td>\n<td>O(n²)</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"快速排序（QUI）\"><a href=\"#快速排序（QUI）\" class=\"headerlink\" title=\"快速排序（QUI）\"></a>快速排序（QUI）</h1><p>博主看动图不是很理解, 建议看 <a href=\"http://bbs.ahalei.com/thread-4419-1-1.html\" target=\"_blank\" rel=\"noopener\">这里</a><br><img src=\"https://upload.wikimedia.org/wikipedia/commons/6/6a/Sorting_quicksort_anim.gif\" alt=\"快速排序\"><br><img src=\"https://i.imgur.com/mEG5lt2.gif\" alt=\"快速排序\"></p>\n<p><strong>快速排序算法的流程如下：</strong></p>\n<ul>\n<li>取一个元素p（第一个元素），使元素p归位；</li>\n<li>列表被p分成两部分，左边都比p小，右边都比p大；</li>\n<li>递归完成排序。</li>\n</ul>\n<p><strong>关键点：</strong></p>\n<ul>\n<li>整理(让元素归位)</li>\n<li>递归</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">partition</span><span class=\"params\">(data, left, right)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    partition:归位函数</span></span><br><span class=\"line\"><span class=\"string\">    右手左手一个慢动作</span></span><br><span class=\"line\"><span class=\"string\">    右手左手慢动作重播</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\">    tmp = data[left] <span class=\"comment\"># 取基准数</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> left &lt; right:</span><br><span class=\"line\">        <span class=\"comment\"># 如果需要降序排序的话, 就把 data[right] &gt;= tmp 中的小于等于改为大于等于</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> data[right] &gt;= tmp:</span><br><span class=\"line\">            right -= <span class=\"number\">1</span> <span class=\"comment\"># 左移</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> left &lt; right: <span class=\"comment\"># 如果上面的循环是因为找到了 right 小于 tmp 的数而跳出循环</span></span><br><span class=\"line\">            data[left] = data[right] <span class=\"comment\"># 把小于 tmp 的这个元素放到 tmp 的位置上</span></span><br><span class=\"line\">        <span class=\"comment\"># 如果需要降序排序的话, 就把 data[right] &gt;= tmp 中的大于等于改为小于等于</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> data[left] &lt;= tmp:</span><br><span class=\"line\">            left += <span class=\"number\">1</span> <span class=\"comment\"># 右移</span></span><br><span class=\"line\">        data[right] = data[left] <span class=\"comment\"># 把大于 tmp 的这个元素放到 tmp 的位置上</span></span><br><span class=\"line\">    data[left] = tmp <span class=\"comment\"># 那个 mid 回来</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> left</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_quick_sort</span><span class=\"params\">(data, left, right)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> left &lt; right:</span><br><span class=\"line\">        mid = partition(data, left, right)</span><br><span class=\"line\">        _quick_sort(data, left, mid - <span class=\"number\">1</span>)</span><br><span class=\"line\">        _quick_sort(data, mid + <span class=\"number\">1</span>, right)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@cal_time</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quick_sort</span><span class=\"params\">(data)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _quick_sort(data,<span class=\"number\">0</span>,len(data)<span class=\"number\">-1</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"优化版-1\"><a href=\"#优化版-1\" class=\"headerlink\" title=\"优化版\"></a>优化版</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 来自知乎 @风满楼</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quick_sort</span><span class=\"params\">(lists, left, right)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> left &gt; right:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lists</span><br><span class=\"line\">    low, high = left, right</span><br><span class=\"line\">    key = lists[left]  <span class=\"comment\"># key即是基准数</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> left &lt; right:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> lists[right] &gt;= key:</span><br><span class=\"line\">            right -= <span class=\"number\">1</span> <span class=\"comment\"># 左移</span></span><br><span class=\"line\">        lists[left] = lists[right] </span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> lists[left] &lt;= key:</span><br><span class=\"line\">            left += <span class=\"number\">1</span> <span class=\"comment\"># 右移</span></span><br><span class=\"line\">        lists[right] = lists[left]</span><br><span class=\"line\">    lists[right] = key</span><br><span class=\"line\">    quick_sort(lists, low, left - <span class=\"number\">1</span>)</span><br><span class=\"line\">    quick_sort(lists, right + <span class=\"number\">1</span>, high)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lists</span><br><span class=\"line\"></span><br><span class=\"line\">quick(data,<span class=\"number\">0</span>,len(data)<span class=\"number\">-1</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 快排精简版</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quick</span><span class=\"params\">(data)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> data == []:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> []</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        pivot = data[<span class=\"number\">0</span>]</span><br><span class=\"line\">        lesser = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> data[<span class=\"number\">1</span>:] <span class=\"keyword\">if</span> x &lt;= pivot]</span><br><span class=\"line\">        greater = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> data[<span class=\"number\">1</span>:] <span class=\"keyword\">if</span> x &gt; pivot]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> quick(lesser) + [pivot] + quick(greater)</span><br></pre></td></tr></table></figure>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>某些极端的情况下复杂度非常高, 如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">9 8 7 6 5 4 3 2 1</span><br></pre></td></tr></table></figure>\n<p>出现的概率不多, 属于极端情况, 解决方法: 选基准的时候随机选一个数与第一个数交换。</p>\n<table>\n<thead>\n<tr>\n<th>空间时间复杂度</th>\n<th>根据实现的方式不同而不同</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>最坏时间复杂度</td>\n<td>O(n²)</td>\n</tr>\n<tr>\n<td>最优时间复杂度</td>\n<td>O(nlogn)</td>\n</tr>\n<tr>\n<td>平均时间复杂度</td>\n<td>O(nlogn)</td>\n</tr>\n</tbody>\n</table>\n<p>PS: 看到一个最狠的快排</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># https://github.com/qiwsir/algorithm/blob/master/quick_sort.md</span></span><br><span class=\"line\">qs = <span class=\"keyword\">lambda</span> xs : ( (len(xs) &lt;= <span class=\"number\">1</span> <span class=\"keyword\">and</span> [xs]) <span class=\"keyword\">or</span> [ qs( [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> xs[<span class=\"number\">1</span>:] <span class=\"keyword\">if</span> x &lt; xs[<span class=\"number\">0</span>]] ) + [xs[<span class=\"number\">0</span>]] + qs( [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> xs[<span class=\"number\">1</span>:] <span class=\"keyword\">if</span> x &gt;= xs[<span class=\"number\">0</span>]] ) ] )[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"http://ictar.github.io/2015/12/08/%E4%B9%9D%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%8F%8A%E5%85%B6Python%E5%AE%9E%E7%8E%B0%E4%B9%8B%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/\" target=\"_blank\" rel=\"noopener\">Ele - A面</a></li>\n<li><a href=\"http://bbs.ahalei.com/thread-4419-1-1.html\" target=\"_blank\" rel=\"noopener\">http://bbs.ahalei.com/thread-4419-1-1.html</a></li>\n<li><a href=\"http://blog.csdn.net/v_july_v/article/details/6116297\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/v_july_v/article/details/6116297</a></li>\n<li><a href=\"https://www.zhihu.com/question/26786398\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/26786398</a></li>\n<li><a href=\"https://hellolynn.hpd.io/2017/08/03/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-quick-sort/\" target=\"_blank\" rel=\"noopener\">https://hellolynn.hpd.io/2017/08/03/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-quick-sort/</a></li>\n<li><a href=\"https://github.com/qiwsir/algorithm/blob/master/quick_sort.md\" target=\"_blank\" rel=\"noopener\">https://github.com/qiwsir/algorithm/blob/master/quick_sort.md</a></li>\n</ul>\n<h1 id=\"堆排序（HEAP）\"><a href=\"#堆排序（HEAP）\" class=\"headerlink\" title=\"堆排序（HEAP）\"></a>堆排序（HEAP）</h1><p>堆排序用的是<a href=\"/2017/12/data-structure-tree.html\">树</a>的结构<br><img src=\"https://i.imgur.com/JH2f8TO.jpg\" alt=\"树（数据结构）\"></p>\n<h2 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h2><ul>\n<li>大根堆：一棵完全二叉树，满足任一节点都比其孩子节点大</li>\n<li>小根堆：一棵完全二叉树，满足任一节点都比其孩子节点小</li>\n</ul>\n<p><img src=\"https://i.imgur.com/ShbrOiR.jpg\" alt=\"大小根堆\"></p>\n<p><strong>假设：节点的左右子树都是堆，但自身不是堆</strong></p>\n<blockquote>\n<p>当根节点的左右子树都是堆时，可以通过一次向下的调整来将其变换成一个堆。</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/Vyt45u6.gif\" alt=\"调整\"></p>\n<p><strong>堆排序过程:</strong></p>\n<ol>\n<li>建立堆</li>\n<li>得到堆顶元素，为最大元素</li>\n<li>去掉堆顶，将堆最后一个元素放到堆顶，此时可通过一次调整重新使堆有序。</li>\n<li>堆顶元素为第二大元素。</li>\n<li>重复步骤3，直到堆变空。</li>\n</ol>\n<ul>\n<li>构建堆</li>\n</ul>\n<p>先从最小的子树开始看, 最后一步看整个的堆; 从最后一个非叶子节点为根的子树开始做调整<br><img src=\"https://i.imgur.com/VF7ia3X.gif\" alt=\"构建堆\"></p>\n<ul>\n<li>挨个出数</li>\n</ul>\n<p><img src=\"https://i.imgur.com/4fYb7L4.gif\" alt=\"挨个出数\"></p>\n<h2 id=\"code-2\"><a href=\"#code-2\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sift</span><span class=\"params\">(data, low, high)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    调整函数</span></span><br><span class=\"line\"><span class=\"string\">    data: 列表</span></span><br><span class=\"line\"><span class=\"string\">    low：待调整的子树的根位置</span></span><br><span class=\"line\"><span class=\"string\">    high：待调整的子树的最后一个节点的位置</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    i = low</span><br><span class=\"line\">    j = <span class=\"number\">2</span> * i + <span class=\"number\">1</span></span><br><span class=\"line\">    tmp = data[i]</span><br><span class=\"line\">    <span class=\"comment\"># i指向空位置</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> j&lt;=high:      <span class=\"comment\">#领导已经撸到底了</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> j != high <span class=\"keyword\">and</span> data[j] &lt; data[j+<span class=\"number\">1</span>]:</span><br><span class=\"line\">            j += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\">#j指向数值大的孩子</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> tmp &lt; data[j]:   <span class=\"comment\">#如果小领导比撸下来的大领导能力值大</span></span><br><span class=\"line\">            data[i] = data[j]</span><br><span class=\"line\">            i = j</span><br><span class=\"line\">            j = <span class=\"number\">2</span>*i+<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>       <span class=\"comment\">#撸下来的领导比候选的领导能力值大</span></span><br><span class=\"line\">    data[i] = tmp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">heap_sort</span><span class=\"params\">(data)</span>:</span></span><br><span class=\"line\">    n = len(data)</span><br><span class=\"line\">    <span class=\"comment\"># 建堆 从最后一个非叶子节点所以是 -1(2) 列表倒序</span></span><br><span class=\"line\">    <span class=\"comment\"># n//2-1 找最后一个非叶子节点</span></span><br><span class=\"line\">    <span class=\"comment\"># -1(1) 顾前不顾后</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n//<span class=\"number\">2</span><span class=\"number\">-1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">        sift(data, i,  n - <span class=\"number\">1</span>) <span class=\"comment\"># 这里的 n-1 是把所有子树的 high 都设置成整个堆的 high</span></span><br><span class=\"line\">    <span class=\"comment\"># 挨个出数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> high <span class=\"keyword\">in</span> range(n - <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">        data[<span class=\"number\">0</span>], data[high] = data[high], data[<span class=\"number\">0</span>]</span><br><span class=\"line\">        sift(data, <span class=\"number\">0</span>, high - <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>空间时间复杂度</th>\n<th>O(n)，O(1)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>最坏时间复杂度</td>\n<td>O(nlogn)</td>\n</tr>\n<tr>\n<td>最优时间复杂度</td>\n<td>O(nlogn)</td>\n</tr>\n<tr>\n<td>平均时间复杂度</td>\n<td>O(nlogn)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><ul>\n<li><a href=\"/数据结构：树/\">数据结构：树</a></li>\n<li><a href=\"https://www.cnblogs.com/chengxiao/p/6129630.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/chengxiao/p/6129630.html</a></li>\n<li><a href=\"http://bubkoo.com/2014/01/14/sort-algorithm/heap-sort/\" target=\"_blank\" rel=\"noopener\">http://bubkoo.com/2014/01/14/sort-algorithm/heap-sort/</a></li>\n<li><a href=\"http://wuchong.me/blog/2014/02/09/algorithm-sort-summary/\" target=\"_blank\" rel=\"noopener\">http://wuchong.me/blog/2014/02/09/algorithm-sort-summary/</a></li>\n</ul>\n<h1 id=\"归并排序（MER）\"><a href=\"#归并排序（MER）\" class=\"headerlink\" title=\"归并排序（MER）\"></a>归并排序（MER）</h1><p><img src=\"https://i.imgur.com/7sbKXQt.gif\" alt=\"归并排序\"><br><img src=\"https://i.imgur.com/FN392sX.gif\" alt=\"归并排序\"><br><strong>归并排序思路:</strong></p>\n<ol>\n<li>分解：将列表越分越小，直至分成一个元素。</li>\n<li>一个元素是有序的。</li>\n<li>合并：将两个有序列表归并，列表越来越大。</li>\n</ol>\n<p><img src=\"https://i.imgur.com/dXgFcwQ.png\" alt=\"归并排序流程\"></p>\n<ol>\n<li>递归地将数组划分为两部分</li>\n<li>直到两个子数组元素都为1时，返回并将两个数组进行排序融合</li>\n<li>逐步返回，并递归融合，最终使得数组有序</li>\n</ol>\n<h2 id=\"code-3\"><a href=\"#code-3\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">merge</span><span class=\"params\">(data, low, mid, high)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''一次归并'''</span></span><br><span class=\"line\">    i = low</span><br><span class=\"line\">    j = mid + <span class=\"number\">1</span></span><br><span class=\"line\">    ltmp = []  <span class=\"comment\"># 临时列表</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt;= mid <span class=\"keyword\">and</span> j &lt;= high:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> data[i] &lt;= data[j]:</span><br><span class=\"line\">            ltmp.append((data[i]))</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:  <span class=\"comment\"># data[i] &gt; data[j]</span></span><br><span class=\"line\">            ltmp.append(data[j])</span><br><span class=\"line\">            j += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt;= mid:</span><br><span class=\"line\">        ltmp.append(data[i])</span><br><span class=\"line\">        i += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> j &lt;= high:</span><br><span class=\"line\">        ltmp.append(data[j])</span><br><span class=\"line\">        j += <span class=\"number\">1</span></span><br><span class=\"line\">    data[low:high + <span class=\"number\">1</span>] = ltmp</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mergesort</span><span class=\"params\">(data, low, high)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''归并排序'''</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> low &lt; high:</span><br><span class=\"line\">        mid = (low + high) // <span class=\"number\">2</span> <span class=\"comment\"># 获取中间位置</span></span><br><span class=\"line\">        mergesort(data, low, mid) <span class=\"comment\"># 分解左半部分</span></span><br><span class=\"line\">        mergesort(data, mid + <span class=\"number\">1</span>, high) <span class=\"comment\"># 分解右半部分</span></span><br><span class=\"line\">        merge(data, low, mid, high) <span class=\"comment\"># 归并</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br></pre></td></tr></table></figure>\n<h2 id=\"加深理解\"><a href=\"#加深理解\" class=\"headerlink\" title=\"加深理解\"></a>加深理解</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">        y = x // <span class=\"number\">2</span></span><br><span class=\"line\">        func(y)</span><br><span class=\"line\">        func(y)</span><br><span class=\"line\">        print(y)</span><br><span class=\"line\">func(<span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"comment\"># 看最后的输出 画图</span></span><br></pre></td></tr></table></figure>\n<p>或者结合<a href=\"/递归/\">递归</a></p>\n<p><img src=\"https://i.imgur.com/XBeGCIP.png\" alt=\"递归输出\"></p>\n<table>\n<thead>\n<tr>\n<th>空间时间复杂度</th>\n<th>O(n)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>最坏时间复杂度</td>\n<td>O(nlogn)</td>\n</tr>\n<tr>\n<td>最优时间复杂度</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>平均时间复杂度</td>\n<td>O(nlogn)</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>快速排序、堆排序、归并排序 - 小结</li>\n</ul>\n<p>三种排序算法的时间复杂度都是O(nlogn)</p>\n<ul>\n<li>运行时间:</li>\n</ul>\n<p><code>快速排序</code> &lt; <code>归并排序</code> &lt; <code>堆排序</code></p>\n<p>三种排序算法的缺点：</p>\n<table>\n<thead>\n<tr>\n<th>快速排序</th>\n<th>极端情况下排序效率低</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>归并排序</td>\n<td>需要额外的内存开销</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>在快的排序算法中相对较慢</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"计数排序（COU）\"><a href=\"#计数排序（COU）\" class=\"headerlink\" title=\"计数排序（COU）\"></a>计数排序（COU）</h1><p><img src=\"https://i.imgur.com/piK8FYS.gif\" alt=\"计数排序\"></p>\n<blockquote>\n<p>题: 现在有一个列表，列表中的数范围都在 0 到 100 之间，列表长度大约为 100 万。设计算法在 O(n) 时间复杂度内将列表进行排序。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count_sort</span><span class=\"params\">(data, maxnum = <span class=\"number\">100</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''计数排序  O(n)'''</span></span><br><span class=\"line\">    count = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(maxnum+<span class=\"number\">1</span>)]</span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">        count[i] += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> num,count <span class=\"keyword\">in</span> enumerate(count):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(count):</span><br><span class=\"line\">            result.append(num)</span><br><span class=\"line\"><span class=\"comment\"># 或</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count_sort</span><span class=\"params\">(data, max_num)</span>:</span></span><br><span class=\"line\">    count = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(max_num + <span class=\"number\">1</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">        count[num] += <span class=\"number\">1</span></span><br><span class=\"line\">    i = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> num, m <span class=\"keyword\">in</span> enumerate(count):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(m):</span><br><span class=\"line\">            data[i] = num</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>因为要开额外的内存空间，所以使用并不多。计数排序限定元素不会太大的时候，如：年龄可以使用计数排序</p>\n<h1 id=\"希尔排序（SHE）\"><a href=\"#希尔排序（SHE）\" class=\"headerlink\" title=\"希尔排序（SHE）\"></a>希尔排序（SHE）</h1><p>希尔排序是一种分组插入排序算法。O(1.3n)</p>\n<p><img src=\"https://i.imgur.com/s1gQYYA.gif\" alt=\"希尔排序\"></p>\n<ol>\n<li>以数组元素长度的一半做为初始步长gap，将数组划分为gap个子数组</li>\n<li>循环切换遍历子数组，在子数组内分别进行插入排序</li>\n<li>将gap更新为gap/2，重复上述步骤1，2，直到gap为1</li>\n</ol>\n<p><img src=\"https://i.imgur.com/HXBOgwr.jpg\" alt=\"步长为4的shell sort示例\"></p>\n<p><strong>希尔排序思路：</strong></p>\n<ol>\n<li>先取一个正整数 d<sub>1</sub>(d<sub>1</sub> &lt; n)，把全部记录分成 d<sub>1</sub> 个组，所有距离为 d<sub>1</sub> 的倍数的记录看成一组，然后在各组内进行插入排序</li>\n<li>然后取 d<sub>2</sub>(d<sub>2</sub> &lt; d<sub>1</sub>)</li>\n<li>重复上述分组和排序操作；直到取 d<sub>i</sub> = 1(i &gt;= 1) 位置，即所有记录成为一个组，最后对这个组进行插入排序。一般选 d1 约为 n/2，d<sub>2</sub> 为 d<sub>1</sub> /2， d<sub>3</sub> 为 d<sub>2</sub>/2 ，…， d<sub>i</sub> = 1。</li>\n</ol>\n<p>希尔排序每趟并不使某些元素有序，而是使整体数据越来越接近有序；最后一趟排序使得所有数据有序。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改插入排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert_sort_gap</span><span class=\"params\">(data, gap)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(gap, len(data)):</span><br><span class=\"line\">        tmp = data[i]</span><br><span class=\"line\">        j = i - gap</span><br><span class=\"line\">        <span class=\"keyword\">while</span> j &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> tmp &lt; data[j]:</span><br><span class=\"line\">            data[j + gap] = data[j]</span><br><span class=\"line\">            j = j - gap</span><br><span class=\"line\">        data[j + gap] = tmp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">shell_sort</span><span class=\"params\">(data)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''希尔排序'''</span></span><br><span class=\"line\">    d = len(data) // <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> d &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        insert_sort_gap(data,d)</span><br><span class=\"line\">        d = d // <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br></pre></td></tr></table></figure>\n<h2 id=\"优化版-2\"><a href=\"#优化版-2\" class=\"headerlink\" title=\"优化版\"></a>优化版</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">shell_sort</span><span class=\"params\">(data)</span>:</span></span><br><span class=\"line\">    n = len(data)</span><br><span class=\"line\">    gap = len(data) // <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> gap &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(gap, n):</span><br><span class=\"line\">            tmp = data[i]</span><br><span class=\"line\">            j = i - gap</span><br><span class=\"line\">            <span class=\"keyword\">while</span> j &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> tmp &lt; data[j]:</span><br><span class=\"line\">                data[j + gap] = data[j]</span><br><span class=\"line\">                j -= gap</span><br><span class=\"line\">            data[j + gap] = tmp</span><br><span class=\"line\">        gap = gap // <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br></pre></td></tr></table></figure>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><h2 id=\"排序算法指标\"><a href=\"#排序算法指标\" class=\"headerlink\" title=\"排序算法指标\"></a>排序算法指标</h2><p><img src=\"https://i.imgur.com/kkVSVGH.jpg\" alt=\"排序算法指标\"></p>\n<h2 id=\"排序的稳定性\"><a href=\"#排序的稳定性\" class=\"headerlink\" title=\"排序的稳定性\"></a>排序的稳定性</h2><p>排序关键字相同的情况下，对象的相对位置不变</p>\n<h2 id=\"计时装饰器\"><a href=\"#计时装饰器\" class=\"headerlink\" title=\"计时装饰器\"></a>计时装饰器</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cal_time</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">        t1 = time.time()</span><br><span class=\"line\">        x = func(*args, **kwargs)</span><br><span class=\"line\">        t2 = time.time()</span><br><span class=\"line\">        print(<span class=\"string\">\"%s running time %s secs.\"</span> % (func.__name__, t2 - t1))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料-1\"><a href=\"#参考资料-1\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>博客部分图片截取自 <a href=\"https://visualgo.net/zh/sorting\" target=\"_blank\" rel=\"noopener\">https://visualgo.net/zh/sorting</a></li>\n<li><a href=\"http://bubkoo.com\" target=\"_blank\" rel=\"noopener\">http://bubkoo.com</a></li>\n<li><a href=\"http://chenyvehtung.github.io/2017/02/26/sort-algorithms.html\" target=\"_blank\" rel=\"noopener\">http://chenyvehtung.github.io/2017/02/26/sort-algorithms.html</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/Category:%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95\" target=\"_blank\" rel=\"noopener\">维基百科-排序算法</a></li>\n</ul>\n"},{"title":"node:hello world!","date":"2018-03-31T03:43:13.000Z","keywords":null,"description":null,"_content":"\n\n**nvm**：`nodeJs`版本管理工具，管理`nodejs`版本和`npm`版本\n**nodeJs**：`reactNative`开发过程中所需要的代码库。\n**npm**：是随同`nodeJs`一起安装的包管理工具，`npm`管理对应`nodeJs`的第三方插件\n\n# 依赖关系\n\n**nvm、nodejs、npm的关系：**\n\n<!-- more -->\n\n1. nvm管理构建`nodejs`和对应的`npm`，`npm`管理对应`nodejs`的第三方插件\n2. 一个reactNative项目只包含一个`nodejs`和`npm`,`npm`和`nodejs`是配套关系，一对一的关系。\n\n![nvm构建reactNavite的关系图](https://i.imgur.com/1PMyqE7.jpg)\n\nTo install or update nvm, you can use the [install script][2] using cURL:\n\n\n# 安装\n\n```sh\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash\n```\n\nor Wget:\n\n```sh\nwget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash\n```\n\n<sub>The script clones the nvm repository to `~/.nvm` and adds the source line to your profile (`~/.bash_profile`, `~/.zshrc`, `~/.profile`, or `~/.bashrc`).</sub>\n\n```sh\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm\n```\n\n```sh\n# 安装 node 指定版本\nnvm i 8.11.1\n# 切换指定版本\nnvm use 8.11.1\n# 查看版本\nnpm -v\nnode -v\n```\n\n# 更换源\n\n\n```sh\n# 临时使用淘宝源\nnpm --registry https://registry.npm.taobao.org install node-red-contrib-composer@latest\n# 全局配置切换到淘宝源\nnpm config set registry https://registry.npm.taobao.org\n# 全局配置切回到官方源\nnpm config set registry http://www.npmjs.org\n# 检测是否切换到了淘宝源\nnpm info underscore\n# 查看源\nnpm config get registry\n```\n\n# Simple App\n\n[阮一峰教程](https://github.com/ruanyf/jstraining/blob/master/demos/README.md#simple-app)\n\n```sh\ncnpm i -g webpack\ncnpm i -g webpack-dev-server\n```\n\n\n\n# 参考\n- [nvm、nodejs、npm的关系](https://www.cnblogs.com/qqpw/p/6597295.html)\n- [nvm 安装（仓库地址）](https://github.com/creationix/nvm/blob/master/README.md)\n- [阮一峰 node （git）](https://github.com/ruanyf/jstraining/blob/master/docs/node.md)\n- [JavaScript 全栈工程师培训教程](http://www.ruanyifeng.com/blog/2016/11/javascript.html)\n- [切换NPM源(淘宝源)](https://blog.csdn.net/qq_27818541/article/details/62886790?locationNum=4&fps=1)\n\n\n","source":"_posts/node-hello.md","raw":"---\ntitle: node:hello world!\ndate: 2018-03-31 11:43:13\ntags:\ncategories: node\nkeywords:\ndescription:\n---\n\n\n**nvm**：`nodeJs`版本管理工具，管理`nodejs`版本和`npm`版本\n**nodeJs**：`reactNative`开发过程中所需要的代码库。\n**npm**：是随同`nodeJs`一起安装的包管理工具，`npm`管理对应`nodeJs`的第三方插件\n\n# 依赖关系\n\n**nvm、nodejs、npm的关系：**\n\n<!-- more -->\n\n1. nvm管理构建`nodejs`和对应的`npm`，`npm`管理对应`nodejs`的第三方插件\n2. 一个reactNative项目只包含一个`nodejs`和`npm`,`npm`和`nodejs`是配套关系，一对一的关系。\n\n![nvm构建reactNavite的关系图](https://i.imgur.com/1PMyqE7.jpg)\n\nTo install or update nvm, you can use the [install script][2] using cURL:\n\n\n# 安装\n\n```sh\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash\n```\n\nor Wget:\n\n```sh\nwget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash\n```\n\n<sub>The script clones the nvm repository to `~/.nvm` and adds the source line to your profile (`~/.bash_profile`, `~/.zshrc`, `~/.profile`, or `~/.bashrc`).</sub>\n\n```sh\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm\n```\n\n```sh\n# 安装 node 指定版本\nnvm i 8.11.1\n# 切换指定版本\nnvm use 8.11.1\n# 查看版本\nnpm -v\nnode -v\n```\n\n# 更换源\n\n\n```sh\n# 临时使用淘宝源\nnpm --registry https://registry.npm.taobao.org install node-red-contrib-composer@latest\n# 全局配置切换到淘宝源\nnpm config set registry https://registry.npm.taobao.org\n# 全局配置切回到官方源\nnpm config set registry http://www.npmjs.org\n# 检测是否切换到了淘宝源\nnpm info underscore\n# 查看源\nnpm config get registry\n```\n\n# Simple App\n\n[阮一峰教程](https://github.com/ruanyf/jstraining/blob/master/demos/README.md#simple-app)\n\n```sh\ncnpm i -g webpack\ncnpm i -g webpack-dev-server\n```\n\n\n\n# 参考\n- [nvm、nodejs、npm的关系](https://www.cnblogs.com/qqpw/p/6597295.html)\n- [nvm 安装（仓库地址）](https://github.com/creationix/nvm/blob/master/README.md)\n- [阮一峰 node （git）](https://github.com/ruanyf/jstraining/blob/master/docs/node.md)\n- [JavaScript 全栈工程师培训教程](http://www.ruanyifeng.com/blog/2016/11/javascript.html)\n- [切换NPM源(淘宝源)](https://blog.csdn.net/qq_27818541/article/details/62886790?locationNum=4&fps=1)\n\n\n","slug":"node-hello","published":1,"updated":"2018-04-01T13:23:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfgx5oxa001dmxgoe27lw4zi","content":"<p><strong>nvm</strong>：<code>nodeJs</code>版本管理工具，管理<code>nodejs</code>版本和<code>npm</code>版本<br><strong>nodeJs</strong>：<code>reactNative</code>开发过程中所需要的代码库。<br><strong>npm</strong>：是随同<code>nodeJs</code>一起安装的包管理工具，<code>npm</code>管理对应<code>nodeJs</code>的第三方插件</p>\n<h1 id=\"依赖关系\"><a href=\"#依赖关系\" class=\"headerlink\" title=\"依赖关系\"></a>依赖关系</h1><p><strong>nvm、nodejs、npm的关系：</strong></p>\n<a id=\"more\"></a>\n<ol>\n<li>nvm管理构建<code>nodejs</code>和对应的<code>npm</code>，<code>npm</code>管理对应<code>nodejs</code>的第三方插件</li>\n<li>一个reactNative项目只包含一个<code>nodejs</code>和<code>npm</code>,<code>npm</code>和<code>nodejs</code>是配套关系，一对一的关系。</li>\n</ol>\n<p><img src=\"https://i.imgur.com/1PMyqE7.jpg\" alt=\"nvm构建reactNavite的关系图\"></p>\n<p>To install or update nvm, you can use the [install script][2] using cURL:</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash</span><br></pre></td></tr></table></figure>\n<p>or Wget:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash</span><br></pre></td></tr></table></figure>\n<p><sub>The script clones the nvm repository to <code>~/.nvm</code> and adds the source line to your profile (<code>~/.bash_profile</code>, <code>~/.zshrc</code>, <code>~/.profile</code>, or <code>~/.bashrc</code>).</sub></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> NVM_DIR=<span class=\"string\">\"<span class=\"variable\">$HOME</span>/.nvm\"</span></span><br><span class=\"line\">[ -s <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> ] &amp;&amp; \\. <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> <span class=\"comment\"># This loads nvm</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 node 指定版本</span></span><br><span class=\"line\">nvm i 8.11.1</span><br><span class=\"line\"><span class=\"comment\"># 切换指定版本</span></span><br><span class=\"line\">nvm use 8.11.1</span><br><span class=\"line\"><span class=\"comment\"># 查看版本</span></span><br><span class=\"line\">npm -v</span><br><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n<h1 id=\"更换源\"><a href=\"#更换源\" class=\"headerlink\" title=\"更换源\"></a>更换源</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 临时使用淘宝源</span></span><br><span class=\"line\">npm --registry https://registry.npm.taobao.org install node-red-contrib-composer@latest</span><br><span class=\"line\"><span class=\"comment\"># 全局配置切换到淘宝源</span></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org</span><br><span class=\"line\"><span class=\"comment\"># 全局配置切回到官方源</span></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> registry http://www.npmjs.org</span><br><span class=\"line\"><span class=\"comment\"># 检测是否切换到了淘宝源</span></span><br><span class=\"line\">npm info underscore</span><br><span class=\"line\"><span class=\"comment\"># 查看源</span></span><br><span class=\"line\">npm config get registry</span><br></pre></td></tr></table></figure>\n<h1 id=\"Simple-App\"><a href=\"#Simple-App\" class=\"headerlink\" title=\"Simple App\"></a>Simple App</h1><p><a href=\"https://github.com/ruanyf/jstraining/blob/master/demos/README.md#simple-app\" target=\"_blank\" rel=\"noopener\">阮一峰教程</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i -g webpack</span><br><span class=\"line\">cnpm i -g webpack-dev-server</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://www.cnblogs.com/qqpw/p/6597295.html\" target=\"_blank\" rel=\"noopener\">nvm、nodejs、npm的关系</a></li>\n<li><a href=\"https://github.com/creationix/nvm/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">nvm 安装（仓库地址）</a></li>\n<li><a href=\"https://github.com/ruanyf/jstraining/blob/master/docs/node.md\" target=\"_blank\" rel=\"noopener\">阮一峰 node （git）</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/11/javascript.html\" target=\"_blank\" rel=\"noopener\">JavaScript 全栈工程师培训教程</a></li>\n<li><a href=\"https://blog.csdn.net/qq_27818541/article/details/62886790?locationNum=4&amp;fps=1\" target=\"_blank\" rel=\"noopener\">切换NPM源(淘宝源)</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><strong>nvm</strong>：<code>nodeJs</code>版本管理工具，管理<code>nodejs</code>版本和<code>npm</code>版本<br><strong>nodeJs</strong>：<code>reactNative</code>开发过程中所需要的代码库。<br><strong>npm</strong>：是随同<code>nodeJs</code>一起安装的包管理工具，<code>npm</code>管理对应<code>nodeJs</code>的第三方插件</p>\n<h1 id=\"依赖关系\"><a href=\"#依赖关系\" class=\"headerlink\" title=\"依赖关系\"></a>依赖关系</h1><p><strong>nvm、nodejs、npm的关系：</strong></p>","more":"<ol>\n<li>nvm管理构建<code>nodejs</code>和对应的<code>npm</code>，<code>npm</code>管理对应<code>nodejs</code>的第三方插件</li>\n<li>一个reactNative项目只包含一个<code>nodejs</code>和<code>npm</code>,<code>npm</code>和<code>nodejs</code>是配套关系，一对一的关系。</li>\n</ol>\n<p><img src=\"https://i.imgur.com/1PMyqE7.jpg\" alt=\"nvm构建reactNavite的关系图\"></p>\n<p>To install or update nvm, you can use the [install script][2] using cURL:</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash</span><br></pre></td></tr></table></figure>\n<p>or Wget:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash</span><br></pre></td></tr></table></figure>\n<p><sub>The script clones the nvm repository to <code>~/.nvm</code> and adds the source line to your profile (<code>~/.bash_profile</code>, <code>~/.zshrc</code>, <code>~/.profile</code>, or <code>~/.bashrc</code>).</sub></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> NVM_DIR=<span class=\"string\">\"<span class=\"variable\">$HOME</span>/.nvm\"</span></span><br><span class=\"line\">[ -s <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> ] &amp;&amp; \\. <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> <span class=\"comment\"># This loads nvm</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 node 指定版本</span></span><br><span class=\"line\">nvm i 8.11.1</span><br><span class=\"line\"><span class=\"comment\"># 切换指定版本</span></span><br><span class=\"line\">nvm use 8.11.1</span><br><span class=\"line\"><span class=\"comment\"># 查看版本</span></span><br><span class=\"line\">npm -v</span><br><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n<h1 id=\"更换源\"><a href=\"#更换源\" class=\"headerlink\" title=\"更换源\"></a>更换源</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 临时使用淘宝源</span></span><br><span class=\"line\">npm --registry https://registry.npm.taobao.org install node-red-contrib-composer@latest</span><br><span class=\"line\"><span class=\"comment\"># 全局配置切换到淘宝源</span></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org</span><br><span class=\"line\"><span class=\"comment\"># 全局配置切回到官方源</span></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> registry http://www.npmjs.org</span><br><span class=\"line\"><span class=\"comment\"># 检测是否切换到了淘宝源</span></span><br><span class=\"line\">npm info underscore</span><br><span class=\"line\"><span class=\"comment\"># 查看源</span></span><br><span class=\"line\">npm config get registry</span><br></pre></td></tr></table></figure>\n<h1 id=\"Simple-App\"><a href=\"#Simple-App\" class=\"headerlink\" title=\"Simple App\"></a>Simple App</h1><p><a href=\"https://github.com/ruanyf/jstraining/blob/master/demos/README.md#simple-app\" target=\"_blank\" rel=\"noopener\">阮一峰教程</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i -g webpack</span><br><span class=\"line\">cnpm i -g webpack-dev-server</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://www.cnblogs.com/qqpw/p/6597295.html\" target=\"_blank\" rel=\"noopener\">nvm、nodejs、npm的关系</a></li>\n<li><a href=\"https://github.com/creationix/nvm/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">nvm 安装（仓库地址）</a></li>\n<li><a href=\"https://github.com/ruanyf/jstraining/blob/master/docs/node.md\" target=\"_blank\" rel=\"noopener\">阮一峰 node （git）</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/11/javascript.html\" target=\"_blank\" rel=\"noopener\">JavaScript 全栈工程师培训教程</a></li>\n<li><a href=\"https://blog.csdn.net/qq_27818541/article/details/62886790?locationNum=4&amp;fps=1\" target=\"_blank\" rel=\"noopener\">切换NPM源(淘宝源)</a></li>\n</ul>"},{"title":"Docker 操作","date":"2018-01-02T02:48:30.000Z","keywords":null,"description":"docker 基本操作","_content":"\n# why?\n- 更高效的利用系统资源\n- 更快速的启动时间\n- 一致的运行环境\n- 持续交付和部署\n- 更轻松的迁移\n- 更轻松的维护和扩展\n\n# 基本概念\n- 镜像（Image）\n- 容器（Container）\n- 仓库（Repository）\n\n理解了这三个概念，就理解了 Docker 的整个生命周期。\n\n# 获取镜像\n\n从 Docker 镜像仓库获取镜像的命令是 docker pull。其命令格式为：\n\n```sh\ndocker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]\n```\n\n**如:**\n\n```sh\n$ docker pull ubuntu:16.04\n16.04: Pulling from library/ubuntu\nbf5d46315322: Pull complete\n9f13e0ac480c: Pull complete\ne8988b5b3097: Pull complete\n40af181810e7: Pull complete\ne6f7c7e5c03e: Pull complete\nDigest: sha256:147913621d9cdea08853f6ba9116c2e27a3ceffecf3b492983ae97c3d643fbbe\nStatus: Downloaded newer image for ubuntu:16.04\n```\n## 运行\n\n```\n$ docker run -it --rm ubuntu:16.04 bash \n```\n\n说明一下上面用到的参数。\n\n- -it：这是两个参数，一个是 -i：交互式操作，一个是 -t 终端。我们这里打算进入 bash 执行一些命令并查看返回结果，因此我们需要交互式终端。\n- --rm：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 docker rm。我们这里只是随便执行个命令，看看结果，不需要排障和保留结果，因此使用 --rm 可以避免浪费空间。\n- ubuntu:16.04：这是指用 ubuntu:16.04 镜像为基础来启动容器。\n- bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 bash。\n\n进入容器后，我们可以在 Shell 下操作，执行任何所需的命令。这里，我们执行了 cat /etc/os-release，这是 Linux 常用的查看当前系统版本的命令，从返回的结果可以看到容器内是 Ubuntu 16.04.4 LTS 系统。\n\n# 启动容器\n启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态（stopped）的容器重新启动。\n\n因为 Docker 的容器实在太轻量级了，很多时候用户都是随时删除和新创建容器。\n\n## 新建并启动\n- 无交互\n\n```sh\n$ docker run ubuntu:14.04 /bin/echo 'Hello world'\nHello world\n```\n\n- 允许交互\n\n```sh\n$ docker run -t -i ubuntu:14.04 /bin/bash\nroot@af8bae53bdd3:/#\n```\n\n其中，-t 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， -i 则让容器的标准输入保持打开。\n\n**当利用 docker run 来创建容器时，Docker 在后台运行的标准操作包括：**\n\n- 检查本地是否存在指定的镜像，不存在就从公有仓库下载\n利用镜像创建并启动一个容器\n- 分配一个文件系统，并在只读的镜像层外面挂载一层可读写层\n- 从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去\n- 从地址池配置一个 ip 地址给容器\n- 执行用户指定的应用程序\n- 执行完毕后容器被终止\n\n## 启动已终止容器\n\n可以利用 docker container start 命令，直接将一个已经终止的容器启动运行。\n\n容器的核心为所执行的应用程序，所需要的资源都是应用程序运行所必需的。除此之外，并没有其它的资源。可以在伪终端中利用 ps 或 top 来查看进程信息。\n\n\n```sh\nroot@ba267838cc1b:/# ps\n  PID TTY          TIME CMD\n    1 ?        00:00:00 bash\n   11 ?        00:00:00 ps\n```\n可见，容器中仅运行了指定的 bash 应用。这种特点使得 Docker 对资源的利用率极高，是货真价实的轻量级虚拟化。\n\n# 后台运行\n需要让 Docker 在后台运行而不是直接把执行命令的结果输出在当前宿主机下。可以通过添加 -d 参数来实现。\n\n- 不使用 -d 参数运行容器。\n\n容器会把输出的结果 (STDOUT) 打印到宿主机上面\n\n- 使用了 -d 参数运行容器。\n\n```sh\n$ docker run -d ubuntu:17.10 /bin/sh -c \"while true; do echo hello world; sleep 1; done\"\n77b2dc01fe0f3f1265df143181e7b9af5e05279a884f4776ee75350ea9d8017a\n```\n\n此时容器会在后台运行并不会把输出的结果 (STDOUT) 打印到宿主机上面(输出结果可以用 docker logs 查看)。容器是否会长久运行，是和 docker run 指定的命令有关，和 -d 参数无关。\n\n使用 -d 参数启动后会返回一个唯一的 id，也可以通过 docker container ls 命令来查看容器信息。\n\n\n```sh\n$ docker container ls\nCONTAINER ID  IMAGE         COMMAND               CREATED        STATUS       PORTS NAMES\n77b2dc01fe0f  ubuntu:17.10  /bin/sh -c 'while tr  2 minutes ago  Up 1 minute        agitated_wright\n```\n要获取容器的输出信息，可以通过 docker container logs 命令。\n\n\n```sh\n$ docker container logs [container ID or NAMES]\nhello world\nhello world\nhello world\n. . .\n```\n\n\n# 终止容器\n可以使用 docker container stop 来终止一个运行中的容器。\n\n此外，当 Docker 容器中指定的应用终结时，容器也自动终止。\n\n用户通过 exit 命令或 Ctrl+d 来退出终端时，所创建的容器立刻终止。\n\n终止状态的容器可以用 docker container ls -a 命令看到。例如\n\n\n```sh\ndocker ps -a\nCONTAINER ID        IMAGE                    COMMAND                CREATED             STATUS                          PORTS               NAMES\nba267838cc1b        ubuntu:14.04             \"/bin/bash\"            30 minutes ago      Exited (0) About a minute ago                       trusting_newton\n98e5efa7d997        training/webapp:latest   \"python app.py\"        About an hour ago   Exited (0) 34 minutes ago                           backstabbing_pike\n```\n处于终止状态的容器，可以通过 docker container start 命令来重新启动。\n\n## 重新启动\n\n```sh\n$ docker container restart\n```\n此外，docker container restart 命令会将一个运行态的容器终止，然后再重新启动它。\n\n# 进入容器\n在使用 -d 参数时，容器启动后会进入后台。\n\n某些时候需要进入容器进行操作，包括使用 docker attach 命令或 docker exec 命令，推荐大家使用 docker exec 命令，因为使用 attach stdin 执行 exit 会导致容器停止。\n\n## attach 命令\ndocker attach 是 Docker 自带的命令。下面示例如何使用该命令。\n\n\n```sh\n$ docker run -dit ubuntu\n243c32535da7d142fb0e6df616a3c3ada0b8ab417937c853a9e1c251f499f550\n\n$ docker container ls\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n243c32535da7        ubuntu:latest       \"/bin/bash\"         18 seconds ago      Up 17 seconds                           nostalgic_hypatia\n\n$ docker attach 243c\nroot@243c32535da7:/#\n```\n\n## exec 命令\n**-i -t 参数**\ndocker exec 后边可以跟多个参数，这里主要说明 -i -t 参数。\n\n只用 -i 参数时，由于没有分配伪终端，界面没有我们熟悉的 Linux 命令提示符，但命令执行结果仍然可以返回。\n\n当 -i -t 参数一起使用时，则可以看到我们熟悉的 Linux 命令提示符。\n\n\n```sh\n$ docker run -dit ubuntu\n69d137adef7a8a689cbcb059e94da5489d3cddd240ff675c640c8d96e84fe1f6\n\n$ docker container ls\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n69d137adef7a        ubuntu:latest       \"/bin/bash\"         18 seconds ago      Up 17 seconds                           zealous_swirles\n\n$ docker exec -i 69d1 bash\nls\nbin\nboot\ndev\n...\n\n$ docker exec -it 69d1 bash\nroot@69d137adef7a:/#\n```\n\n# 导出和导入容器\n## 导出容器\n如果要导出本地某个容器，可以使用 docker export 命令。\n\n\n```sh\n$ docker ps -a\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                    PORTS               NAMES\n7691a814370e        ubuntu:14.04        \"/bin/bash\"         36 hours ago        Exited (0) 21 hours ago                       test\n$ docker export 7691a814370e > ubuntu.tar\n```\n\n## 导入容器快照\n可以使用 docker import 从容器快照文件中再导入为镜像，例如\n\n\n```sh\n$ cat ubuntu.tar | docker import - test/ubuntu:v1.0\n$ docker image ls\nREPOSITORY          TAG                 IMAGE ID            CREATED              VIRTUAL SIZE\ntest/ubuntu         v1.0                9d37a6082e97        About a minute ago   171.3 MB\n```\n\n此外，也可以通过指定 URL 或者某个目录来导入，例如\n\n\n```sh\n$ docker import http://example.com/exampleimage.tgz example/imagerepo\n```\n\n*注：用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。*\n\n# 删除\n## 删除容器\n\n```sh\n$ docker container rm  trusting_newton\ntrusting_newton\n```\n如果要删除一个运行中的容器，可以添加 -f 参数。Docker 会发送 SIGKILL 信号给容器。\n\n## 清理所有处于终止状态的容器\n用 docker container ls -a 命令可以查看所有已经创建的包括终止状态的容器，如果数量太多要一个个删除可能会很麻烦，用下面的命令可以清理掉所有处于终止状态的容器。\n\n\n```sh\n$ docker container prune\n```\n\n# 常用操作\n\n```sh\n$ docker --version  # docker版本\n$ docker info   # docker信息\n$ docker run --rm ubuntu:16.04 /bin/cat '/etc/os-release'\n$ docker run -it --name web  --rm ubuntu:16.04 bash\n```\n## 停止容器\n\n\n```sh\n➜ docker stop myUbuntu\nmyUbuntu\n```\n## 删除容器\n\n\n```sh\n➜ docker rm myUbuntu\nmyUbuntu\n```\n## 列出镜像\n\n```sh\n➜ docker images ls\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nnginx               latest              6b914bbcb89e        3 weeks ago         182 MB\nubuntu              14.04               7c09e61e9035        3 weeks ago         188 MB\n```\n### 列出部分镜像\n\n```sh\n$ docker image ls ubuntu\n$ docker image ls ubuntu:16.04\n```\ndocker image ls 还支持强大的过滤器参数 --filter，或者简写 -f\n\n```sh\n$ docker image ls -f since=mongo:3.2\n$ docker image ls -f \n```\n想查看某个位置之前的镜像也可以，只需要把 since 换成 before 即可。\n\n如果定义了 LABEL，还可以通过 LABEL 来过滤\n\n```sh\nlabel=com.example.version=0.1\n```\n### 以特定格式显示\n\n```sh\n$ docker image ls -q\n$ docker image ls --format \"{{.ID}}: {{.Repository}}\"\n$ docker image ls --format \"table {{.ID}}\\t{{.Repository}}\\t{{.Tag}}\"\n```\n\n## 删除镜像\n\n```sh\n$ docker rmi 7c09e61e9035\nUntagged: ubuntu:14.04\nUntagged: ...\n$ docker image rm $(docker image ls -q redis)\n```\n## 查看容器修改内容\n\n\n```sh\n$ docker diff webserver\nC /root\nA /root/.bash_history\n...\n```\n\n## 查看docker进程\n\n```sh\n➜  ~ docker ps -a\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n```\n## nginx\n\n```sh\n$ docker run --name webserver -d -p 80:80 nginx\n```\n\n# 引用\n- <http://blog.csdn.net/zhengyong15984285623/article/details/66971949>\n- <https://yeasy.gitbooks.io/docker_practice/>\n\n","source":"_posts/my-docker-note.md","raw":"---\ntitle: Docker 操作\ndate: 2018-01-02 10:48:30\ntags: docker\ncategories:\nkeywords:\ndescription: docker 基本操作\n---\n\n# why?\n- 更高效的利用系统资源\n- 更快速的启动时间\n- 一致的运行环境\n- 持续交付和部署\n- 更轻松的迁移\n- 更轻松的维护和扩展\n\n# 基本概念\n- 镜像（Image）\n- 容器（Container）\n- 仓库（Repository）\n\n理解了这三个概念，就理解了 Docker 的整个生命周期。\n\n# 获取镜像\n\n从 Docker 镜像仓库获取镜像的命令是 docker pull。其命令格式为：\n\n```sh\ndocker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]\n```\n\n**如:**\n\n```sh\n$ docker pull ubuntu:16.04\n16.04: Pulling from library/ubuntu\nbf5d46315322: Pull complete\n9f13e0ac480c: Pull complete\ne8988b5b3097: Pull complete\n40af181810e7: Pull complete\ne6f7c7e5c03e: Pull complete\nDigest: sha256:147913621d9cdea08853f6ba9116c2e27a3ceffecf3b492983ae97c3d643fbbe\nStatus: Downloaded newer image for ubuntu:16.04\n```\n## 运行\n\n```\n$ docker run -it --rm ubuntu:16.04 bash \n```\n\n说明一下上面用到的参数。\n\n- -it：这是两个参数，一个是 -i：交互式操作，一个是 -t 终端。我们这里打算进入 bash 执行一些命令并查看返回结果，因此我们需要交互式终端。\n- --rm：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 docker rm。我们这里只是随便执行个命令，看看结果，不需要排障和保留结果，因此使用 --rm 可以避免浪费空间。\n- ubuntu:16.04：这是指用 ubuntu:16.04 镜像为基础来启动容器。\n- bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 bash。\n\n进入容器后，我们可以在 Shell 下操作，执行任何所需的命令。这里，我们执行了 cat /etc/os-release，这是 Linux 常用的查看当前系统版本的命令，从返回的结果可以看到容器内是 Ubuntu 16.04.4 LTS 系统。\n\n# 启动容器\n启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态（stopped）的容器重新启动。\n\n因为 Docker 的容器实在太轻量级了，很多时候用户都是随时删除和新创建容器。\n\n## 新建并启动\n- 无交互\n\n```sh\n$ docker run ubuntu:14.04 /bin/echo 'Hello world'\nHello world\n```\n\n- 允许交互\n\n```sh\n$ docker run -t -i ubuntu:14.04 /bin/bash\nroot@af8bae53bdd3:/#\n```\n\n其中，-t 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， -i 则让容器的标准输入保持打开。\n\n**当利用 docker run 来创建容器时，Docker 在后台运行的标准操作包括：**\n\n- 检查本地是否存在指定的镜像，不存在就从公有仓库下载\n利用镜像创建并启动一个容器\n- 分配一个文件系统，并在只读的镜像层外面挂载一层可读写层\n- 从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去\n- 从地址池配置一个 ip 地址给容器\n- 执行用户指定的应用程序\n- 执行完毕后容器被终止\n\n## 启动已终止容器\n\n可以利用 docker container start 命令，直接将一个已经终止的容器启动运行。\n\n容器的核心为所执行的应用程序，所需要的资源都是应用程序运行所必需的。除此之外，并没有其它的资源。可以在伪终端中利用 ps 或 top 来查看进程信息。\n\n\n```sh\nroot@ba267838cc1b:/# ps\n  PID TTY          TIME CMD\n    1 ?        00:00:00 bash\n   11 ?        00:00:00 ps\n```\n可见，容器中仅运行了指定的 bash 应用。这种特点使得 Docker 对资源的利用率极高，是货真价实的轻量级虚拟化。\n\n# 后台运行\n需要让 Docker 在后台运行而不是直接把执行命令的结果输出在当前宿主机下。可以通过添加 -d 参数来实现。\n\n- 不使用 -d 参数运行容器。\n\n容器会把输出的结果 (STDOUT) 打印到宿主机上面\n\n- 使用了 -d 参数运行容器。\n\n```sh\n$ docker run -d ubuntu:17.10 /bin/sh -c \"while true; do echo hello world; sleep 1; done\"\n77b2dc01fe0f3f1265df143181e7b9af5e05279a884f4776ee75350ea9d8017a\n```\n\n此时容器会在后台运行并不会把输出的结果 (STDOUT) 打印到宿主机上面(输出结果可以用 docker logs 查看)。容器是否会长久运行，是和 docker run 指定的命令有关，和 -d 参数无关。\n\n使用 -d 参数启动后会返回一个唯一的 id，也可以通过 docker container ls 命令来查看容器信息。\n\n\n```sh\n$ docker container ls\nCONTAINER ID  IMAGE         COMMAND               CREATED        STATUS       PORTS NAMES\n77b2dc01fe0f  ubuntu:17.10  /bin/sh -c 'while tr  2 minutes ago  Up 1 minute        agitated_wright\n```\n要获取容器的输出信息，可以通过 docker container logs 命令。\n\n\n```sh\n$ docker container logs [container ID or NAMES]\nhello world\nhello world\nhello world\n. . .\n```\n\n\n# 终止容器\n可以使用 docker container stop 来终止一个运行中的容器。\n\n此外，当 Docker 容器中指定的应用终结时，容器也自动终止。\n\n用户通过 exit 命令或 Ctrl+d 来退出终端时，所创建的容器立刻终止。\n\n终止状态的容器可以用 docker container ls -a 命令看到。例如\n\n\n```sh\ndocker ps -a\nCONTAINER ID        IMAGE                    COMMAND                CREATED             STATUS                          PORTS               NAMES\nba267838cc1b        ubuntu:14.04             \"/bin/bash\"            30 minutes ago      Exited (0) About a minute ago                       trusting_newton\n98e5efa7d997        training/webapp:latest   \"python app.py\"        About an hour ago   Exited (0) 34 minutes ago                           backstabbing_pike\n```\n处于终止状态的容器，可以通过 docker container start 命令来重新启动。\n\n## 重新启动\n\n```sh\n$ docker container restart\n```\n此外，docker container restart 命令会将一个运行态的容器终止，然后再重新启动它。\n\n# 进入容器\n在使用 -d 参数时，容器启动后会进入后台。\n\n某些时候需要进入容器进行操作，包括使用 docker attach 命令或 docker exec 命令，推荐大家使用 docker exec 命令，因为使用 attach stdin 执行 exit 会导致容器停止。\n\n## attach 命令\ndocker attach 是 Docker 自带的命令。下面示例如何使用该命令。\n\n\n```sh\n$ docker run -dit ubuntu\n243c32535da7d142fb0e6df616a3c3ada0b8ab417937c853a9e1c251f499f550\n\n$ docker container ls\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n243c32535da7        ubuntu:latest       \"/bin/bash\"         18 seconds ago      Up 17 seconds                           nostalgic_hypatia\n\n$ docker attach 243c\nroot@243c32535da7:/#\n```\n\n## exec 命令\n**-i -t 参数**\ndocker exec 后边可以跟多个参数，这里主要说明 -i -t 参数。\n\n只用 -i 参数时，由于没有分配伪终端，界面没有我们熟悉的 Linux 命令提示符，但命令执行结果仍然可以返回。\n\n当 -i -t 参数一起使用时，则可以看到我们熟悉的 Linux 命令提示符。\n\n\n```sh\n$ docker run -dit ubuntu\n69d137adef7a8a689cbcb059e94da5489d3cddd240ff675c640c8d96e84fe1f6\n\n$ docker container ls\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n69d137adef7a        ubuntu:latest       \"/bin/bash\"         18 seconds ago      Up 17 seconds                           zealous_swirles\n\n$ docker exec -i 69d1 bash\nls\nbin\nboot\ndev\n...\n\n$ docker exec -it 69d1 bash\nroot@69d137adef7a:/#\n```\n\n# 导出和导入容器\n## 导出容器\n如果要导出本地某个容器，可以使用 docker export 命令。\n\n\n```sh\n$ docker ps -a\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                    PORTS               NAMES\n7691a814370e        ubuntu:14.04        \"/bin/bash\"         36 hours ago        Exited (0) 21 hours ago                       test\n$ docker export 7691a814370e > ubuntu.tar\n```\n\n## 导入容器快照\n可以使用 docker import 从容器快照文件中再导入为镜像，例如\n\n\n```sh\n$ cat ubuntu.tar | docker import - test/ubuntu:v1.0\n$ docker image ls\nREPOSITORY          TAG                 IMAGE ID            CREATED              VIRTUAL SIZE\ntest/ubuntu         v1.0                9d37a6082e97        About a minute ago   171.3 MB\n```\n\n此外，也可以通过指定 URL 或者某个目录来导入，例如\n\n\n```sh\n$ docker import http://example.com/exampleimage.tgz example/imagerepo\n```\n\n*注：用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。*\n\n# 删除\n## 删除容器\n\n```sh\n$ docker container rm  trusting_newton\ntrusting_newton\n```\n如果要删除一个运行中的容器，可以添加 -f 参数。Docker 会发送 SIGKILL 信号给容器。\n\n## 清理所有处于终止状态的容器\n用 docker container ls -a 命令可以查看所有已经创建的包括终止状态的容器，如果数量太多要一个个删除可能会很麻烦，用下面的命令可以清理掉所有处于终止状态的容器。\n\n\n```sh\n$ docker container prune\n```\n\n# 常用操作\n\n```sh\n$ docker --version  # docker版本\n$ docker info   # docker信息\n$ docker run --rm ubuntu:16.04 /bin/cat '/etc/os-release'\n$ docker run -it --name web  --rm ubuntu:16.04 bash\n```\n## 停止容器\n\n\n```sh\n➜ docker stop myUbuntu\nmyUbuntu\n```\n## 删除容器\n\n\n```sh\n➜ docker rm myUbuntu\nmyUbuntu\n```\n## 列出镜像\n\n```sh\n➜ docker images ls\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nnginx               latest              6b914bbcb89e        3 weeks ago         182 MB\nubuntu              14.04               7c09e61e9035        3 weeks ago         188 MB\n```\n### 列出部分镜像\n\n```sh\n$ docker image ls ubuntu\n$ docker image ls ubuntu:16.04\n```\ndocker image ls 还支持强大的过滤器参数 --filter，或者简写 -f\n\n```sh\n$ docker image ls -f since=mongo:3.2\n$ docker image ls -f \n```\n想查看某个位置之前的镜像也可以，只需要把 since 换成 before 即可。\n\n如果定义了 LABEL，还可以通过 LABEL 来过滤\n\n```sh\nlabel=com.example.version=0.1\n```\n### 以特定格式显示\n\n```sh\n$ docker image ls -q\n$ docker image ls --format \"{{.ID}}: {{.Repository}}\"\n$ docker image ls --format \"table {{.ID}}\\t{{.Repository}}\\t{{.Tag}}\"\n```\n\n## 删除镜像\n\n```sh\n$ docker rmi 7c09e61e9035\nUntagged: ubuntu:14.04\nUntagged: ...\n$ docker image rm $(docker image ls -q redis)\n```\n## 查看容器修改内容\n\n\n```sh\n$ docker diff webserver\nC /root\nA /root/.bash_history\n...\n```\n\n## 查看docker进程\n\n```sh\n➜  ~ docker ps -a\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n```\n## nginx\n\n```sh\n$ docker run --name webserver -d -p 80:80 nginx\n```\n\n# 引用\n- <http://blog.csdn.net/zhengyong15984285623/article/details/66971949>\n- <https://yeasy.gitbooks.io/docker_practice/>\n\n","slug":"my-docker-note","published":1,"updated":"2018-04-01T13:23:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfgx5oxb001fmxgoyffau0fk","content":"<h1 id=\"why\"><a href=\"#why\" class=\"headerlink\" title=\"why?\"></a>why?</h1><ul>\n<li>更高效的利用系统资源</li>\n<li>更快速的启动时间</li>\n<li>一致的运行环境</li>\n<li>持续交付和部署</li>\n<li>更轻松的迁移</li>\n<li>更轻松的维护和扩展</li>\n</ul>\n<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><ul>\n<li>镜像（Image）</li>\n<li>容器（Container）</li>\n<li>仓库（Repository）</li>\n</ul>\n<p>理解了这三个概念，就理解了 Docker 的整个生命周期。</p>\n<h1 id=\"获取镜像\"><a href=\"#获取镜像\" class=\"headerlink\" title=\"获取镜像\"></a>获取镜像</h1><p>从 Docker 镜像仓库获取镜像的命令是 docker pull。其命令格式为：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]</span><br></pre></td></tr></table></figure>\n<p><strong>如:</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull ubuntu:16.04</span><br><span class=\"line\">16.04: Pulling from library/ubuntu</span><br><span class=\"line\">bf5d46315322: Pull complete</span><br><span class=\"line\">9f13e0ac480c: Pull complete</span><br><span class=\"line\">e8988b5b3097: Pull complete</span><br><span class=\"line\">40af181810e7: Pull complete</span><br><span class=\"line\">e6f7c7e5c03e: Pull complete</span><br><span class=\"line\">Digest: sha256:147913621d9cdea08853f6ba9116c2e27a3ceffecf3b492983ae97c3d643fbbe</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> ubuntu:16.04</span><br></pre></td></tr></table></figure>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -it --rm ubuntu:16.04 bash</span><br></pre></td></tr></table></figure>\n<p>说明一下上面用到的参数。</p>\n<ul>\n<li>-it：这是两个参数，一个是 -i：交互式操作，一个是 -t 终端。我们这里打算进入 bash 执行一些命令并查看返回结果，因此我们需要交互式终端。</li>\n<li>–rm：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 docker rm。我们这里只是随便执行个命令，看看结果，不需要排障和保留结果，因此使用 –rm 可以避免浪费空间。</li>\n<li>ubuntu:16.04：这是指用 ubuntu:16.04 镜像为基础来启动容器。</li>\n<li>bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 bash。</li>\n</ul>\n<p>进入容器后，我们可以在 Shell 下操作，执行任何所需的命令。这里，我们执行了 cat /etc/os-release，这是 Linux 常用的查看当前系统版本的命令，从返回的结果可以看到容器内是 Ubuntu 16.04.4 LTS 系统。</p>\n<h1 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h1><p>启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态（stopped）的容器重新启动。</p>\n<p>因为 Docker 的容器实在太轻量级了，很多时候用户都是随时删除和新创建容器。</p>\n<h2 id=\"新建并启动\"><a href=\"#新建并启动\" class=\"headerlink\" title=\"新建并启动\"></a>新建并启动</h2><ul>\n<li>无交互</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run ubuntu:14.04 /bin/<span class=\"built_in\">echo</span> <span class=\"string\">'Hello world'</span></span><br><span class=\"line\">Hello world</span><br></pre></td></tr></table></figure>\n<ul>\n<li>允许交互</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -t -i ubuntu:14.04 /bin/bash</span><br><span class=\"line\">root@af8bae53bdd3:/<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<p>其中，-t 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， -i 则让容器的标准输入保持打开。</p>\n<p><strong>当利用 docker run 来创建容器时，Docker 在后台运行的标准操作包括：</strong></p>\n<ul>\n<li>检查本地是否存在指定的镜像，不存在就从公有仓库下载<br>利用镜像创建并启动一个容器</li>\n<li>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</li>\n<li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</li>\n<li>从地址池配置一个 ip 地址给容器</li>\n<li>执行用户指定的应用程序</li>\n<li>执行完毕后容器被终止</li>\n</ul>\n<h2 id=\"启动已终止容器\"><a href=\"#启动已终止容器\" class=\"headerlink\" title=\"启动已终止容器\"></a>启动已终止容器</h2><p>可以利用 docker container start 命令，直接将一个已经终止的容器启动运行。</p>\n<p>容器的核心为所执行的应用程序，所需要的资源都是应用程序运行所必需的。除此之外，并没有其它的资源。可以在伪终端中利用 ps 或 top 来查看进程信息。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ba267838cc1b:/<span class=\"comment\"># ps</span></span><br><span class=\"line\">  PID TTY          TIME CMD</span><br><span class=\"line\">    1 ?        00:00:00 bash</span><br><span class=\"line\">   11 ?        00:00:00 ps</span><br></pre></td></tr></table></figure>\n<p>可见，容器中仅运行了指定的 bash 应用。这种特点使得 Docker 对资源的利用率极高，是货真价实的轻量级虚拟化。</p>\n<h1 id=\"后台运行\"><a href=\"#后台运行\" class=\"headerlink\" title=\"后台运行\"></a>后台运行</h1><p>需要让 Docker 在后台运行而不是直接把执行命令的结果输出在当前宿主机下。可以通过添加 -d 参数来实现。</p>\n<ul>\n<li>不使用 -d 参数运行容器。</li>\n</ul>\n<p>容器会把输出的结果 (STDOUT) 打印到宿主机上面</p>\n<ul>\n<li>使用了 -d 参数运行容器。</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d ubuntu:17.10 /bin/sh -c <span class=\"string\">\"while true; do echo hello world; sleep 1; done\"</span></span><br><span class=\"line\">77b2dc01fe0f3f1265df143181e7b9af5e05279a884f4776ee75350ea9d8017a</span><br></pre></td></tr></table></figure>\n<p>此时容器会在后台运行并不会把输出的结果 (STDOUT) 打印到宿主机上面(输出结果可以用 docker logs 查看)。容器是否会长久运行，是和 docker run 指定的命令有关，和 -d 参数无关。</p>\n<p>使用 -d 参数启动后会返回一个唯一的 id，也可以通过 docker container ls 命令来查看容器信息。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker container ls</span><br><span class=\"line\">CONTAINER ID  IMAGE         COMMAND               CREATED        STATUS       PORTS NAMES</span><br><span class=\"line\">77b2dc01fe0f  ubuntu:17.10  /bin/sh -c <span class=\"string\">'while tr  2 minutes ago  Up 1 minute        agitated_wright</span></span><br></pre></td></tr></table></figure>\n<p>要获取容器的输出信息，可以通过 docker container logs 命令。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker container logs [container ID or NAMES]</span><br><span class=\"line\">hello world</span><br><span class=\"line\">hello world</span><br><span class=\"line\">hello world</span><br><span class=\"line\">. . .</span><br></pre></td></tr></table></figure>\n<h1 id=\"终止容器\"><a href=\"#终止容器\" class=\"headerlink\" title=\"终止容器\"></a>终止容器</h1><p>可以使用 docker container stop 来终止一个运行中的容器。</p>\n<p>此外，当 Docker 容器中指定的应用终结时，容器也自动终止。</p>\n<p>用户通过 exit 命令或 Ctrl+d 来退出终端时，所创建的容器立刻终止。</p>\n<p>终止状态的容器可以用 docker container ls -a 命令看到。例如</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br><span class=\"line\">CONTAINER ID        IMAGE                    COMMAND                CREATED             STATUS                          PORTS               NAMES</span><br><span class=\"line\">ba267838cc1b        ubuntu:14.04             <span class=\"string\">\"/bin/bash\"</span>            30 minutes ago      Exited (0) About a minute ago                       trusting_newton</span><br><span class=\"line\">98e5efa7d997        training/webapp:latest   <span class=\"string\">\"python app.py\"</span>        About an hour ago   Exited (0) 34 minutes ago                           backstabbing_pike</span><br></pre></td></tr></table></figure>\n<p>处于终止状态的容器，可以通过 docker container start 命令来重新启动。</p>\n<h2 id=\"重新启动\"><a href=\"#重新启动\" class=\"headerlink\" title=\"重新启动\"></a>重新启动</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker container restart</span><br></pre></td></tr></table></figure>\n<p>此外，docker container restart 命令会将一个运行态的容器终止，然后再重新启动它。</p>\n<h1 id=\"进入容器\"><a href=\"#进入容器\" class=\"headerlink\" title=\"进入容器\"></a>进入容器</h1><p>在使用 -d 参数时，容器启动后会进入后台。</p>\n<p>某些时候需要进入容器进行操作，包括使用 docker attach 命令或 docker exec 命令，推荐大家使用 docker exec 命令，因为使用 attach stdin 执行 exit 会导致容器停止。</p>\n<h2 id=\"attach-命令\"><a href=\"#attach-命令\" class=\"headerlink\" title=\"attach 命令\"></a>attach 命令</h2><p>docker attach 是 Docker 自带的命令。下面示例如何使用该命令。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -dit ubuntu</span><br><span class=\"line\">243c32535da7d142fb0e6df616a3c3ada0b8ab417937c853a9e1c251f499f550</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker container ls</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">243c32535da7        ubuntu:latest       <span class=\"string\">\"/bin/bash\"</span>         18 seconds ago      Up 17 seconds                           nostalgic_hypatia</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker attach 243c</span><br><span class=\"line\">root@243c32535da7:/<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"exec-命令\"><a href=\"#exec-命令\" class=\"headerlink\" title=\"exec 命令\"></a>exec 命令</h2><p><strong>-i -t 参数</strong><br>docker exec 后边可以跟多个参数，这里主要说明 -i -t 参数。</p>\n<p>只用 -i 参数时，由于没有分配伪终端，界面没有我们熟悉的 Linux 命令提示符，但命令执行结果仍然可以返回。</p>\n<p>当 -i -t 参数一起使用时，则可以看到我们熟悉的 Linux 命令提示符。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -dit ubuntu</span><br><span class=\"line\">69d137adef7a8a689cbcb059e94da5489d3cddd240ff675c640c8d96e84fe1f6</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker container ls</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">69d137adef7a        ubuntu:latest       <span class=\"string\">\"/bin/bash\"</span>         18 seconds ago      Up 17 seconds                           zealous_swirles</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -i 69d1 bash</span><br><span class=\"line\">ls</span><br><span class=\"line\">bin</span><br><span class=\"line\">boot</span><br><span class=\"line\">dev</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -it 69d1 bash</span><br><span class=\"line\">root@69d137adef7a:/<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"导出和导入容器\"><a href=\"#导出和导入容器\" class=\"headerlink\" title=\"导出和导入容器\"></a>导出和导入容器</h1><h2 id=\"导出容器\"><a href=\"#导出容器\" class=\"headerlink\" title=\"导出容器\"></a>导出容器</h2><p>如果要导出本地某个容器，可以使用 docker export 命令。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker ps -a</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                    PORTS               NAMES</span><br><span class=\"line\">7691a814370e        ubuntu:14.04        <span class=\"string\">\"/bin/bash\"</span>         36 hours ago        Exited (0) 21 hours ago                       <span class=\"built_in\">test</span></span><br><span class=\"line\">$ docker <span class=\"built_in\">export</span> 7691a814370e &gt; ubuntu.tar</span><br></pre></td></tr></table></figure>\n<h2 id=\"导入容器快照\"><a href=\"#导入容器快照\" class=\"headerlink\" title=\"导入容器快照\"></a>导入容器快照</h2><p>可以使用 docker import 从容器快照文件中再导入为镜像，例如</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat ubuntu.tar | docker import - <span class=\"built_in\">test</span>/ubuntu:v1.0</span><br><span class=\"line\">$ docker image ls</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED              VIRTUAL SIZE</span><br><span class=\"line\"><span class=\"built_in\">test</span>/ubuntu         v1.0                9d37a6082e97        About a minute ago   171.3 MB</span><br></pre></td></tr></table></figure>\n<p>此外，也可以通过指定 URL 或者某个目录来导入，例如</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker import http://example.com/exampleimage.tgz example/imagerepo</span><br></pre></td></tr></table></figure>\n<p><em>注：用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。</em></p>\n<h1 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h1><h2 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker container rm  trusting_newton</span><br><span class=\"line\">trusting_newton</span><br></pre></td></tr></table></figure>\n<p>如果要删除一个运行中的容器，可以添加 -f 参数。Docker 会发送 SIGKILL 信号给容器。</p>\n<h2 id=\"清理所有处于终止状态的容器\"><a href=\"#清理所有处于终止状态的容器\" class=\"headerlink\" title=\"清理所有处于终止状态的容器\"></a>清理所有处于终止状态的容器</h2><p>用 docker container ls -a 命令可以查看所有已经创建的包括终止状态的容器，如果数量太多要一个个删除可能会很麻烦，用下面的命令可以清理掉所有处于终止状态的容器。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker container prune</span><br></pre></td></tr></table></figure>\n<h1 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker --version  <span class=\"comment\"># docker版本</span></span><br><span class=\"line\">$ docker info   <span class=\"comment\"># docker信息</span></span><br><span class=\"line\">$ docker run --rm ubuntu:16.04 /bin/cat <span class=\"string\">'/etc/os-release'</span></span><br><span class=\"line\">$ docker run -it --name web  --rm ubuntu:16.04 bash</span><br></pre></td></tr></table></figure>\n<h2 id=\"停止容器\"><a href=\"#停止容器\" class=\"headerlink\" title=\"停止容器\"></a>停止容器</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ docker stop myUbuntu</span><br><span class=\"line\">myUbuntu</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除容器-1\"><a href=\"#删除容器-1\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ docker rm myUbuntu</span><br><span class=\"line\">myUbuntu</span><br></pre></td></tr></table></figure>\n<h2 id=\"列出镜像\"><a href=\"#列出镜像\" class=\"headerlink\" title=\"列出镜像\"></a>列出镜像</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ docker images ls</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">nginx               latest              6b914bbcb89e        3 weeks ago         182 MB</span><br><span class=\"line\">ubuntu              14.04               7c09e61e9035        3 weeks ago         188 MB</span><br></pre></td></tr></table></figure>\n<h3 id=\"列出部分镜像\"><a href=\"#列出部分镜像\" class=\"headerlink\" title=\"列出部分镜像\"></a>列出部分镜像</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker image ls ubuntu</span><br><span class=\"line\">$ docker image ls ubuntu:16.04</span><br></pre></td></tr></table></figure>\n<p>docker image ls 还支持强大的过滤器参数 –filter，或者简写 -f</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker image ls -f since=mongo:3.2</span><br><span class=\"line\">$ docker image ls -f</span><br></pre></td></tr></table></figure>\n<p>想查看某个位置之前的镜像也可以，只需要把 since 换成 before 即可。</p>\n<p>如果定义了 LABEL，还可以通过 LABEL 来过滤</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">label=com.example.version=0.1</span><br></pre></td></tr></table></figure>\n<h3 id=\"以特定格式显示\"><a href=\"#以特定格式显示\" class=\"headerlink\" title=\"以特定格式显示\"></a>以特定格式显示</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker image ls -q</span><br><span class=\"line\">$ docker image ls --format <span class=\"string\">\"&#123;&#123;.ID&#125;&#125;: &#123;&#123;.Repository&#125;&#125;\"</span></span><br><span class=\"line\">$ docker image ls --format <span class=\"string\">\"table &#123;&#123;.ID&#125;&#125;\\t&#123;&#123;.Repository&#125;&#125;\\t&#123;&#123;.Tag&#125;&#125;\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"删除镜像\"><a href=\"#删除镜像\" class=\"headerlink\" title=\"删除镜像\"></a>删除镜像</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker rmi 7c09e61e9035</span><br><span class=\"line\">Untagged: ubuntu:14.04</span><br><span class=\"line\">Untagged: ...</span><br><span class=\"line\">$ docker image rm $(docker image ls -q redis)</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看容器修改内容\"><a href=\"#查看容器修改内容\" class=\"headerlink\" title=\"查看容器修改内容\"></a>查看容器修改内容</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker diff webserver</span><br><span class=\"line\">C /root</span><br><span class=\"line\">A /root/.bash_history</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看docker进程\"><a href=\"#查看docker进程\" class=\"headerlink\" title=\"查看docker进程\"></a>查看docker进程</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ docker ps -a</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br></pre></td></tr></table></figure>\n<h2 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run --name webserver -d -p 80:80 nginx</span><br></pre></td></tr></table></figure>\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><ul>\n<li><a href=\"http://blog.csdn.net/zhengyong15984285623/article/details/66971949\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/zhengyong15984285623/article/details/66971949</a></li>\n<li><a href=\"https://yeasy.gitbooks.io/docker_practice/\" target=\"_blank\" rel=\"noopener\">https://yeasy.gitbooks.io/docker_practice/</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"why\"><a href=\"#why\" class=\"headerlink\" title=\"why?\"></a>why?</h1><ul>\n<li>更高效的利用系统资源</li>\n<li>更快速的启动时间</li>\n<li>一致的运行环境</li>\n<li>持续交付和部署</li>\n<li>更轻松的迁移</li>\n<li>更轻松的维护和扩展</li>\n</ul>\n<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><ul>\n<li>镜像（Image）</li>\n<li>容器（Container）</li>\n<li>仓库（Repository）</li>\n</ul>\n<p>理解了这三个概念，就理解了 Docker 的整个生命周期。</p>\n<h1 id=\"获取镜像\"><a href=\"#获取镜像\" class=\"headerlink\" title=\"获取镜像\"></a>获取镜像</h1><p>从 Docker 镜像仓库获取镜像的命令是 docker pull。其命令格式为：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]</span><br></pre></td></tr></table></figure>\n<p><strong>如:</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull ubuntu:16.04</span><br><span class=\"line\">16.04: Pulling from library/ubuntu</span><br><span class=\"line\">bf5d46315322: Pull complete</span><br><span class=\"line\">9f13e0ac480c: Pull complete</span><br><span class=\"line\">e8988b5b3097: Pull complete</span><br><span class=\"line\">40af181810e7: Pull complete</span><br><span class=\"line\">e6f7c7e5c03e: Pull complete</span><br><span class=\"line\">Digest: sha256:147913621d9cdea08853f6ba9116c2e27a3ceffecf3b492983ae97c3d643fbbe</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> ubuntu:16.04</span><br></pre></td></tr></table></figure>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -it --rm ubuntu:16.04 bash</span><br></pre></td></tr></table></figure>\n<p>说明一下上面用到的参数。</p>\n<ul>\n<li>-it：这是两个参数，一个是 -i：交互式操作，一个是 -t 终端。我们这里打算进入 bash 执行一些命令并查看返回结果，因此我们需要交互式终端。</li>\n<li>–rm：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 docker rm。我们这里只是随便执行个命令，看看结果，不需要排障和保留结果，因此使用 –rm 可以避免浪费空间。</li>\n<li>ubuntu:16.04：这是指用 ubuntu:16.04 镜像为基础来启动容器。</li>\n<li>bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 bash。</li>\n</ul>\n<p>进入容器后，我们可以在 Shell 下操作，执行任何所需的命令。这里，我们执行了 cat /etc/os-release，这是 Linux 常用的查看当前系统版本的命令，从返回的结果可以看到容器内是 Ubuntu 16.04.4 LTS 系统。</p>\n<h1 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h1><p>启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态（stopped）的容器重新启动。</p>\n<p>因为 Docker 的容器实在太轻量级了，很多时候用户都是随时删除和新创建容器。</p>\n<h2 id=\"新建并启动\"><a href=\"#新建并启动\" class=\"headerlink\" title=\"新建并启动\"></a>新建并启动</h2><ul>\n<li>无交互</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run ubuntu:14.04 /bin/<span class=\"built_in\">echo</span> <span class=\"string\">'Hello world'</span></span><br><span class=\"line\">Hello world</span><br></pre></td></tr></table></figure>\n<ul>\n<li>允许交互</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -t -i ubuntu:14.04 /bin/bash</span><br><span class=\"line\">root@af8bae53bdd3:/<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<p>其中，-t 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， -i 则让容器的标准输入保持打开。</p>\n<p><strong>当利用 docker run 来创建容器时，Docker 在后台运行的标准操作包括：</strong></p>\n<ul>\n<li>检查本地是否存在指定的镜像，不存在就从公有仓库下载<br>利用镜像创建并启动一个容器</li>\n<li>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</li>\n<li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</li>\n<li>从地址池配置一个 ip 地址给容器</li>\n<li>执行用户指定的应用程序</li>\n<li>执行完毕后容器被终止</li>\n</ul>\n<h2 id=\"启动已终止容器\"><a href=\"#启动已终止容器\" class=\"headerlink\" title=\"启动已终止容器\"></a>启动已终止容器</h2><p>可以利用 docker container start 命令，直接将一个已经终止的容器启动运行。</p>\n<p>容器的核心为所执行的应用程序，所需要的资源都是应用程序运行所必需的。除此之外，并没有其它的资源。可以在伪终端中利用 ps 或 top 来查看进程信息。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ba267838cc1b:/<span class=\"comment\"># ps</span></span><br><span class=\"line\">  PID TTY          TIME CMD</span><br><span class=\"line\">    1 ?        00:00:00 bash</span><br><span class=\"line\">   11 ?        00:00:00 ps</span><br></pre></td></tr></table></figure>\n<p>可见，容器中仅运行了指定的 bash 应用。这种特点使得 Docker 对资源的利用率极高，是货真价实的轻量级虚拟化。</p>\n<h1 id=\"后台运行\"><a href=\"#后台运行\" class=\"headerlink\" title=\"后台运行\"></a>后台运行</h1><p>需要让 Docker 在后台运行而不是直接把执行命令的结果输出在当前宿主机下。可以通过添加 -d 参数来实现。</p>\n<ul>\n<li>不使用 -d 参数运行容器。</li>\n</ul>\n<p>容器会把输出的结果 (STDOUT) 打印到宿主机上面</p>\n<ul>\n<li>使用了 -d 参数运行容器。</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d ubuntu:17.10 /bin/sh -c <span class=\"string\">\"while true; do echo hello world; sleep 1; done\"</span></span><br><span class=\"line\">77b2dc01fe0f3f1265df143181e7b9af5e05279a884f4776ee75350ea9d8017a</span><br></pre></td></tr></table></figure>\n<p>此时容器会在后台运行并不会把输出的结果 (STDOUT) 打印到宿主机上面(输出结果可以用 docker logs 查看)。容器是否会长久运行，是和 docker run 指定的命令有关，和 -d 参数无关。</p>\n<p>使用 -d 参数启动后会返回一个唯一的 id，也可以通过 docker container ls 命令来查看容器信息。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker container ls</span><br><span class=\"line\">CONTAINER ID  IMAGE         COMMAND               CREATED        STATUS       PORTS NAMES</span><br><span class=\"line\">77b2dc01fe0f  ubuntu:17.10  /bin/sh -c <span class=\"string\">'while tr  2 minutes ago  Up 1 minute        agitated_wright</span></span><br></pre></td></tr></table></figure>\n<p>要获取容器的输出信息，可以通过 docker container logs 命令。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker container logs [container ID or NAMES]</span><br><span class=\"line\">hello world</span><br><span class=\"line\">hello world</span><br><span class=\"line\">hello world</span><br><span class=\"line\">. . .</span><br></pre></td></tr></table></figure>\n<h1 id=\"终止容器\"><a href=\"#终止容器\" class=\"headerlink\" title=\"终止容器\"></a>终止容器</h1><p>可以使用 docker container stop 来终止一个运行中的容器。</p>\n<p>此外，当 Docker 容器中指定的应用终结时，容器也自动终止。</p>\n<p>用户通过 exit 命令或 Ctrl+d 来退出终端时，所创建的容器立刻终止。</p>\n<p>终止状态的容器可以用 docker container ls -a 命令看到。例如</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br><span class=\"line\">CONTAINER ID        IMAGE                    COMMAND                CREATED             STATUS                          PORTS               NAMES</span><br><span class=\"line\">ba267838cc1b        ubuntu:14.04             <span class=\"string\">\"/bin/bash\"</span>            30 minutes ago      Exited (0) About a minute ago                       trusting_newton</span><br><span class=\"line\">98e5efa7d997        training/webapp:latest   <span class=\"string\">\"python app.py\"</span>        About an hour ago   Exited (0) 34 minutes ago                           backstabbing_pike</span><br></pre></td></tr></table></figure>\n<p>处于终止状态的容器，可以通过 docker container start 命令来重新启动。</p>\n<h2 id=\"重新启动\"><a href=\"#重新启动\" class=\"headerlink\" title=\"重新启动\"></a>重新启动</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker container restart</span><br></pre></td></tr></table></figure>\n<p>此外，docker container restart 命令会将一个运行态的容器终止，然后再重新启动它。</p>\n<h1 id=\"进入容器\"><a href=\"#进入容器\" class=\"headerlink\" title=\"进入容器\"></a>进入容器</h1><p>在使用 -d 参数时，容器启动后会进入后台。</p>\n<p>某些时候需要进入容器进行操作，包括使用 docker attach 命令或 docker exec 命令，推荐大家使用 docker exec 命令，因为使用 attach stdin 执行 exit 会导致容器停止。</p>\n<h2 id=\"attach-命令\"><a href=\"#attach-命令\" class=\"headerlink\" title=\"attach 命令\"></a>attach 命令</h2><p>docker attach 是 Docker 自带的命令。下面示例如何使用该命令。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -dit ubuntu</span><br><span class=\"line\">243c32535da7d142fb0e6df616a3c3ada0b8ab417937c853a9e1c251f499f550</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker container ls</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">243c32535da7        ubuntu:latest       <span class=\"string\">\"/bin/bash\"</span>         18 seconds ago      Up 17 seconds                           nostalgic_hypatia</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker attach 243c</span><br><span class=\"line\">root@243c32535da7:/<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"exec-命令\"><a href=\"#exec-命令\" class=\"headerlink\" title=\"exec 命令\"></a>exec 命令</h2><p><strong>-i -t 参数</strong><br>docker exec 后边可以跟多个参数，这里主要说明 -i -t 参数。</p>\n<p>只用 -i 参数时，由于没有分配伪终端，界面没有我们熟悉的 Linux 命令提示符，但命令执行结果仍然可以返回。</p>\n<p>当 -i -t 参数一起使用时，则可以看到我们熟悉的 Linux 命令提示符。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -dit ubuntu</span><br><span class=\"line\">69d137adef7a8a689cbcb059e94da5489d3cddd240ff675c640c8d96e84fe1f6</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker container ls</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">69d137adef7a        ubuntu:latest       <span class=\"string\">\"/bin/bash\"</span>         18 seconds ago      Up 17 seconds                           zealous_swirles</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -i 69d1 bash</span><br><span class=\"line\">ls</span><br><span class=\"line\">bin</span><br><span class=\"line\">boot</span><br><span class=\"line\">dev</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -it 69d1 bash</span><br><span class=\"line\">root@69d137adef7a:/<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"导出和导入容器\"><a href=\"#导出和导入容器\" class=\"headerlink\" title=\"导出和导入容器\"></a>导出和导入容器</h1><h2 id=\"导出容器\"><a href=\"#导出容器\" class=\"headerlink\" title=\"导出容器\"></a>导出容器</h2><p>如果要导出本地某个容器，可以使用 docker export 命令。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker ps -a</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                    PORTS               NAMES</span><br><span class=\"line\">7691a814370e        ubuntu:14.04        <span class=\"string\">\"/bin/bash\"</span>         36 hours ago        Exited (0) 21 hours ago                       <span class=\"built_in\">test</span></span><br><span class=\"line\">$ docker <span class=\"built_in\">export</span> 7691a814370e &gt; ubuntu.tar</span><br></pre></td></tr></table></figure>\n<h2 id=\"导入容器快照\"><a href=\"#导入容器快照\" class=\"headerlink\" title=\"导入容器快照\"></a>导入容器快照</h2><p>可以使用 docker import 从容器快照文件中再导入为镜像，例如</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat ubuntu.tar | docker import - <span class=\"built_in\">test</span>/ubuntu:v1.0</span><br><span class=\"line\">$ docker image ls</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED              VIRTUAL SIZE</span><br><span class=\"line\"><span class=\"built_in\">test</span>/ubuntu         v1.0                9d37a6082e97        About a minute ago   171.3 MB</span><br></pre></td></tr></table></figure>\n<p>此外，也可以通过指定 URL 或者某个目录来导入，例如</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker import http://example.com/exampleimage.tgz example/imagerepo</span><br></pre></td></tr></table></figure>\n<p><em>注：用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。</em></p>\n<h1 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h1><h2 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker container rm  trusting_newton</span><br><span class=\"line\">trusting_newton</span><br></pre></td></tr></table></figure>\n<p>如果要删除一个运行中的容器，可以添加 -f 参数。Docker 会发送 SIGKILL 信号给容器。</p>\n<h2 id=\"清理所有处于终止状态的容器\"><a href=\"#清理所有处于终止状态的容器\" class=\"headerlink\" title=\"清理所有处于终止状态的容器\"></a>清理所有处于终止状态的容器</h2><p>用 docker container ls -a 命令可以查看所有已经创建的包括终止状态的容器，如果数量太多要一个个删除可能会很麻烦，用下面的命令可以清理掉所有处于终止状态的容器。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker container prune</span><br></pre></td></tr></table></figure>\n<h1 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker --version  <span class=\"comment\"># docker版本</span></span><br><span class=\"line\">$ docker info   <span class=\"comment\"># docker信息</span></span><br><span class=\"line\">$ docker run --rm ubuntu:16.04 /bin/cat <span class=\"string\">'/etc/os-release'</span></span><br><span class=\"line\">$ docker run -it --name web  --rm ubuntu:16.04 bash</span><br></pre></td></tr></table></figure>\n<h2 id=\"停止容器\"><a href=\"#停止容器\" class=\"headerlink\" title=\"停止容器\"></a>停止容器</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ docker stop myUbuntu</span><br><span class=\"line\">myUbuntu</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除容器-1\"><a href=\"#删除容器-1\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ docker rm myUbuntu</span><br><span class=\"line\">myUbuntu</span><br></pre></td></tr></table></figure>\n<h2 id=\"列出镜像\"><a href=\"#列出镜像\" class=\"headerlink\" title=\"列出镜像\"></a>列出镜像</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ docker images ls</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">nginx               latest              6b914bbcb89e        3 weeks ago         182 MB</span><br><span class=\"line\">ubuntu              14.04               7c09e61e9035        3 weeks ago         188 MB</span><br></pre></td></tr></table></figure>\n<h3 id=\"列出部分镜像\"><a href=\"#列出部分镜像\" class=\"headerlink\" title=\"列出部分镜像\"></a>列出部分镜像</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker image ls ubuntu</span><br><span class=\"line\">$ docker image ls ubuntu:16.04</span><br></pre></td></tr></table></figure>\n<p>docker image ls 还支持强大的过滤器参数 –filter，或者简写 -f</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker image ls -f since=mongo:3.2</span><br><span class=\"line\">$ docker image ls -f</span><br></pre></td></tr></table></figure>\n<p>想查看某个位置之前的镜像也可以，只需要把 since 换成 before 即可。</p>\n<p>如果定义了 LABEL，还可以通过 LABEL 来过滤</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">label=com.example.version=0.1</span><br></pre></td></tr></table></figure>\n<h3 id=\"以特定格式显示\"><a href=\"#以特定格式显示\" class=\"headerlink\" title=\"以特定格式显示\"></a>以特定格式显示</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker image ls -q</span><br><span class=\"line\">$ docker image ls --format <span class=\"string\">\"&#123;&#123;.ID&#125;&#125;: &#123;&#123;.Repository&#125;&#125;\"</span></span><br><span class=\"line\">$ docker image ls --format <span class=\"string\">\"table &#123;&#123;.ID&#125;&#125;\\t&#123;&#123;.Repository&#125;&#125;\\t&#123;&#123;.Tag&#125;&#125;\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"删除镜像\"><a href=\"#删除镜像\" class=\"headerlink\" title=\"删除镜像\"></a>删除镜像</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker rmi 7c09e61e9035</span><br><span class=\"line\">Untagged: ubuntu:14.04</span><br><span class=\"line\">Untagged: ...</span><br><span class=\"line\">$ docker image rm $(docker image ls -q redis)</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看容器修改内容\"><a href=\"#查看容器修改内容\" class=\"headerlink\" title=\"查看容器修改内容\"></a>查看容器修改内容</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker diff webserver</span><br><span class=\"line\">C /root</span><br><span class=\"line\">A /root/.bash_history</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看docker进程\"><a href=\"#查看docker进程\" class=\"headerlink\" title=\"查看docker进程\"></a>查看docker进程</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ docker ps -a</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br></pre></td></tr></table></figure>\n<h2 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run --name webserver -d -p 80:80 nginx</span><br></pre></td></tr></table></figure>\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><ul>\n<li><a href=\"http://blog.csdn.net/zhengyong15984285623/article/details/66971949\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/zhengyong15984285623/article/details/66971949</a></li>\n<li><a href=\"https://yeasy.gitbooks.io/docker_practice/\" target=\"_blank\" rel=\"noopener\">https://yeasy.gitbooks.io/docker_practice/</a></li>\n</ul>\n"},{"title":"递归","date":"2017-12-22T12:48:26.000Z","keywords":"递归","description":"在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数。","_content":"\n在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数。\n\n**特点：**\n\n- 调用自身\n- 结束条件\n\n```python\ndef func1(x):\n    print(x)\n    func1(x-1)\n\n# func1(3)  # 死递归 没有结束条件\n\ndef func2(x):\n    if x > 0:\n        print(x)\n        func2(x+1)\n\n# func2(3)    # 3,4,5,6...  有结束条件，如果是正数还是会陷入死递归\n\ndef func3(x):\n    if x > 0:\n        print(x)\n        func3(x-1)\n\n# func3(3)  # 3,2,1   有结束条件\n\ndef func4(x):\n    if x > 0:\n        func4(x-1)\n        print(x)\n\n# func4(3)    # 1,2,3 有结束条件\n```\n\n递归效率不高，递归层次过多会导致栈溢出（在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出）\n\n# 练习\n\n![dog递归](https://i.imgur.com/Z1qnoKw.jpg)\n\n```python\ndef func(depth):\n    if depth == 0:\n        print('我的小鲤鱼',end='')   # 取消换行\n    else:\n        print('抱着',end='')\n        func(depth-1)\n        print('的我',end='')\n\nfunc(3) # 抱着抱着抱着我的小鲤鱼的我的我的我\n```\n\n```python\n# 利用递归函数计算阶乘\n# N! = 1 * 2 * 3 * ... * N\ndef fact(n):\n    if n == 1:\n        return 1\n    return n * fact(n-1)\n\nprint('fact(1) =', fact(1))\nprint('fact(5) =', fact(5))\nprint('fact(10) =', fact(10))\n\n# 利用递归函数移动汉诺塔:\ndef move(n, a, b, c):\n    if n == 1:\n        print('move', a, '-->', c)\n    else:\n        move(n-1, a, c, b)\n        move(1, a, b, c)\n        move(n-1, b, a, c)\n\nmove(4, 'A', 'B', 'C')\n```\n\n\n","source":"_posts/recursion.md","raw":"---\ntitle: 递归\ndate: 2017-12-22 20:48:26\ntags:\ncategories: 算法\nkeywords: 递归\ndescription: 在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数。\n---\n\n在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数。\n\n**特点：**\n\n- 调用自身\n- 结束条件\n\n```python\ndef func1(x):\n    print(x)\n    func1(x-1)\n\n# func1(3)  # 死递归 没有结束条件\n\ndef func2(x):\n    if x > 0:\n        print(x)\n        func2(x+1)\n\n# func2(3)    # 3,4,5,6...  有结束条件，如果是正数还是会陷入死递归\n\ndef func3(x):\n    if x > 0:\n        print(x)\n        func3(x-1)\n\n# func3(3)  # 3,2,1   有结束条件\n\ndef func4(x):\n    if x > 0:\n        func4(x-1)\n        print(x)\n\n# func4(3)    # 1,2,3 有结束条件\n```\n\n递归效率不高，递归层次过多会导致栈溢出（在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出）\n\n# 练习\n\n![dog递归](https://i.imgur.com/Z1qnoKw.jpg)\n\n```python\ndef func(depth):\n    if depth == 0:\n        print('我的小鲤鱼',end='')   # 取消换行\n    else:\n        print('抱着',end='')\n        func(depth-1)\n        print('的我',end='')\n\nfunc(3) # 抱着抱着抱着我的小鲤鱼的我的我的我\n```\n\n```python\n# 利用递归函数计算阶乘\n# N! = 1 * 2 * 3 * ... * N\ndef fact(n):\n    if n == 1:\n        return 1\n    return n * fact(n-1)\n\nprint('fact(1) =', fact(1))\nprint('fact(5) =', fact(5))\nprint('fact(10) =', fact(10))\n\n# 利用递归函数移动汉诺塔:\ndef move(n, a, b, c):\n    if n == 1:\n        print('move', a, '-->', c)\n    else:\n        move(n-1, a, c, b)\n        move(1, a, b, c)\n        move(n-1, b, a, c)\n\nmove(4, 'A', 'B', 'C')\n```\n\n\n","slug":"recursion","published":1,"updated":"2018-04-01T13:23:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfgx5oxd001jmxgo33cs7ifm","content":"<p>在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数。</p>\n<p><strong>特点：</strong></p>\n<ul>\n<li>调用自身</li>\n<li>结束条件</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func1</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    print(x)</span><br><span class=\"line\">    func1(x<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># func1(3)  # 死递归 没有结束条件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func2</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        print(x)</span><br><span class=\"line\">        func2(x+<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># func2(3)    # 3,4,5,6...  有结束条件，如果是正数还是会陷入死递归</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func3</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        print(x)</span><br><span class=\"line\">        func3(x<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># func3(3)  # 3,2,1   有结束条件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func4</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        func4(x<span class=\"number\">-1</span>)</span><br><span class=\"line\">        print(x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># func4(3)    # 1,2,3 有结束条件</span></span><br></pre></td></tr></table></figure>\n<p>递归效率不高，递归层次过多会导致栈溢出（在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出）</p>\n<h1 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h1><p><img src=\"https://i.imgur.com/Z1qnoKw.jpg\" alt=\"dog递归\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(depth)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> depth == <span class=\"number\">0</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'我的小鲤鱼'</span>,end=<span class=\"string\">''</span>)   <span class=\"comment\"># 取消换行</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'抱着'</span>,end=<span class=\"string\">''</span>)</span><br><span class=\"line\">        func(depth<span class=\"number\">-1</span>)</span><br><span class=\"line\">        print(<span class=\"string\">'的我'</span>,end=<span class=\"string\">''</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">func(<span class=\"number\">3</span>) <span class=\"comment\"># 抱着抱着抱着我的小鲤鱼的我的我的我</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 利用递归函数计算阶乘</span></span><br><span class=\"line\"><span class=\"comment\"># N! = 1 * 2 * 3 * ... * N</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fact</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> n * fact(n<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">'fact(1) ='</span>, fact(<span class=\"number\">1</span>))</span><br><span class=\"line\">print(<span class=\"string\">'fact(5) ='</span>, fact(<span class=\"number\">5</span>))</span><br><span class=\"line\">print(<span class=\"string\">'fact(10) ='</span>, fact(<span class=\"number\">10</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 利用递归函数移动汉诺塔:</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">move</span><span class=\"params\">(n, a, b, c)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">1</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'move'</span>, a, <span class=\"string\">'--&gt;'</span>, c)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        move(n<span class=\"number\">-1</span>, a, c, b)</span><br><span class=\"line\">        move(<span class=\"number\">1</span>, a, b, c)</span><br><span class=\"line\">        move(n<span class=\"number\">-1</span>, b, a, c)</span><br><span class=\"line\"></span><br><span class=\"line\">move(<span class=\"number\">4</span>, <span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数。</p>\n<p><strong>特点：</strong></p>\n<ul>\n<li>调用自身</li>\n<li>结束条件</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func1</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    print(x)</span><br><span class=\"line\">    func1(x<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># func1(3)  # 死递归 没有结束条件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func2</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        print(x)</span><br><span class=\"line\">        func2(x+<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># func2(3)    # 3,4,5,6...  有结束条件，如果是正数还是会陷入死递归</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func3</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        print(x)</span><br><span class=\"line\">        func3(x<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># func3(3)  # 3,2,1   有结束条件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func4</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        func4(x<span class=\"number\">-1</span>)</span><br><span class=\"line\">        print(x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># func4(3)    # 1,2,3 有结束条件</span></span><br></pre></td></tr></table></figure>\n<p>递归效率不高，递归层次过多会导致栈溢出（在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出）</p>\n<h1 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h1><p><img src=\"https://i.imgur.com/Z1qnoKw.jpg\" alt=\"dog递归\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(depth)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> depth == <span class=\"number\">0</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'我的小鲤鱼'</span>,end=<span class=\"string\">''</span>)   <span class=\"comment\"># 取消换行</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'抱着'</span>,end=<span class=\"string\">''</span>)</span><br><span class=\"line\">        func(depth<span class=\"number\">-1</span>)</span><br><span class=\"line\">        print(<span class=\"string\">'的我'</span>,end=<span class=\"string\">''</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">func(<span class=\"number\">3</span>) <span class=\"comment\"># 抱着抱着抱着我的小鲤鱼的我的我的我</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 利用递归函数计算阶乘</span></span><br><span class=\"line\"><span class=\"comment\"># N! = 1 * 2 * 3 * ... * N</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fact</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> n * fact(n<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">'fact(1) ='</span>, fact(<span class=\"number\">1</span>))</span><br><span class=\"line\">print(<span class=\"string\">'fact(5) ='</span>, fact(<span class=\"number\">5</span>))</span><br><span class=\"line\">print(<span class=\"string\">'fact(10) ='</span>, fact(<span class=\"number\">10</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 利用递归函数移动汉诺塔:</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">move</span><span class=\"params\">(n, a, b, c)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">1</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'move'</span>, a, <span class=\"string\">'--&gt;'</span>, c)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        move(n<span class=\"number\">-1</span>, a, c, b)</span><br><span class=\"line\">        move(<span class=\"number\">1</span>, a, b, c)</span><br><span class=\"line\">        move(n<span class=\"number\">-1</span>, b, a, c)</span><br><span class=\"line\"></span><br><span class=\"line\">move(<span class=\"number\">4</span>, <span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>)</span><br></pre></td></tr></table></figure>\n"},{"title":"TOP 榜单算法（nlargest）","date":"2017-12-26T05:52:13.000Z","keywords":null,"description":null,"_content":"# 问题\n\n现在有n个数（n>10000），设计算法，按大小顺序得到前~~10~~m大的数。\n\n<!-- more -->\n- 应用场景：榜单TOP 10\n\n# 解决方法\n\n1. 先排序，取前 10 个数 O(nlogn)\n2. 只留前 10 个数，开一个长度为 10 的列表，用插入排序取出 10 个数，来一个数和列表最后一个数比较，如果比它更小就扔掉 O(nm)不适用与 m 特别大的时候\n3. 堆 O(nlogm)\n\n用堆解决思路：\n\n1. 取列表前m个元素建立一个小根堆。堆顶就是目前第m大的数。\n2. 依次向后遍历原列表，对于列表中的元素，如果小于堆顶，则忽略该元素；如果大于堆顶，则将堆顶更换为该元素，并且对堆进行一次调整；\n3. 遍历列表所有元素后，倒序弹出堆顶。\n\n\n```python\ndef sift(data, low, high):\n    \"\"\"\n    调整函数\n    data: 列表\n    low：待调整的子树的根位置\n    high：待调整的子树的最后一个节点的位置\n    \"\"\"\n    i = low\n    j = 2 * i + 1\n    tmp = data[i]\n    # i指向空位置\n    while j<=high:      #领导已经撸到底了\n        if j != high and data[j] < data[j+1]:\n            j += 1\n        #j指向数值大的孩子\n        if tmp < data[j]:   #如果小领导比撸下来的大领导能力值大\n            data[i] = data[j]\n            i = j\n            j = 2*i+1\n        else:\n            break       #撸下来的领导比候选的领导能力值大\n    data[i] = tmp\n\ndef topn(li, n):\n    heap = li[0:n]\n    # 建堆\n    for i in range(n // 2 - 1, -1, -1):\n        sift(heap, i, n - 1)\n        # 遍历\n    for i in range(n, len(li)):\n        if li[i] > heap[0]:\n            heap[0] = li[i]\n            sift(heap, 0, n - 1)\n    # 出数\n    for i in range(n - 1, -1, -1):\n        heap[0], heap[i] = heap[i], heap[0]\n        sift(heap, 0, i - 1)\n```\n\n- Python内置模块——heapq\n\n```python\nimport heapq\n# 利用heapq模块实现堆排序\ndef heapsort(li):\n    h = []\n    for value in li:\n        heapq.heappush(h, value)# 建堆, 并自动排序\n    return [heappop(h) for i in range(len(h))]\n\nheapsort([6,8,1,9,3,0,7,2,4,5]) # [0,2,1,3,5,6,7,9,4,8]\n\n# ============== 分割线 ==============\n# 利用heapq模块实现取top-k\nheapq.nlargest(100, li)\n```\n\n优先队列：一些元素的集合，POP操作每次执行都会从优先队列中弹出最大（或最小）的元素。\n>堆——优先队列\n\n# 参考\n- http://python.usyiyi.cn/translate/python_352/library/heapq.html\n\n```python\n# 位运算\n# >> 除以2\n2 >> 1 # 1 \n4 >> 1 # 2\n8 >> 1 # 4\n# << 乘以 2\n2 << 1  # 4\n```\n\n","source":"_posts/top-list-algorithm.md","raw":"---\ntitle: TOP 榜单算法（nlargest）\ndate: 2017-12-26 13:52:13\ntags: \n- heapq\n- nlargest\ncategories:\nkeywords:\ndescription: \n---\n# 问题\n\n现在有n个数（n>10000），设计算法，按大小顺序得到前~~10~~m大的数。\n\n<!-- more -->\n- 应用场景：榜单TOP 10\n\n# 解决方法\n\n1. 先排序，取前 10 个数 O(nlogn)\n2. 只留前 10 个数，开一个长度为 10 的列表，用插入排序取出 10 个数，来一个数和列表最后一个数比较，如果比它更小就扔掉 O(nm)不适用与 m 特别大的时候\n3. 堆 O(nlogm)\n\n用堆解决思路：\n\n1. 取列表前m个元素建立一个小根堆。堆顶就是目前第m大的数。\n2. 依次向后遍历原列表，对于列表中的元素，如果小于堆顶，则忽略该元素；如果大于堆顶，则将堆顶更换为该元素，并且对堆进行一次调整；\n3. 遍历列表所有元素后，倒序弹出堆顶。\n\n\n```python\ndef sift(data, low, high):\n    \"\"\"\n    调整函数\n    data: 列表\n    low：待调整的子树的根位置\n    high：待调整的子树的最后一个节点的位置\n    \"\"\"\n    i = low\n    j = 2 * i + 1\n    tmp = data[i]\n    # i指向空位置\n    while j<=high:      #领导已经撸到底了\n        if j != high and data[j] < data[j+1]:\n            j += 1\n        #j指向数值大的孩子\n        if tmp < data[j]:   #如果小领导比撸下来的大领导能力值大\n            data[i] = data[j]\n            i = j\n            j = 2*i+1\n        else:\n            break       #撸下来的领导比候选的领导能力值大\n    data[i] = tmp\n\ndef topn(li, n):\n    heap = li[0:n]\n    # 建堆\n    for i in range(n // 2 - 1, -1, -1):\n        sift(heap, i, n - 1)\n        # 遍历\n    for i in range(n, len(li)):\n        if li[i] > heap[0]:\n            heap[0] = li[i]\n            sift(heap, 0, n - 1)\n    # 出数\n    for i in range(n - 1, -1, -1):\n        heap[0], heap[i] = heap[i], heap[0]\n        sift(heap, 0, i - 1)\n```\n\n- Python内置模块——heapq\n\n```python\nimport heapq\n# 利用heapq模块实现堆排序\ndef heapsort(li):\n    h = []\n    for value in li:\n        heapq.heappush(h, value)# 建堆, 并自动排序\n    return [heappop(h) for i in range(len(h))]\n\nheapsort([6,8,1,9,3,0,7,2,4,5]) # [0,2,1,3,5,6,7,9,4,8]\n\n# ============== 分割线 ==============\n# 利用heapq模块实现取top-k\nheapq.nlargest(100, li)\n```\n\n优先队列：一些元素的集合，POP操作每次执行都会从优先队列中弹出最大（或最小）的元素。\n>堆——优先队列\n\n# 参考\n- http://python.usyiyi.cn/translate/python_352/library/heapq.html\n\n```python\n# 位运算\n# >> 除以2\n2 >> 1 # 1 \n4 >> 1 # 2\n8 >> 1 # 4\n# << 乘以 2\n2 << 1  # 4\n```\n\n","slug":"top-list-algorithm","published":1,"updated":"2018-04-01T13:23:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfgx5oxf001lmxgobcolrjac","content":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>现在有n个数（n&gt;10000），设计算法，按大小顺序得到前<del>10</del>m大的数。</p>\n<a id=\"more\"></a>\n<ul>\n<li>应用场景：榜单TOP 10</li>\n</ul>\n<h1 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h1><ol>\n<li>先排序，取前 10 个数 O(nlogn)</li>\n<li>只留前 10 个数，开一个长度为 10 的列表，用插入排序取出 10 个数，来一个数和列表最后一个数比较，如果比它更小就扔掉 O(nm)不适用与 m 特别大的时候</li>\n<li>堆 O(nlogm)</li>\n</ol>\n<p>用堆解决思路：</p>\n<ol>\n<li>取列表前m个元素建立一个小根堆。堆顶就是目前第m大的数。</li>\n<li>依次向后遍历原列表，对于列表中的元素，如果小于堆顶，则忽略该元素；如果大于堆顶，则将堆顶更换为该元素，并且对堆进行一次调整；</li>\n<li>遍历列表所有元素后，倒序弹出堆顶。</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sift</span><span class=\"params\">(data, low, high)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    调整函数</span></span><br><span class=\"line\"><span class=\"string\">    data: 列表</span></span><br><span class=\"line\"><span class=\"string\">    low：待调整的子树的根位置</span></span><br><span class=\"line\"><span class=\"string\">    high：待调整的子树的最后一个节点的位置</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    i = low</span><br><span class=\"line\">    j = <span class=\"number\">2</span> * i + <span class=\"number\">1</span></span><br><span class=\"line\">    tmp = data[i]</span><br><span class=\"line\">    <span class=\"comment\"># i指向空位置</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> j&lt;=high:      <span class=\"comment\">#领导已经撸到底了</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> j != high <span class=\"keyword\">and</span> data[j] &lt; data[j+<span class=\"number\">1</span>]:</span><br><span class=\"line\">            j += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\">#j指向数值大的孩子</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> tmp &lt; data[j]:   <span class=\"comment\">#如果小领导比撸下来的大领导能力值大</span></span><br><span class=\"line\">            data[i] = data[j]</span><br><span class=\"line\">            i = j</span><br><span class=\"line\">            j = <span class=\"number\">2</span>*i+<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>       <span class=\"comment\">#撸下来的领导比候选的领导能力值大</span></span><br><span class=\"line\">    data[i] = tmp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">topn</span><span class=\"params\">(li, n)</span>:</span></span><br><span class=\"line\">    heap = li[<span class=\"number\">0</span>:n]</span><br><span class=\"line\">    <span class=\"comment\"># 建堆</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n // <span class=\"number\">2</span> - <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">        sift(heap, i, n - <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n, len(li)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> li[i] &gt; heap[<span class=\"number\">0</span>]:</span><br><span class=\"line\">            heap[<span class=\"number\">0</span>] = li[i]</span><br><span class=\"line\">            sift(heap, <span class=\"number\">0</span>, n - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 出数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n - <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">        heap[<span class=\"number\">0</span>], heap[i] = heap[i], heap[<span class=\"number\">0</span>]</span><br><span class=\"line\">        sift(heap, <span class=\"number\">0</span>, i - <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Python内置模块——heapq</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> heapq</span><br><span class=\"line\"><span class=\"comment\"># 利用heapq模块实现堆排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">heapsort</span><span class=\"params\">(li)</span>:</span></span><br><span class=\"line\">    h = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> li:</span><br><span class=\"line\">        heapq.heappush(h, value)<span class=\"comment\"># 建堆, 并自动排序</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> [heappop(h) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(h))]</span><br><span class=\"line\"></span><br><span class=\"line\">heapsort([<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">1</span>,<span class=\"number\">9</span>,<span class=\"number\">3</span>,<span class=\"number\">0</span>,<span class=\"number\">7</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]) <span class=\"comment\"># [0,2,1,3,5,6,7,9,4,8]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ============== 分割线 ==============</span></span><br><span class=\"line\"><span class=\"comment\"># 利用heapq模块实现取top-k</span></span><br><span class=\"line\">heapq.nlargest(<span class=\"number\">100</span>, li)</span><br></pre></td></tr></table></figure>\n<p>优先队列：一些元素的集合，POP操作每次执行都会从优先队列中弹出最大（或最小）的元素。</p>\n<blockquote>\n<p>堆——优先队列</p>\n</blockquote>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://python.usyiyi.cn/translate/python_352/library/heapq.html\" target=\"_blank\" rel=\"noopener\">http://python.usyiyi.cn/translate/python_352/library/heapq.html</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 位运算</span></span><br><span class=\"line\"><span class=\"comment\"># &gt;&gt; 除以2</span></span><br><span class=\"line\"><span class=\"number\">2</span> &gt;&gt; <span class=\"number\">1</span> <span class=\"comment\"># 1 </span></span><br><span class=\"line\"><span class=\"number\">4</span> &gt;&gt; <span class=\"number\">1</span> <span class=\"comment\"># 2</span></span><br><span class=\"line\"><span class=\"number\">8</span> &gt;&gt; <span class=\"number\">1</span> <span class=\"comment\"># 4</span></span><br><span class=\"line\"><span class=\"comment\"># &lt;&lt; 乘以 2</span></span><br><span class=\"line\"><span class=\"number\">2</span> &lt;&lt; <span class=\"number\">1</span>  <span class=\"comment\"># 4</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>现在有n个数（n&gt;10000），设计算法，按大小顺序得到前<del>10</del>m大的数。</p>","more":"<ul>\n<li>应用场景：榜单TOP 10</li>\n</ul>\n<h1 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h1><ol>\n<li>先排序，取前 10 个数 O(nlogn)</li>\n<li>只留前 10 个数，开一个长度为 10 的列表，用插入排序取出 10 个数，来一个数和列表最后一个数比较，如果比它更小就扔掉 O(nm)不适用与 m 特别大的时候</li>\n<li>堆 O(nlogm)</li>\n</ol>\n<p>用堆解决思路：</p>\n<ol>\n<li>取列表前m个元素建立一个小根堆。堆顶就是目前第m大的数。</li>\n<li>依次向后遍历原列表，对于列表中的元素，如果小于堆顶，则忽略该元素；如果大于堆顶，则将堆顶更换为该元素，并且对堆进行一次调整；</li>\n<li>遍历列表所有元素后，倒序弹出堆顶。</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sift</span><span class=\"params\">(data, low, high)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    调整函数</span></span><br><span class=\"line\"><span class=\"string\">    data: 列表</span></span><br><span class=\"line\"><span class=\"string\">    low：待调整的子树的根位置</span></span><br><span class=\"line\"><span class=\"string\">    high：待调整的子树的最后一个节点的位置</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    i = low</span><br><span class=\"line\">    j = <span class=\"number\">2</span> * i + <span class=\"number\">1</span></span><br><span class=\"line\">    tmp = data[i]</span><br><span class=\"line\">    <span class=\"comment\"># i指向空位置</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> j&lt;=high:      <span class=\"comment\">#领导已经撸到底了</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> j != high <span class=\"keyword\">and</span> data[j] &lt; data[j+<span class=\"number\">1</span>]:</span><br><span class=\"line\">            j += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\">#j指向数值大的孩子</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> tmp &lt; data[j]:   <span class=\"comment\">#如果小领导比撸下来的大领导能力值大</span></span><br><span class=\"line\">            data[i] = data[j]</span><br><span class=\"line\">            i = j</span><br><span class=\"line\">            j = <span class=\"number\">2</span>*i+<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>       <span class=\"comment\">#撸下来的领导比候选的领导能力值大</span></span><br><span class=\"line\">    data[i] = tmp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">topn</span><span class=\"params\">(li, n)</span>:</span></span><br><span class=\"line\">    heap = li[<span class=\"number\">0</span>:n]</span><br><span class=\"line\">    <span class=\"comment\"># 建堆</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n // <span class=\"number\">2</span> - <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">        sift(heap, i, n - <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n, len(li)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> li[i] &gt; heap[<span class=\"number\">0</span>]:</span><br><span class=\"line\">            heap[<span class=\"number\">0</span>] = li[i]</span><br><span class=\"line\">            sift(heap, <span class=\"number\">0</span>, n - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 出数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n - <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">        heap[<span class=\"number\">0</span>], heap[i] = heap[i], heap[<span class=\"number\">0</span>]</span><br><span class=\"line\">        sift(heap, <span class=\"number\">0</span>, i - <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Python内置模块——heapq</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> heapq</span><br><span class=\"line\"><span class=\"comment\"># 利用heapq模块实现堆排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">heapsort</span><span class=\"params\">(li)</span>:</span></span><br><span class=\"line\">    h = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> li:</span><br><span class=\"line\">        heapq.heappush(h, value)<span class=\"comment\"># 建堆, 并自动排序</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> [heappop(h) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(h))]</span><br><span class=\"line\"></span><br><span class=\"line\">heapsort([<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">1</span>,<span class=\"number\">9</span>,<span class=\"number\">3</span>,<span class=\"number\">0</span>,<span class=\"number\">7</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]) <span class=\"comment\"># [0,2,1,3,5,6,7,9,4,8]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ============== 分割线 ==============</span></span><br><span class=\"line\"><span class=\"comment\"># 利用heapq模块实现取top-k</span></span><br><span class=\"line\">heapq.nlargest(<span class=\"number\">100</span>, li)</span><br></pre></td></tr></table></figure>\n<p>优先队列：一些元素的集合，POP操作每次执行都会从优先队列中弹出最大（或最小）的元素。</p>\n<blockquote>\n<p>堆——优先队列</p>\n</blockquote>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://python.usyiyi.cn/translate/python_352/library/heapq.html\" target=\"_blank\" rel=\"noopener\">http://python.usyiyi.cn/translate/python_352/library/heapq.html</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 位运算</span></span><br><span class=\"line\"><span class=\"comment\"># &gt;&gt; 除以2</span></span><br><span class=\"line\"><span class=\"number\">2</span> &gt;&gt; <span class=\"number\">1</span> <span class=\"comment\"># 1 </span></span><br><span class=\"line\"><span class=\"number\">4</span> &gt;&gt; <span class=\"number\">1</span> <span class=\"comment\"># 2</span></span><br><span class=\"line\"><span class=\"number\">8</span> &gt;&gt; <span class=\"number\">1</span> <span class=\"comment\"># 4</span></span><br><span class=\"line\"><span class=\"comment\"># &lt;&lt; 乘以 2</span></span><br><span class=\"line\"><span class=\"number\">2</span> &lt;&lt; <span class=\"number\">1</span>  <span class=\"comment\"># 4</span></span><br></pre></td></tr></table></figure>"},{"title":"linux bash","date":"2017-05-20T16:38:20.000Z","keywords":null,"description":null,"_content":"\n<!-- more -->\n\n`man builtin` 查看内置命令\n`source` 执行 sh 文件\n`unset` 卸载函数\n`alias` 别名\n`unalias` 卸载别名\n`hash` 缓存命令路径\n`touch {1..10}.txt`  建立 10 个文件\n\n```sh\nfunction test() {\n    # 交互，输入的字符赋值给 name\n    read -p 'please input your hostname' name\n    # 设置主机名为 name 的值，shell 中 $name 来使用变量\n    hostnamectl set-hostname $name;\n    # 查看主机名\n    hostname;\n}\n```\n\n# 元字符\n\n## \\`\\<cmd>` 取命令的执行结果\n\n```sh\nls\n# anaconda-post.log bin dev etc home lib lib64 media mnt opt proc Python-3.6.1\nres=`ls`    # 把 ls 命令的结果赋值给 res\necho $res    # 显示 res 这个变量的值\n# anaconda-post.log bin dev etc home lib lib64 media mnt opt proc Python-3.6.1\n```\n\n## $() 同 `` 弥补缺憾\n\n```sh\nres=`echo `ls`` #嵌套使用后无法达到预想的效果：取echo 一堆文件名的效果。\necho $res # ls\nres=$(echo $(ls)) #替代方案\necho $res\n# anaconda-post.log bin dev etc home lib lib64 media mnt opt proc Python-3.6.1\n```\n\n## ~ ，加目录\n\n```sh\ncd ~\npwd # /root\n```\n\n## [ ] 字符通配，匹配括号内之一\n\n```sh\nls [abc].txt # a.txt B.txt c.txt\nls [abc][a].txt # aa.txt\nls [a-z].txt  # A.txt ... z.txt\nls [a-Z][0-9][a-x] # a1C.txt\n```\n\n## { } 范围\n>括号内的开头和结尾必须是空格\n\n```sh\ntouch {1..10}.txt\n# 10.txt  1.txt  2.txt  3.txt  4.txt  5.txt  6.txt  7.txt  8.txt  9.txt\ntouch {a..z}.txt\n#a.txt  c.txt  e.txt  g.txt  i.txt  k.txt  m.txt  o.txt  q.txt  s.txt  u.txt  w.txt  y.txt\n#b.txt  d.txt  f.txt  h.txt  j.txt  l.txt  n.txt  p.txt  r.txt  t.txt  v.txt  x.txt  z.txt\n```\n\n## ！ 非，取反\n\n```sh\nls [!0-9].txt\na.txt  b.txt  c.txt  d.txt  e.txt  f.txt\n```\n\n\n## $?  上一条码命令是否执行成功\n\n```sh\nls\necho $? # 0 执行成功\nsss\necho $? # 127\n```\n\n## $ \n\n```sh\n$ # 变量\necho $res\necho $[1+10]    # 11\necho $[10%3]    # 1  取模\n```\n\n- & 后台运行\n\n- && 与运算\n\n\n# 固话命令的方式\n\n```sh\n# 执行顺序\n/etc/profile    # 1 环境变量\n/etc/profile.d/<可执行文件>  # 2\n/root/.bash_profile     # 3  当前用户家目录下\n/root/.bashrc    # 4\n/root/bashrc    # 5\n/etc/bashrc     # 6\n```\n\n\n# 正则表达式\n\n## grep\n\n`-n` 显示行号\n`-o` 只显示匹配的内容\n`-i` 忽略大小写\n`-q` 静默\n`-v` 取反，其它行\n`-w` 单词\n`-l` 过滤成功显示文件路径\n`-A` 显示匹配成功后的几行 <要加参数 n>\n`-B` 显示匹配成功前的几行 <要加参数 n>\n`-C` 显示匹配成功的附近几行 <要加参数 n>\n`-c` 显示匹配成功的数目\n\n```sh\ngrep 'root' /etc/passwd\n#root:x:0:0:root:/root:/bin/bash\n#operator:x:11:0:operator:/root:/sbin/nologin\ngrep -i 'hello' a.txt\n# 正则\ngrep 'bash$' /etc/passwd # bash 结尾\ngrep '^root' /etc/passwd # root 开头\ngrep '^b.n' /etc/passwd # b 开头 中间任意一个字符 n 结尾的\negrep -e 'he' -e 'ha' a.txt # egrep 'h(e|a)' a.txt\ngrep -r 'root' /test # 查找包含 root 内容文件及内容显示出来\ngrep -r 'root' /test # 查找包含 root 文件的文件路径\n```\n\n*注：最好用 `egrep`*\n\n\n\n## 参考\n-  http://www.cnblogs.com/OldJack/p/6607155.html\n-  http://www.cnblogs.com/linhaifeng/p/6592572.html\n\n# sed\n流式编辑器\n\n`-n` 静默模式，不输出\n`-e` 指定多个规则，同`grep`\n`-i` 对文件直接进行修改\n\n文件形式规则`pattern.sed`记录规则\n\n```sh\n# 核心\nsed '' test # 没有修改\nsed -n '' test  # 静默模式，不输出\nsed -f pattern.sed test # 文件形式\nsed '3d' test # 删除第 3 行\nsed '1,3d' test # 删除 1 2 3 行\nsed '1d;3d;' test # 删除 1 行和 3行\nsed -n '3p' test # 打印第三行\nsed '3c 111' test # 修改第三行为 111\nsed '3a 222' test # 追加一行 222\nsed '3i 333' test # 在第 3 行前面插入 333\n# 正则\nsed '/^root/d' /etc/passwd # 删除以 root 开头的行\nsed '/ai$/d' test # 删除以 ai 结尾的行\nsed '/ai/d' test # 删除有 ai 的行\nsed '/ai.*$/d' test   # 同上\nsed '/^s/c 1111' test # 把 s 开头的行改为 1111\n# 常用\nsed 's/root/sb/' test # 匹配所有的 root 改为 sb；如果一行有多个，只改一个\nsed 's/root/sb/g' test # 匹配所有的 root 改为 sb；更改多个\nsed '/blex/s/sb/SB/g' test # 把blex 这一行的 sb 改为 SB\n# 所有 sed 都使用 sed -r\n# 把 blex 这一行的 sb 改为 SB  \nsed -r '/^[0-9][a-Z]xsb$/s/sb/SB/g' text\nsed -r '/^[0-9]([a-Z]+)xsb$/s/sb/SB/g' text # 效果同上\nsed -r '/^[0-9]([a-Z]{3})xsb$/s/sb/SB/g' text # 效果同上\n# 正则 （）部分概念   \\1\\2 正则匹配多个部分概念\nsed -r 's/^([a-Z]+)([^a-Z])/\\2/g' /etc/passwd  # 匹配第一个单词并去掉\nsed -r 's/([^a-Z])([a-Z]+)$/\\1/g' /etc/passwd # 匹配最后一个单词\nsed -r 's/^([a-Z])([^a-Z]+)([a-Z])([^a-Z]+)/\\3\\2\\1\\4/g'  # 第一个单词和第二个单词换位置\n```\n\n*注意：*\n\n- 正则分多个部分\n- 不一定非得 /// 只要是无意义的三个（如：###）\n\n# awk\n`-F` 执行分隔符，默认为空格或多个空格\n`NF` 分成几段内容\n`$NF` 取最后一段内容\n`NR` 行号\n\n```sh\nawk -F: '{print $1}' /etc/passwd    # 取第一个部分\n# $0 是取所有\nawk -F: '{print $1,NF}' /etc/passwd\n# root 7\nawk -F: '{print $NF}' /etc/passwd # 取最后一段内容\nawk -F: 'NR==1{print $1,NR}' /etc/passwd    # 行定位 只显示第一行\n# root 1\nawk -F: 'NR<=3{print $1,NR}' /etc/passwd    # 只要前 3 行\nawk -F: 'NR<=3{print $1,\"---\",NR}' /etc/passwd  # 小段内容之间的分隔\n# and\nawk -F: 'NR>=3 && NR<=5{print $1,\"---\",NR}' /etc/passwd # 取几行到几行之间的\n# or\nawk -F: 'NR<=2 || NR>=7{print $1,\"---\",NR}' /etc/passwd\n\n# 正则定址\nawk -F: '/nologin$/{print $1}' /etc/passwd  # 获取所有不能登录的用户名\nawk -F: '$1~/^r.*t$/{print $3}' /etc/passwd # 某一段内容来匹配正则\nawk -F: '$1==\"root\"/^r.*t$/{print $3}' /etc/passwd # 第一段内容匹配 root\nawk -F: '$3>=7{print NR,$1}' /etc/passwd # uid 大于 7 的用户名\n# 通过变量类传递\ncount=7\nawk -v x=$count -F: '$3>=x{print NR,$1}' /etc/passwd # 活 的代码\n```\n\n- 示例\n\n```sh\n# 获取网卡地址\nifconfig | awk 'NR==2{print $2}'    # 172.17.0.2\nip=`ifconfig | awk 'NR==2{print $2}'`\necho $ip    # 172.17.0.2\n```\n\n# shell 脚本\n\n- 系统变量\n\n`env` 系统环境变量\n`set` 所有变量\n`PS1` shell 显示的用户\n\n```sh\nexport money=1000   # 定义全局变量\n```\n\n- 变量\n\n```sh\nvarname = value # 声明变量\necho $varanme   # 显示变量值\nunset varname   # 删除变量\nmoney=10\necho $money\necho ${money}0000 # 100000  # 变量边界\n测试命令 test []\n[ -d /etc ]  # echo $?  查看结果\n```\n\n## if\n\n```sh\n#!/bin/bash\nvar='/etc/passwd'\n# 接收用户输入\n# read -p 'please input you file path:' var\nif [ -f $var ]\n    then\n        echo \"$var is regular file\"\nelif [ -b $var]\n    then\n        echo \"$var is block\"\nelif [ -d $var ]\n    then\n        echo \"$var is direcotry\"\nelif [ -h $var ]\n    then\n        echo \"$var is symlink\"\nelse\n    echo \"$var is unkown\"\nfi\n```\n\n## while\n\n```sh\n# 不停的看系统内存状态\nwhile :\ndo\n    free\n    sleep 0.5\n    clear\ndone\n```\n\n\n```sh\ncount=1\nwhile [ $count -le 10]\ndo\n    echo $count\n    ((count++))\ndone\n```\n\n\n```sh\nwhile :\ndo\n    read -p 'username' name\n    read -p 'passwd' pwd\n    if [ $name = 'hehe' -a $pwd = '123' ]\n        then\n            echo 'login successful,welcome'\n            break\ndone\necho 'END'\n```\n\n## for\n\n```sh\nfor i in {1..100}\ndo\n    echo $i\ndone    \n```\n\n*？shell 并发线程*\n\n```sh\n# 检测可用ip\nfor i in {1..253}\ndo\n    ping -c1 192.168.1.$i &> /dev/null\n    if [ $? -ne 0]\n        then\n            echo \"192.168.1.$i\"\n    fi\ndone\n```\n\n## case\n\n```sh\nead -p \"username: \" -t 5 uname\necho\nif [[ -z $uname ]]\nthen\nuname=default\nfi\n\ncase $uname in\nroot)\necho \"welcome $uname\"\n;;\nseker)\necho \"welcome $uname\"\n;;\ndefault)\necho \"welcome $uname\"\n;;\n*)\necho \"no user $uname\"\nesac\n```\n\n## 函数\n\n\n```sh\nfunction abc(){\n    echo 'aaa';\n    echo 'bbb';\n}\nfunction start(){\n    echo '----'\n    res=$[1+2]\n    return $res\n}\nstart # 3\n```\n\n## 脚本接收参数\n\n```sh\n#!/bin/bash\necho $1\necho $2\necho $3\necho $4\necho $5\necho ${10}\n```\n\n\n\n```sh\n#test.sh\necho $0\necho $1\necho $2\necho $3\necho ${11}\necho '$$' $$\necho '$*' $*\necho '$@' $@\necho '$#' $#\necho '$?' $?\n\n'''\n测试：python test.sh 1 2 3 4 5 6 7 8 9 10 11\n输出结果：\n./test.sh\n2\n11\n$$ 14312\n$* 1 2 3 4 5 6 7 8 9 10 11\n$@ 1 2 3 4 5 6 7 8 9 10 11\n$# 11\n$? 0\n'''\n```\n\n- 示例 nginx 进程自动重启\n\n```sh\n#!/bin/bash\nps aux | grep nginx | grep -v 'grep'\nif [ $? -ne 0]\n    then\n        systemctl start nginx\nfi\n```\n\n## 计划任务\n\n```\nsystemctl status crond\n```\n\n## 参考\n- http://www.cnblogs.com/linhaifeng/p/6602149.html\n\n\n","source":"_posts/linux-shell.md","raw":"---\ntitle: linux bash\ndate: 2017-05-21 00:38:20\ntags:\ncategories: linux\nkeywords:\ndescription:\n---\n\n<!-- more -->\n\n`man builtin` 查看内置命令\n`source` 执行 sh 文件\n`unset` 卸载函数\n`alias` 别名\n`unalias` 卸载别名\n`hash` 缓存命令路径\n`touch {1..10}.txt`  建立 10 个文件\n\n```sh\nfunction test() {\n    # 交互，输入的字符赋值给 name\n    read -p 'please input your hostname' name\n    # 设置主机名为 name 的值，shell 中 $name 来使用变量\n    hostnamectl set-hostname $name;\n    # 查看主机名\n    hostname;\n}\n```\n\n# 元字符\n\n## \\`\\<cmd>` 取命令的执行结果\n\n```sh\nls\n# anaconda-post.log bin dev etc home lib lib64 media mnt opt proc Python-3.6.1\nres=`ls`    # 把 ls 命令的结果赋值给 res\necho $res    # 显示 res 这个变量的值\n# anaconda-post.log bin dev etc home lib lib64 media mnt opt proc Python-3.6.1\n```\n\n## $() 同 `` 弥补缺憾\n\n```sh\nres=`echo `ls`` #嵌套使用后无法达到预想的效果：取echo 一堆文件名的效果。\necho $res # ls\nres=$(echo $(ls)) #替代方案\necho $res\n# anaconda-post.log bin dev etc home lib lib64 media mnt opt proc Python-3.6.1\n```\n\n## ~ ，加目录\n\n```sh\ncd ~\npwd # /root\n```\n\n## [ ] 字符通配，匹配括号内之一\n\n```sh\nls [abc].txt # a.txt B.txt c.txt\nls [abc][a].txt # aa.txt\nls [a-z].txt  # A.txt ... z.txt\nls [a-Z][0-9][a-x] # a1C.txt\n```\n\n## { } 范围\n>括号内的开头和结尾必须是空格\n\n```sh\ntouch {1..10}.txt\n# 10.txt  1.txt  2.txt  3.txt  4.txt  5.txt  6.txt  7.txt  8.txt  9.txt\ntouch {a..z}.txt\n#a.txt  c.txt  e.txt  g.txt  i.txt  k.txt  m.txt  o.txt  q.txt  s.txt  u.txt  w.txt  y.txt\n#b.txt  d.txt  f.txt  h.txt  j.txt  l.txt  n.txt  p.txt  r.txt  t.txt  v.txt  x.txt  z.txt\n```\n\n## ！ 非，取反\n\n```sh\nls [!0-9].txt\na.txt  b.txt  c.txt  d.txt  e.txt  f.txt\n```\n\n\n## $?  上一条码命令是否执行成功\n\n```sh\nls\necho $? # 0 执行成功\nsss\necho $? # 127\n```\n\n## $ \n\n```sh\n$ # 变量\necho $res\necho $[1+10]    # 11\necho $[10%3]    # 1  取模\n```\n\n- & 后台运行\n\n- && 与运算\n\n\n# 固话命令的方式\n\n```sh\n# 执行顺序\n/etc/profile    # 1 环境变量\n/etc/profile.d/<可执行文件>  # 2\n/root/.bash_profile     # 3  当前用户家目录下\n/root/.bashrc    # 4\n/root/bashrc    # 5\n/etc/bashrc     # 6\n```\n\n\n# 正则表达式\n\n## grep\n\n`-n` 显示行号\n`-o` 只显示匹配的内容\n`-i` 忽略大小写\n`-q` 静默\n`-v` 取反，其它行\n`-w` 单词\n`-l` 过滤成功显示文件路径\n`-A` 显示匹配成功后的几行 <要加参数 n>\n`-B` 显示匹配成功前的几行 <要加参数 n>\n`-C` 显示匹配成功的附近几行 <要加参数 n>\n`-c` 显示匹配成功的数目\n\n```sh\ngrep 'root' /etc/passwd\n#root:x:0:0:root:/root:/bin/bash\n#operator:x:11:0:operator:/root:/sbin/nologin\ngrep -i 'hello' a.txt\n# 正则\ngrep 'bash$' /etc/passwd # bash 结尾\ngrep '^root' /etc/passwd # root 开头\ngrep '^b.n' /etc/passwd # b 开头 中间任意一个字符 n 结尾的\negrep -e 'he' -e 'ha' a.txt # egrep 'h(e|a)' a.txt\ngrep -r 'root' /test # 查找包含 root 内容文件及内容显示出来\ngrep -r 'root' /test # 查找包含 root 文件的文件路径\n```\n\n*注：最好用 `egrep`*\n\n\n\n## 参考\n-  http://www.cnblogs.com/OldJack/p/6607155.html\n-  http://www.cnblogs.com/linhaifeng/p/6592572.html\n\n# sed\n流式编辑器\n\n`-n` 静默模式，不输出\n`-e` 指定多个规则，同`grep`\n`-i` 对文件直接进行修改\n\n文件形式规则`pattern.sed`记录规则\n\n```sh\n# 核心\nsed '' test # 没有修改\nsed -n '' test  # 静默模式，不输出\nsed -f pattern.sed test # 文件形式\nsed '3d' test # 删除第 3 行\nsed '1,3d' test # 删除 1 2 3 行\nsed '1d;3d;' test # 删除 1 行和 3行\nsed -n '3p' test # 打印第三行\nsed '3c 111' test # 修改第三行为 111\nsed '3a 222' test # 追加一行 222\nsed '3i 333' test # 在第 3 行前面插入 333\n# 正则\nsed '/^root/d' /etc/passwd # 删除以 root 开头的行\nsed '/ai$/d' test # 删除以 ai 结尾的行\nsed '/ai/d' test # 删除有 ai 的行\nsed '/ai.*$/d' test   # 同上\nsed '/^s/c 1111' test # 把 s 开头的行改为 1111\n# 常用\nsed 's/root/sb/' test # 匹配所有的 root 改为 sb；如果一行有多个，只改一个\nsed 's/root/sb/g' test # 匹配所有的 root 改为 sb；更改多个\nsed '/blex/s/sb/SB/g' test # 把blex 这一行的 sb 改为 SB\n# 所有 sed 都使用 sed -r\n# 把 blex 这一行的 sb 改为 SB  \nsed -r '/^[0-9][a-Z]xsb$/s/sb/SB/g' text\nsed -r '/^[0-9]([a-Z]+)xsb$/s/sb/SB/g' text # 效果同上\nsed -r '/^[0-9]([a-Z]{3})xsb$/s/sb/SB/g' text # 效果同上\n# 正则 （）部分概念   \\1\\2 正则匹配多个部分概念\nsed -r 's/^([a-Z]+)([^a-Z])/\\2/g' /etc/passwd  # 匹配第一个单词并去掉\nsed -r 's/([^a-Z])([a-Z]+)$/\\1/g' /etc/passwd # 匹配最后一个单词\nsed -r 's/^([a-Z])([^a-Z]+)([a-Z])([^a-Z]+)/\\3\\2\\1\\4/g'  # 第一个单词和第二个单词换位置\n```\n\n*注意：*\n\n- 正则分多个部分\n- 不一定非得 /// 只要是无意义的三个（如：###）\n\n# awk\n`-F` 执行分隔符，默认为空格或多个空格\n`NF` 分成几段内容\n`$NF` 取最后一段内容\n`NR` 行号\n\n```sh\nawk -F: '{print $1}' /etc/passwd    # 取第一个部分\n# $0 是取所有\nawk -F: '{print $1,NF}' /etc/passwd\n# root 7\nawk -F: '{print $NF}' /etc/passwd # 取最后一段内容\nawk -F: 'NR==1{print $1,NR}' /etc/passwd    # 行定位 只显示第一行\n# root 1\nawk -F: 'NR<=3{print $1,NR}' /etc/passwd    # 只要前 3 行\nawk -F: 'NR<=3{print $1,\"---\",NR}' /etc/passwd  # 小段内容之间的分隔\n# and\nawk -F: 'NR>=3 && NR<=5{print $1,\"---\",NR}' /etc/passwd # 取几行到几行之间的\n# or\nawk -F: 'NR<=2 || NR>=7{print $1,\"---\",NR}' /etc/passwd\n\n# 正则定址\nawk -F: '/nologin$/{print $1}' /etc/passwd  # 获取所有不能登录的用户名\nawk -F: '$1~/^r.*t$/{print $3}' /etc/passwd # 某一段内容来匹配正则\nawk -F: '$1==\"root\"/^r.*t$/{print $3}' /etc/passwd # 第一段内容匹配 root\nawk -F: '$3>=7{print NR,$1}' /etc/passwd # uid 大于 7 的用户名\n# 通过变量类传递\ncount=7\nawk -v x=$count -F: '$3>=x{print NR,$1}' /etc/passwd # 活 的代码\n```\n\n- 示例\n\n```sh\n# 获取网卡地址\nifconfig | awk 'NR==2{print $2}'    # 172.17.0.2\nip=`ifconfig | awk 'NR==2{print $2}'`\necho $ip    # 172.17.0.2\n```\n\n# shell 脚本\n\n- 系统变量\n\n`env` 系统环境变量\n`set` 所有变量\n`PS1` shell 显示的用户\n\n```sh\nexport money=1000   # 定义全局变量\n```\n\n- 变量\n\n```sh\nvarname = value # 声明变量\necho $varanme   # 显示变量值\nunset varname   # 删除变量\nmoney=10\necho $money\necho ${money}0000 # 100000  # 变量边界\n测试命令 test []\n[ -d /etc ]  # echo $?  查看结果\n```\n\n## if\n\n```sh\n#!/bin/bash\nvar='/etc/passwd'\n# 接收用户输入\n# read -p 'please input you file path:' var\nif [ -f $var ]\n    then\n        echo \"$var is regular file\"\nelif [ -b $var]\n    then\n        echo \"$var is block\"\nelif [ -d $var ]\n    then\n        echo \"$var is direcotry\"\nelif [ -h $var ]\n    then\n        echo \"$var is symlink\"\nelse\n    echo \"$var is unkown\"\nfi\n```\n\n## while\n\n```sh\n# 不停的看系统内存状态\nwhile :\ndo\n    free\n    sleep 0.5\n    clear\ndone\n```\n\n\n```sh\ncount=1\nwhile [ $count -le 10]\ndo\n    echo $count\n    ((count++))\ndone\n```\n\n\n```sh\nwhile :\ndo\n    read -p 'username' name\n    read -p 'passwd' pwd\n    if [ $name = 'hehe' -a $pwd = '123' ]\n        then\n            echo 'login successful,welcome'\n            break\ndone\necho 'END'\n```\n\n## for\n\n```sh\nfor i in {1..100}\ndo\n    echo $i\ndone    \n```\n\n*？shell 并发线程*\n\n```sh\n# 检测可用ip\nfor i in {1..253}\ndo\n    ping -c1 192.168.1.$i &> /dev/null\n    if [ $? -ne 0]\n        then\n            echo \"192.168.1.$i\"\n    fi\ndone\n```\n\n## case\n\n```sh\nead -p \"username: \" -t 5 uname\necho\nif [[ -z $uname ]]\nthen\nuname=default\nfi\n\ncase $uname in\nroot)\necho \"welcome $uname\"\n;;\nseker)\necho \"welcome $uname\"\n;;\ndefault)\necho \"welcome $uname\"\n;;\n*)\necho \"no user $uname\"\nesac\n```\n\n## 函数\n\n\n```sh\nfunction abc(){\n    echo 'aaa';\n    echo 'bbb';\n}\nfunction start(){\n    echo '----'\n    res=$[1+2]\n    return $res\n}\nstart # 3\n```\n\n## 脚本接收参数\n\n```sh\n#!/bin/bash\necho $1\necho $2\necho $3\necho $4\necho $5\necho ${10}\n```\n\n\n\n```sh\n#test.sh\necho $0\necho $1\necho $2\necho $3\necho ${11}\necho '$$' $$\necho '$*' $*\necho '$@' $@\necho '$#' $#\necho '$?' $?\n\n'''\n测试：python test.sh 1 2 3 4 5 6 7 8 9 10 11\n输出结果：\n./test.sh\n2\n11\n$$ 14312\n$* 1 2 3 4 5 6 7 8 9 10 11\n$@ 1 2 3 4 5 6 7 8 9 10 11\n$# 11\n$? 0\n'''\n```\n\n- 示例 nginx 进程自动重启\n\n```sh\n#!/bin/bash\nps aux | grep nginx | grep -v 'grep'\nif [ $? -ne 0]\n    then\n        systemctl start nginx\nfi\n```\n\n## 计划任务\n\n```\nsystemctl status crond\n```\n\n## 参考\n- http://www.cnblogs.com/linhaifeng/p/6602149.html\n\n\n","slug":"linux-shell","published":1,"updated":"2018-04-01T13:23:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfgx5oxg001omxgovz1x2fmi","content":"<a id=\"more\"></a>\n<p><code>man builtin</code> 查看内置命令<br><code>source</code> 执行 sh 文件<br><code>unset</code> 卸载函数<br><code>alias</code> 别名<br><code>unalias</code> 卸载别名<br><code>hash</code> 缓存命令路径<br><code>touch {1..10}.txt</code>  建立 10 个文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">test</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 交互，输入的字符赋值给 name</span></span><br><span class=\"line\">    <span class=\"built_in\">read</span> -p <span class=\"string\">'please input your hostname'</span> name</span><br><span class=\"line\">    <span class=\"comment\"># 设置主机名为 name 的值，shell 中 $name 来使用变量</span></span><br><span class=\"line\">    hostnamectl <span class=\"built_in\">set</span>-hostname <span class=\"variable\">$name</span>;</span><br><span class=\"line\">    <span class=\"comment\"># 查看主机名</span></span><br><span class=\"line\">    hostname;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h1><h2 id=\"取命令的执行结果\"><a href=\"#取命令的执行结果\" class=\"headerlink\" title=\"`\\` 取命令的执行结果\"></a>`\\<cmd>` 取命令的执行结果</cmd></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls</span><br><span class=\"line\"><span class=\"comment\"># anaconda-post.log bin dev etc home lib lib64 media mnt opt proc Python-3.6.1</span></span><br><span class=\"line\">res=`ls`    <span class=\"comment\"># 把 ls 命令的结果赋值给 res</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$res</span>    <span class=\"comment\"># 显示 res 这个变量的值</span></span><br><span class=\"line\"><span class=\"comment\"># anaconda-post.log bin dev etc home lib lib64 media mnt opt proc Python-3.6.1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"同-弥补缺憾\"><a href=\"#同-弥补缺憾\" class=\"headerlink\" title=\"$() 同  弥补缺憾\"></a>$() 同 <code></code> 弥补缺憾</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res=`<span class=\"built_in\">echo</span> `ls`` <span class=\"comment\">#嵌套使用后无法达到预想的效果：取echo 一堆文件名的效果。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$res</span> <span class=\"comment\"># ls</span></span><br><span class=\"line\">res=$(<span class=\"built_in\">echo</span> $(ls)) <span class=\"comment\">#替代方案</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$res</span></span><br><span class=\"line\"><span class=\"comment\"># anaconda-post.log bin dev etc home lib lib64 media mnt opt proc Python-3.6.1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"，加目录\"><a href=\"#，加目录\" class=\"headerlink\" title=\"~ ，加目录\"></a>~ ，加目录</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\"><span class=\"built_in\">pwd</span> <span class=\"comment\"># /root</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"字符通配，匹配括号内之一\"><a href=\"#字符通配，匹配括号内之一\" class=\"headerlink\" title=\"[ ] 字符通配，匹配括号内之一\"></a>[ ] 字符通配，匹配括号内之一</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls [abc].txt <span class=\"comment\"># a.txt B.txt c.txt</span></span><br><span class=\"line\">ls [abc][a].txt <span class=\"comment\"># aa.txt</span></span><br><span class=\"line\">ls [a-z].txt  <span class=\"comment\"># A.txt ... z.txt</span></span><br><span class=\"line\">ls [a-Z][0-9][a-x] <span class=\"comment\"># a1C.txt</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"范围\"><a href=\"#范围\" class=\"headerlink\" title=\"{ } 范围\"></a>{ } 范围</h2><blockquote>\n<p>括号内的开头和结尾必须是空格</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch &#123;1..10&#125;.txt</span><br><span class=\"line\"><span class=\"comment\"># 10.txt  1.txt  2.txt  3.txt  4.txt  5.txt  6.txt  7.txt  8.txt  9.txt</span></span><br><span class=\"line\">touch &#123;a..z&#125;.txt</span><br><span class=\"line\"><span class=\"comment\">#a.txt  c.txt  e.txt  g.txt  i.txt  k.txt  m.txt  o.txt  q.txt  s.txt  u.txt  w.txt  y.txt</span></span><br><span class=\"line\"><span class=\"comment\">#b.txt  d.txt  f.txt  h.txt  j.txt  l.txt  n.txt  p.txt  r.txt  t.txt  v.txt  x.txt  z.txt</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"！-非，取反\"><a href=\"#！-非，取反\" class=\"headerlink\" title=\"！ 非，取反\"></a>！ 非，取反</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls [!0-9].txt</span><br><span class=\"line\">a.txt  b.txt  c.txt  d.txt  e.txt  f.txt</span><br></pre></td></tr></table></figure>\n<h2 id=\"上一条码命令是否执行成功\"><a href=\"#上一条码命令是否执行成功\" class=\"headerlink\" title=\"$?  上一条码命令是否执行成功\"></a>$?  上一条码命令是否执行成功</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls</span><br><span class=\"line\"><span class=\"built_in\">echo</span> $? <span class=\"comment\"># 0 执行成功</span></span><br><span class=\"line\">sss</span><br><span class=\"line\"><span class=\"built_in\">echo</span> $? <span class=\"comment\"># 127</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"$\"></a>$</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"comment\"># 变量</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$res</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $[1+10]    <span class=\"comment\"># 11</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $[10%3]    <span class=\"comment\"># 1  取模</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>&amp; 后台运行</p>\n</li>\n<li><p>&amp;&amp; 与运算</p>\n</li>\n</ul>\n<h1 id=\"固话命令的方式\"><a href=\"#固话命令的方式\" class=\"headerlink\" title=\"固话命令的方式\"></a>固话命令的方式</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 执行顺序</span></span><br><span class=\"line\">/etc/profile    <span class=\"comment\"># 1 环境变量</span></span><br><span class=\"line\">/etc/profile.d/&lt;可执行文件&gt;  <span class=\"comment\"># 2</span></span><br><span class=\"line\">/root/.bash_profile     <span class=\"comment\"># 3  当前用户家目录下</span></span><br><span class=\"line\">/root/.bashrc    <span class=\"comment\"># 4</span></span><br><span class=\"line\">/root/bashrc    <span class=\"comment\"># 5</span></span><br><span class=\"line\">/etc/bashrc     <span class=\"comment\"># 6</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h1><h2 id=\"grep\"><a href=\"#grep\" class=\"headerlink\" title=\"grep\"></a>grep</h2><p><code>-n</code> 显示行号<br><code>-o</code> 只显示匹配的内容<br><code>-i</code> 忽略大小写<br><code>-q</code> 静默<br><code>-v</code> 取反，其它行<br><code>-w</code> 单词<br><code>-l</code> 过滤成功显示文件路径<br><code>-A</code> 显示匹配成功后的几行 &lt;要加参数 n&gt;<br><code>-B</code> 显示匹配成功前的几行 &lt;要加参数 n&gt;<br><code>-C</code> 显示匹配成功的附近几行 &lt;要加参数 n&gt;<br><code>-c</code> 显示匹配成功的数目</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep <span class=\"string\">'root'</span> /etc/passwd</span><br><span class=\"line\"><span class=\"comment\">#root:x:0:0:root:/root:/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#operator:x:11:0:operator:/root:/sbin/nologin</span></span><br><span class=\"line\">grep -i <span class=\"string\">'hello'</span> a.txt</span><br><span class=\"line\"><span class=\"comment\"># 正则</span></span><br><span class=\"line\">grep <span class=\"string\">'bash$'</span> /etc/passwd <span class=\"comment\"># bash 结尾</span></span><br><span class=\"line\">grep <span class=\"string\">'^root'</span> /etc/passwd <span class=\"comment\"># root 开头</span></span><br><span class=\"line\">grep <span class=\"string\">'^b.n'</span> /etc/passwd <span class=\"comment\"># b 开头 中间任意一个字符 n 结尾的</span></span><br><span class=\"line\">egrep -e <span class=\"string\">'he'</span> -e <span class=\"string\">'ha'</span> a.txt <span class=\"comment\"># egrep 'h(e|a)' a.txt</span></span><br><span class=\"line\">grep -r <span class=\"string\">'root'</span> /<span class=\"built_in\">test</span> <span class=\"comment\"># 查找包含 root 内容文件及内容显示出来</span></span><br><span class=\"line\">grep -r <span class=\"string\">'root'</span> /<span class=\"built_in\">test</span> <span class=\"comment\"># 查找包含 root 文件的文件路径</span></span><br></pre></td></tr></table></figure>\n<p><em>注：最好用 <code>egrep</code></em></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://www.cnblogs.com/OldJack/p/6607155.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/OldJack/p/6607155.html</a></li>\n<li><a href=\"http://www.cnblogs.com/linhaifeng/p/6592572.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/linhaifeng/p/6592572.html</a></li>\n</ul>\n<h1 id=\"sed\"><a href=\"#sed\" class=\"headerlink\" title=\"sed\"></a>sed</h1><p>流式编辑器</p>\n<p><code>-n</code> 静默模式，不输出<br><code>-e</code> 指定多个规则，同<code>grep</code><br><code>-i</code> 对文件直接进行修改</p>\n<p>文件形式规则<code>pattern.sed</code>记录规则</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 核心</span></span><br><span class=\"line\">sed <span class=\"string\">''</span> <span class=\"built_in\">test</span> <span class=\"comment\"># 没有修改</span></span><br><span class=\"line\">sed -n <span class=\"string\">''</span> <span class=\"built_in\">test</span>  <span class=\"comment\"># 静默模式，不输出</span></span><br><span class=\"line\">sed -f pattern.sed <span class=\"built_in\">test</span> <span class=\"comment\"># 文件形式</span></span><br><span class=\"line\">sed <span class=\"string\">'3d'</span> <span class=\"built_in\">test</span> <span class=\"comment\"># 删除第 3 行</span></span><br><span class=\"line\">sed <span class=\"string\">'1,3d'</span> <span class=\"built_in\">test</span> <span class=\"comment\"># 删除 1 2 3 行</span></span><br><span class=\"line\">sed <span class=\"string\">'1d;3d;'</span> <span class=\"built_in\">test</span> <span class=\"comment\"># 删除 1 行和 3行</span></span><br><span class=\"line\">sed -n <span class=\"string\">'3p'</span> <span class=\"built_in\">test</span> <span class=\"comment\"># 打印第三行</span></span><br><span class=\"line\">sed <span class=\"string\">'3c 111'</span> <span class=\"built_in\">test</span> <span class=\"comment\"># 修改第三行为 111</span></span><br><span class=\"line\">sed <span class=\"string\">'3a 222'</span> <span class=\"built_in\">test</span> <span class=\"comment\"># 追加一行 222</span></span><br><span class=\"line\">sed <span class=\"string\">'3i 333'</span> <span class=\"built_in\">test</span> <span class=\"comment\"># 在第 3 行前面插入 333</span></span><br><span class=\"line\"><span class=\"comment\"># 正则</span></span><br><span class=\"line\">sed <span class=\"string\">'/^root/d'</span> /etc/passwd <span class=\"comment\"># 删除以 root 开头的行</span></span><br><span class=\"line\">sed <span class=\"string\">'/ai$/d'</span> <span class=\"built_in\">test</span> <span class=\"comment\"># 删除以 ai 结尾的行</span></span><br><span class=\"line\">sed <span class=\"string\">'/ai/d'</span> <span class=\"built_in\">test</span> <span class=\"comment\"># 删除有 ai 的行</span></span><br><span class=\"line\">sed <span class=\"string\">'/ai.*$/d'</span> <span class=\"built_in\">test</span>   <span class=\"comment\"># 同上</span></span><br><span class=\"line\">sed <span class=\"string\">'/^s/c 1111'</span> <span class=\"built_in\">test</span> <span class=\"comment\"># 把 s 开头的行改为 1111</span></span><br><span class=\"line\"><span class=\"comment\"># 常用</span></span><br><span class=\"line\">sed <span class=\"string\">'s/root/sb/'</span> <span class=\"built_in\">test</span> <span class=\"comment\"># 匹配所有的 root 改为 sb；如果一行有多个，只改一个</span></span><br><span class=\"line\">sed <span class=\"string\">'s/root/sb/g'</span> <span class=\"built_in\">test</span> <span class=\"comment\"># 匹配所有的 root 改为 sb；更改多个</span></span><br><span class=\"line\">sed <span class=\"string\">'/blex/s/sb/SB/g'</span> <span class=\"built_in\">test</span> <span class=\"comment\"># 把blex 这一行的 sb 改为 SB</span></span><br><span class=\"line\"><span class=\"comment\"># 所有 sed 都使用 sed -r</span></span><br><span class=\"line\"><span class=\"comment\"># 把 blex 这一行的 sb 改为 SB  </span></span><br><span class=\"line\">sed -r <span class=\"string\">'/^[0-9][a-Z]xsb$/s/sb/SB/g'</span> text</span><br><span class=\"line\">sed -r <span class=\"string\">'/^[0-9]([a-Z]+)xsb$/s/sb/SB/g'</span> text <span class=\"comment\"># 效果同上</span></span><br><span class=\"line\">sed -r <span class=\"string\">'/^[0-9]([a-Z]&#123;3&#125;)xsb$/s/sb/SB/g'</span> text <span class=\"comment\"># 效果同上</span></span><br><span class=\"line\"><span class=\"comment\"># 正则 （）部分概念   \\1\\2 正则匹配多个部分概念</span></span><br><span class=\"line\">sed -r <span class=\"string\">'s/^([a-Z]+)([^a-Z])/\\2/g'</span> /etc/passwd  <span class=\"comment\"># 匹配第一个单词并去掉</span></span><br><span class=\"line\">sed -r <span class=\"string\">'s/([^a-Z])([a-Z]+)$/\\1/g'</span> /etc/passwd <span class=\"comment\"># 匹配最后一个单词</span></span><br><span class=\"line\">sed -r <span class=\"string\">'s/^([a-Z])([^a-Z]+)([a-Z])([^a-Z]+)/\\3\\2\\1\\4/g'</span>  <span class=\"comment\"># 第一个单词和第二个单词换位置</span></span><br></pre></td></tr></table></figure>\n<p><em>注意：</em></p>\n<ul>\n<li>正则分多个部分</li>\n<li>不一定非得 /// 只要是无意义的三个（如：###）</li>\n</ul>\n<h1 id=\"awk\"><a href=\"#awk\" class=\"headerlink\" title=\"awk\"></a>awk</h1><p><code>-F</code> 执行分隔符，默认为空格或多个空格<br><code>NF</code> 分成几段内容<br><code>$NF</code> 取最后一段内容<br><code>NR</code> 行号</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -F: <span class=\"string\">'&#123;print $1&#125;'</span> /etc/passwd    <span class=\"comment\"># 取第一个部分</span></span><br><span class=\"line\"><span class=\"comment\"># $0 是取所有</span></span><br><span class=\"line\">awk -F: <span class=\"string\">'&#123;print $1,NF&#125;'</span> /etc/passwd</span><br><span class=\"line\"><span class=\"comment\"># root 7</span></span><br><span class=\"line\">awk -F: <span class=\"string\">'&#123;print $NF&#125;'</span> /etc/passwd <span class=\"comment\"># 取最后一段内容</span></span><br><span class=\"line\">awk -F: <span class=\"string\">'NR==1&#123;print $1,NR&#125;'</span> /etc/passwd    <span class=\"comment\"># 行定位 只显示第一行</span></span><br><span class=\"line\"><span class=\"comment\"># root 1</span></span><br><span class=\"line\">awk -F: <span class=\"string\">'NR&lt;=3&#123;print $1,NR&#125;'</span> /etc/passwd    <span class=\"comment\"># 只要前 3 行</span></span><br><span class=\"line\">awk -F: <span class=\"string\">'NR&lt;=3&#123;print $1,\"---\",NR&#125;'</span> /etc/passwd  <span class=\"comment\"># 小段内容之间的分隔</span></span><br><span class=\"line\"><span class=\"comment\"># and</span></span><br><span class=\"line\">awk -F: <span class=\"string\">'NR&gt;=3 &amp;&amp; NR&lt;=5&#123;print $1,\"---\",NR&#125;'</span> /etc/passwd <span class=\"comment\"># 取几行到几行之间的</span></span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\">awk -F: <span class=\"string\">'NR&lt;=2 || NR&gt;=7&#123;print $1,\"---\",NR&#125;'</span> /etc/passwd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 正则定址</span></span><br><span class=\"line\">awk -F: <span class=\"string\">'/nologin$/&#123;print $1&#125;'</span> /etc/passwd  <span class=\"comment\"># 获取所有不能登录的用户名</span></span><br><span class=\"line\">awk -F: <span class=\"string\">'$1~/^r.*t$/&#123;print $3&#125;'</span> /etc/passwd <span class=\"comment\"># 某一段内容来匹配正则</span></span><br><span class=\"line\">awk -F: <span class=\"string\">'$1==\"root\"/^r.*t$/&#123;print $3&#125;'</span> /etc/passwd <span class=\"comment\"># 第一段内容匹配 root</span></span><br><span class=\"line\">awk -F: <span class=\"string\">'$3&gt;=7&#123;print NR,$1&#125;'</span> /etc/passwd <span class=\"comment\"># uid 大于 7 的用户名</span></span><br><span class=\"line\"><span class=\"comment\"># 通过变量类传递</span></span><br><span class=\"line\">count=7</span><br><span class=\"line\">awk -v x=<span class=\"variable\">$count</span> -F: <span class=\"string\">'$3&gt;=x&#123;print NR,$1&#125;'</span> /etc/passwd <span class=\"comment\"># 活 的代码</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>示例</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取网卡地址</span></span><br><span class=\"line\">ifconfig | awk <span class=\"string\">'NR==2&#123;print $2&#125;'</span>    <span class=\"comment\"># 172.17.0.2</span></span><br><span class=\"line\">ip=`ifconfig | awk <span class=\"string\">'NR==2&#123;print $2&#125;'</span>`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$ip</span>    <span class=\"comment\"># 172.17.0.2</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"shell-脚本\"><a href=\"#shell-脚本\" class=\"headerlink\" title=\"shell 脚本\"></a>shell 脚本</h1><ul>\n<li>系统变量</li>\n</ul>\n<p><code>env</code> 系统环境变量<br><code>set</code> 所有变量<br><code>PS1</code> shell 显示的用户</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> money=1000   <span class=\"comment\"># 定义全局变量</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>变量</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">varname = value <span class=\"comment\"># 声明变量</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$varanme</span>   <span class=\"comment\"># 显示变量值</span></span><br><span class=\"line\"><span class=\"built_in\">unset</span> varname   <span class=\"comment\"># 删除变量</span></span><br><span class=\"line\">money=10</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$money</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;money&#125;</span>0000 <span class=\"comment\"># 100000  # 变量边界</span></span><br><span class=\"line\">测试命令 <span class=\"built_in\">test</span> []</span><br><span class=\"line\">[ -d /etc ]  <span class=\"comment\"># echo $?  查看结果</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"if\"><a href=\"#if\" class=\"headerlink\" title=\"if\"></a>if</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">var=<span class=\"string\">'/etc/passwd'</span></span><br><span class=\"line\"><span class=\"comment\"># 接收用户输入</span></span><br><span class=\"line\"><span class=\"comment\"># read -p 'please input you file path:' var</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -f <span class=\"variable\">$var</span> ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$var</span> is regular file\"</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ -b <span class=\"variable\">$var</span>]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$var</span> is block\"</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ -d <span class=\"variable\">$var</span> ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$var</span> is direcotry\"</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ -h <span class=\"variable\">$var</span> ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$var</span> is symlink\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$var</span> is unkown\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"while\"><a href=\"#while\" class=\"headerlink\" title=\"while\"></a>while</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 不停的看系统内存状态</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> :</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    free</span><br><span class=\"line\">    sleep 0.5</span><br><span class=\"line\">    clear</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">count=1</span><br><span class=\"line\"><span class=\"keyword\">while</span> [ <span class=\"variable\">$count</span> -le 10]</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$count</span></span><br><span class=\"line\">    ((count++))</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> :</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">read</span> -p <span class=\"string\">'username'</span> name</span><br><span class=\"line\">    <span class=\"built_in\">read</span> -p <span class=\"string\">'passwd'</span> <span class=\"built_in\">pwd</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"variable\">$name</span> = <span class=\"string\">'hehe'</span> -a <span class=\"variable\">$pwd</span> = <span class=\"string\">'123'</span> ]</span><br><span class=\"line\">        <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"built_in\">echo</span> <span class=\"string\">'login successful,welcome'</span></span><br><span class=\"line\">            <span class=\"built_in\">break</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'END'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"for\"><a href=\"#for\" class=\"headerlink\" title=\"for\"></a>for</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> &#123;1..100&#125;</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$i</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p><em>？shell 并发线程</em></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检测可用ip</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> &#123;1..253&#125;</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    ping -c1 192.168.1.<span class=\"variable\">$i</span> &amp;&gt; /dev/null</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ $? -ne 0]</span><br><span class=\"line\">        <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"built_in\">echo</span> <span class=\"string\">\"192.168.1.<span class=\"variable\">$i</span>\"</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"case\"><a href=\"#case\" class=\"headerlink\" title=\"case\"></a>case</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ead -p <span class=\"string\">\"username: \"</span> -t 5 uname</span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ -z <span class=\"variable\">$uname</span> ]]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">uname=default</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$uname</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">root)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"welcome <span class=\"variable\">$uname</span>\"</span></span><br><span class=\"line\">;;</span><br><span class=\"line\">seker)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"welcome <span class=\"variable\">$uname</span>\"</span></span><br><span class=\"line\">;;</span><br><span class=\"line\">default)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"welcome <span class=\"variable\">$uname</span>\"</span></span><br><span class=\"line\">;;</span><br><span class=\"line\">*)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"no user <span class=\"variable\">$uname</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">abc</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">'aaa'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">'bbb'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">start</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">'----'</span></span><br><span class=\"line\">    res=$[1+2]</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"variable\">$res</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">start <span class=\"comment\"># 3</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"脚本接收参数\"><a href=\"#脚本接收参数\" class=\"headerlink\" title=\"脚本接收参数\"></a>脚本接收参数</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$1</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$2</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$3</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$4</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$5</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;10&#125;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#test.sh</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$0</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$1</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$2</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$3</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;11&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'$$'</span> $$</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'$*'</span> $*</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'$@'</span> <span class=\"variable\">$@</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'$#'</span> <span class=\"variable\">$#</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'$?'</span> $?</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">''</span><span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">测试：python test.sh 1 2 3 4 5 6 7 8 9 10 11</span></span><br><span class=\"line\"><span class=\"string\">输出结果：</span></span><br><span class=\"line\"><span class=\"string\">./test.sh</span></span><br><span class=\"line\"><span class=\"string\">2</span></span><br><span class=\"line\"><span class=\"string\">11</span></span><br><span class=\"line\"><span class=\"string\">$$ 14312</span></span><br><span class=\"line\"><span class=\"string\">$* 1 2 3 4 5 6 7 8 9 10 11</span></span><br><span class=\"line\"><span class=\"string\">$@ 1 2 3 4 5 6 7 8 9 10 11</span></span><br><span class=\"line\"><span class=\"string\">$# 11</span></span><br><span class=\"line\"><span class=\"string\">$? 0</span></span><br><span class=\"line\"><span class=\"string\">'</span><span class=\"string\">''</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>示例 nginx 进程自动重启</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">ps aux | grep nginx | grep -v <span class=\"string\">'grep'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ $? -ne 0]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        systemctl start nginx</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"计划任务\"><a href=\"#计划任务\" class=\"headerlink\" title=\"计划任务\"></a>计划任务</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status crond</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://www.cnblogs.com/linhaifeng/p/6602149.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/linhaifeng/p/6602149.html</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><code>man builtin</code> 查看内置命令<br><code>source</code> 执行 sh 文件<br><code>unset</code> 卸载函数<br><code>alias</code> 别名<br><code>unalias</code> 卸载别名<br><code>hash</code> 缓存命令路径<br><code>touch {1..10}.txt</code>  建立 10 个文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">test</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 交互，输入的字符赋值给 name</span></span><br><span class=\"line\">    <span class=\"built_in\">read</span> -p <span class=\"string\">'please input your hostname'</span> name</span><br><span class=\"line\">    <span class=\"comment\"># 设置主机名为 name 的值，shell 中 $name 来使用变量</span></span><br><span class=\"line\">    hostnamectl <span class=\"built_in\">set</span>-hostname <span class=\"variable\">$name</span>;</span><br><span class=\"line\">    <span class=\"comment\"># 查看主机名</span></span><br><span class=\"line\">    hostname;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h1><h2 id=\"取命令的执行结果\"><a href=\"#取命令的执行结果\" class=\"headerlink\" title=\"`\\` 取命令的执行结果\"></a>`\\<cmd>` 取命令的执行结果</cmd></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls</span><br><span class=\"line\"><span class=\"comment\"># anaconda-post.log bin dev etc home lib lib64 media mnt opt proc Python-3.6.1</span></span><br><span class=\"line\">res=`ls`    <span class=\"comment\"># 把 ls 命令的结果赋值给 res</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$res</span>    <span class=\"comment\"># 显示 res 这个变量的值</span></span><br><span class=\"line\"><span class=\"comment\"># anaconda-post.log bin dev etc home lib lib64 media mnt opt proc Python-3.6.1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"同-弥补缺憾\"><a href=\"#同-弥补缺憾\" class=\"headerlink\" title=\"$() 同  弥补缺憾\"></a>$() 同 <code></code> 弥补缺憾</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res=`<span class=\"built_in\">echo</span> `ls`` <span class=\"comment\">#嵌套使用后无法达到预想的效果：取echo 一堆文件名的效果。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$res</span> <span class=\"comment\"># ls</span></span><br><span class=\"line\">res=$(<span class=\"built_in\">echo</span> $(ls)) <span class=\"comment\">#替代方案</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$res</span></span><br><span class=\"line\"><span class=\"comment\"># anaconda-post.log bin dev etc home lib lib64 media mnt opt proc Python-3.6.1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"，加目录\"><a href=\"#，加目录\" class=\"headerlink\" title=\"~ ，加目录\"></a>~ ，加目录</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\"><span class=\"built_in\">pwd</span> <span class=\"comment\"># /root</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"字符通配，匹配括号内之一\"><a href=\"#字符通配，匹配括号内之一\" class=\"headerlink\" title=\"[ ] 字符通配，匹配括号内之一\"></a>[ ] 字符通配，匹配括号内之一</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls [abc].txt <span class=\"comment\"># a.txt B.txt c.txt</span></span><br><span class=\"line\">ls [abc][a].txt <span class=\"comment\"># aa.txt</span></span><br><span class=\"line\">ls [a-z].txt  <span class=\"comment\"># A.txt ... z.txt</span></span><br><span class=\"line\">ls [a-Z][0-9][a-x] <span class=\"comment\"># a1C.txt</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"范围\"><a href=\"#范围\" class=\"headerlink\" title=\"{ } 范围\"></a>{ } 范围</h2><blockquote>\n<p>括号内的开头和结尾必须是空格</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch &#123;1..10&#125;.txt</span><br><span class=\"line\"><span class=\"comment\"># 10.txt  1.txt  2.txt  3.txt  4.txt  5.txt  6.txt  7.txt  8.txt  9.txt</span></span><br><span class=\"line\">touch &#123;a..z&#125;.txt</span><br><span class=\"line\"><span class=\"comment\">#a.txt  c.txt  e.txt  g.txt  i.txt  k.txt  m.txt  o.txt  q.txt  s.txt  u.txt  w.txt  y.txt</span></span><br><span class=\"line\"><span class=\"comment\">#b.txt  d.txt  f.txt  h.txt  j.txt  l.txt  n.txt  p.txt  r.txt  t.txt  v.txt  x.txt  z.txt</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"！-非，取反\"><a href=\"#！-非，取反\" class=\"headerlink\" title=\"！ 非，取反\"></a>！ 非，取反</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls [!0-9].txt</span><br><span class=\"line\">a.txt  b.txt  c.txt  d.txt  e.txt  f.txt</span><br></pre></td></tr></table></figure>\n<h2 id=\"上一条码命令是否执行成功\"><a href=\"#上一条码命令是否执行成功\" class=\"headerlink\" title=\"$?  上一条码命令是否执行成功\"></a>$?  上一条码命令是否执行成功</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls</span><br><span class=\"line\"><span class=\"built_in\">echo</span> $? <span class=\"comment\"># 0 执行成功</span></span><br><span class=\"line\">sss</span><br><span class=\"line\"><span class=\"built_in\">echo</span> $? <span class=\"comment\"># 127</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"$\"></a>$</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"comment\"># 变量</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$res</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $[1+10]    <span class=\"comment\"># 11</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $[10%3]    <span class=\"comment\"># 1  取模</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>&amp; 后台运行</p>\n</li>\n<li><p>&amp;&amp; 与运算</p>\n</li>\n</ul>\n<h1 id=\"固话命令的方式\"><a href=\"#固话命令的方式\" class=\"headerlink\" title=\"固话命令的方式\"></a>固话命令的方式</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 执行顺序</span></span><br><span class=\"line\">/etc/profile    <span class=\"comment\"># 1 环境变量</span></span><br><span class=\"line\">/etc/profile.d/&lt;可执行文件&gt;  <span class=\"comment\"># 2</span></span><br><span class=\"line\">/root/.bash_profile     <span class=\"comment\"># 3  当前用户家目录下</span></span><br><span class=\"line\">/root/.bashrc    <span class=\"comment\"># 4</span></span><br><span class=\"line\">/root/bashrc    <span class=\"comment\"># 5</span></span><br><span class=\"line\">/etc/bashrc     <span class=\"comment\"># 6</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h1><h2 id=\"grep\"><a href=\"#grep\" class=\"headerlink\" title=\"grep\"></a>grep</h2><p><code>-n</code> 显示行号<br><code>-o</code> 只显示匹配的内容<br><code>-i</code> 忽略大小写<br><code>-q</code> 静默<br><code>-v</code> 取反，其它行<br><code>-w</code> 单词<br><code>-l</code> 过滤成功显示文件路径<br><code>-A</code> 显示匹配成功后的几行 &lt;要加参数 n&gt;<br><code>-B</code> 显示匹配成功前的几行 &lt;要加参数 n&gt;<br><code>-C</code> 显示匹配成功的附近几行 &lt;要加参数 n&gt;<br><code>-c</code> 显示匹配成功的数目</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep <span class=\"string\">'root'</span> /etc/passwd</span><br><span class=\"line\"><span class=\"comment\">#root:x:0:0:root:/root:/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#operator:x:11:0:operator:/root:/sbin/nologin</span></span><br><span class=\"line\">grep -i <span class=\"string\">'hello'</span> a.txt</span><br><span class=\"line\"><span class=\"comment\"># 正则</span></span><br><span class=\"line\">grep <span class=\"string\">'bash$'</span> /etc/passwd <span class=\"comment\"># bash 结尾</span></span><br><span class=\"line\">grep <span class=\"string\">'^root'</span> /etc/passwd <span class=\"comment\"># root 开头</span></span><br><span class=\"line\">grep <span class=\"string\">'^b.n'</span> /etc/passwd <span class=\"comment\"># b 开头 中间任意一个字符 n 结尾的</span></span><br><span class=\"line\">egrep -e <span class=\"string\">'he'</span> -e <span class=\"string\">'ha'</span> a.txt <span class=\"comment\"># egrep 'h(e|a)' a.txt</span></span><br><span class=\"line\">grep -r <span class=\"string\">'root'</span> /<span class=\"built_in\">test</span> <span class=\"comment\"># 查找包含 root 内容文件及内容显示出来</span></span><br><span class=\"line\">grep -r <span class=\"string\">'root'</span> /<span class=\"built_in\">test</span> <span class=\"comment\"># 查找包含 root 文件的文件路径</span></span><br></pre></td></tr></table></figure>\n<p><em>注：最好用 <code>egrep</code></em></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://www.cnblogs.com/OldJack/p/6607155.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/OldJack/p/6607155.html</a></li>\n<li><a href=\"http://www.cnblogs.com/linhaifeng/p/6592572.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/linhaifeng/p/6592572.html</a></li>\n</ul>\n<h1 id=\"sed\"><a href=\"#sed\" class=\"headerlink\" title=\"sed\"></a>sed</h1><p>流式编辑器</p>\n<p><code>-n</code> 静默模式，不输出<br><code>-e</code> 指定多个规则，同<code>grep</code><br><code>-i</code> 对文件直接进行修改</p>\n<p>文件形式规则<code>pattern.sed</code>记录规则</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 核心</span></span><br><span class=\"line\">sed <span class=\"string\">''</span> <span class=\"built_in\">test</span> <span class=\"comment\"># 没有修改</span></span><br><span class=\"line\">sed -n <span class=\"string\">''</span> <span class=\"built_in\">test</span>  <span class=\"comment\"># 静默模式，不输出</span></span><br><span class=\"line\">sed -f pattern.sed <span class=\"built_in\">test</span> <span class=\"comment\"># 文件形式</span></span><br><span class=\"line\">sed <span class=\"string\">'3d'</span> <span class=\"built_in\">test</span> <span class=\"comment\"># 删除第 3 行</span></span><br><span class=\"line\">sed <span class=\"string\">'1,3d'</span> <span class=\"built_in\">test</span> <span class=\"comment\"># 删除 1 2 3 行</span></span><br><span class=\"line\">sed <span class=\"string\">'1d;3d;'</span> <span class=\"built_in\">test</span> <span class=\"comment\"># 删除 1 行和 3行</span></span><br><span class=\"line\">sed -n <span class=\"string\">'3p'</span> <span class=\"built_in\">test</span> <span class=\"comment\"># 打印第三行</span></span><br><span class=\"line\">sed <span class=\"string\">'3c 111'</span> <span class=\"built_in\">test</span> <span class=\"comment\"># 修改第三行为 111</span></span><br><span class=\"line\">sed <span class=\"string\">'3a 222'</span> <span class=\"built_in\">test</span> <span class=\"comment\"># 追加一行 222</span></span><br><span class=\"line\">sed <span class=\"string\">'3i 333'</span> <span class=\"built_in\">test</span> <span class=\"comment\"># 在第 3 行前面插入 333</span></span><br><span class=\"line\"><span class=\"comment\"># 正则</span></span><br><span class=\"line\">sed <span class=\"string\">'/^root/d'</span> /etc/passwd <span class=\"comment\"># 删除以 root 开头的行</span></span><br><span class=\"line\">sed <span class=\"string\">'/ai$/d'</span> <span class=\"built_in\">test</span> <span class=\"comment\"># 删除以 ai 结尾的行</span></span><br><span class=\"line\">sed <span class=\"string\">'/ai/d'</span> <span class=\"built_in\">test</span> <span class=\"comment\"># 删除有 ai 的行</span></span><br><span class=\"line\">sed <span class=\"string\">'/ai.*$/d'</span> <span class=\"built_in\">test</span>   <span class=\"comment\"># 同上</span></span><br><span class=\"line\">sed <span class=\"string\">'/^s/c 1111'</span> <span class=\"built_in\">test</span> <span class=\"comment\"># 把 s 开头的行改为 1111</span></span><br><span class=\"line\"><span class=\"comment\"># 常用</span></span><br><span class=\"line\">sed <span class=\"string\">'s/root/sb/'</span> <span class=\"built_in\">test</span> <span class=\"comment\"># 匹配所有的 root 改为 sb；如果一行有多个，只改一个</span></span><br><span class=\"line\">sed <span class=\"string\">'s/root/sb/g'</span> <span class=\"built_in\">test</span> <span class=\"comment\"># 匹配所有的 root 改为 sb；更改多个</span></span><br><span class=\"line\">sed <span class=\"string\">'/blex/s/sb/SB/g'</span> <span class=\"built_in\">test</span> <span class=\"comment\"># 把blex 这一行的 sb 改为 SB</span></span><br><span class=\"line\"><span class=\"comment\"># 所有 sed 都使用 sed -r</span></span><br><span class=\"line\"><span class=\"comment\"># 把 blex 这一行的 sb 改为 SB  </span></span><br><span class=\"line\">sed -r <span class=\"string\">'/^[0-9][a-Z]xsb$/s/sb/SB/g'</span> text</span><br><span class=\"line\">sed -r <span class=\"string\">'/^[0-9]([a-Z]+)xsb$/s/sb/SB/g'</span> text <span class=\"comment\"># 效果同上</span></span><br><span class=\"line\">sed -r <span class=\"string\">'/^[0-9]([a-Z]&#123;3&#125;)xsb$/s/sb/SB/g'</span> text <span class=\"comment\"># 效果同上</span></span><br><span class=\"line\"><span class=\"comment\"># 正则 （）部分概念   \\1\\2 正则匹配多个部分概念</span></span><br><span class=\"line\">sed -r <span class=\"string\">'s/^([a-Z]+)([^a-Z])/\\2/g'</span> /etc/passwd  <span class=\"comment\"># 匹配第一个单词并去掉</span></span><br><span class=\"line\">sed -r <span class=\"string\">'s/([^a-Z])([a-Z]+)$/\\1/g'</span> /etc/passwd <span class=\"comment\"># 匹配最后一个单词</span></span><br><span class=\"line\">sed -r <span class=\"string\">'s/^([a-Z])([^a-Z]+)([a-Z])([^a-Z]+)/\\3\\2\\1\\4/g'</span>  <span class=\"comment\"># 第一个单词和第二个单词换位置</span></span><br></pre></td></tr></table></figure>\n<p><em>注意：</em></p>\n<ul>\n<li>正则分多个部分</li>\n<li>不一定非得 /// 只要是无意义的三个（如：###）</li>\n</ul>\n<h1 id=\"awk\"><a href=\"#awk\" class=\"headerlink\" title=\"awk\"></a>awk</h1><p><code>-F</code> 执行分隔符，默认为空格或多个空格<br><code>NF</code> 分成几段内容<br><code>$NF</code> 取最后一段内容<br><code>NR</code> 行号</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -F: <span class=\"string\">'&#123;print $1&#125;'</span> /etc/passwd    <span class=\"comment\"># 取第一个部分</span></span><br><span class=\"line\"><span class=\"comment\"># $0 是取所有</span></span><br><span class=\"line\">awk -F: <span class=\"string\">'&#123;print $1,NF&#125;'</span> /etc/passwd</span><br><span class=\"line\"><span class=\"comment\"># root 7</span></span><br><span class=\"line\">awk -F: <span class=\"string\">'&#123;print $NF&#125;'</span> /etc/passwd <span class=\"comment\"># 取最后一段内容</span></span><br><span class=\"line\">awk -F: <span class=\"string\">'NR==1&#123;print $1,NR&#125;'</span> /etc/passwd    <span class=\"comment\"># 行定位 只显示第一行</span></span><br><span class=\"line\"><span class=\"comment\"># root 1</span></span><br><span class=\"line\">awk -F: <span class=\"string\">'NR&lt;=3&#123;print $1,NR&#125;'</span> /etc/passwd    <span class=\"comment\"># 只要前 3 行</span></span><br><span class=\"line\">awk -F: <span class=\"string\">'NR&lt;=3&#123;print $1,\"---\",NR&#125;'</span> /etc/passwd  <span class=\"comment\"># 小段内容之间的分隔</span></span><br><span class=\"line\"><span class=\"comment\"># and</span></span><br><span class=\"line\">awk -F: <span class=\"string\">'NR&gt;=3 &amp;&amp; NR&lt;=5&#123;print $1,\"---\",NR&#125;'</span> /etc/passwd <span class=\"comment\"># 取几行到几行之间的</span></span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\">awk -F: <span class=\"string\">'NR&lt;=2 || NR&gt;=7&#123;print $1,\"---\",NR&#125;'</span> /etc/passwd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 正则定址</span></span><br><span class=\"line\">awk -F: <span class=\"string\">'/nologin$/&#123;print $1&#125;'</span> /etc/passwd  <span class=\"comment\"># 获取所有不能登录的用户名</span></span><br><span class=\"line\">awk -F: <span class=\"string\">'$1~/^r.*t$/&#123;print $3&#125;'</span> /etc/passwd <span class=\"comment\"># 某一段内容来匹配正则</span></span><br><span class=\"line\">awk -F: <span class=\"string\">'$1==\"root\"/^r.*t$/&#123;print $3&#125;'</span> /etc/passwd <span class=\"comment\"># 第一段内容匹配 root</span></span><br><span class=\"line\">awk -F: <span class=\"string\">'$3&gt;=7&#123;print NR,$1&#125;'</span> /etc/passwd <span class=\"comment\"># uid 大于 7 的用户名</span></span><br><span class=\"line\"><span class=\"comment\"># 通过变量类传递</span></span><br><span class=\"line\">count=7</span><br><span class=\"line\">awk -v x=<span class=\"variable\">$count</span> -F: <span class=\"string\">'$3&gt;=x&#123;print NR,$1&#125;'</span> /etc/passwd <span class=\"comment\"># 活 的代码</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>示例</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取网卡地址</span></span><br><span class=\"line\">ifconfig | awk <span class=\"string\">'NR==2&#123;print $2&#125;'</span>    <span class=\"comment\"># 172.17.0.2</span></span><br><span class=\"line\">ip=`ifconfig | awk <span class=\"string\">'NR==2&#123;print $2&#125;'</span>`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$ip</span>    <span class=\"comment\"># 172.17.0.2</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"shell-脚本\"><a href=\"#shell-脚本\" class=\"headerlink\" title=\"shell 脚本\"></a>shell 脚本</h1><ul>\n<li>系统变量</li>\n</ul>\n<p><code>env</code> 系统环境变量<br><code>set</code> 所有变量<br><code>PS1</code> shell 显示的用户</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> money=1000   <span class=\"comment\"># 定义全局变量</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>变量</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">varname = value <span class=\"comment\"># 声明变量</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$varanme</span>   <span class=\"comment\"># 显示变量值</span></span><br><span class=\"line\"><span class=\"built_in\">unset</span> varname   <span class=\"comment\"># 删除变量</span></span><br><span class=\"line\">money=10</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$money</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;money&#125;</span>0000 <span class=\"comment\"># 100000  # 变量边界</span></span><br><span class=\"line\">测试命令 <span class=\"built_in\">test</span> []</span><br><span class=\"line\">[ -d /etc ]  <span class=\"comment\"># echo $?  查看结果</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"if\"><a href=\"#if\" class=\"headerlink\" title=\"if\"></a>if</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">var=<span class=\"string\">'/etc/passwd'</span></span><br><span class=\"line\"><span class=\"comment\"># 接收用户输入</span></span><br><span class=\"line\"><span class=\"comment\"># read -p 'please input you file path:' var</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -f <span class=\"variable\">$var</span> ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$var</span> is regular file\"</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ -b <span class=\"variable\">$var</span>]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$var</span> is block\"</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ -d <span class=\"variable\">$var</span> ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$var</span> is direcotry\"</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ -h <span class=\"variable\">$var</span> ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$var</span> is symlink\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$var</span> is unkown\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"while\"><a href=\"#while\" class=\"headerlink\" title=\"while\"></a>while</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 不停的看系统内存状态</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> :</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    free</span><br><span class=\"line\">    sleep 0.5</span><br><span class=\"line\">    clear</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">count=1</span><br><span class=\"line\"><span class=\"keyword\">while</span> [ <span class=\"variable\">$count</span> -le 10]</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$count</span></span><br><span class=\"line\">    ((count++))</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> :</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">read</span> -p <span class=\"string\">'username'</span> name</span><br><span class=\"line\">    <span class=\"built_in\">read</span> -p <span class=\"string\">'passwd'</span> <span class=\"built_in\">pwd</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"variable\">$name</span> = <span class=\"string\">'hehe'</span> -a <span class=\"variable\">$pwd</span> = <span class=\"string\">'123'</span> ]</span><br><span class=\"line\">        <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"built_in\">echo</span> <span class=\"string\">'login successful,welcome'</span></span><br><span class=\"line\">            <span class=\"built_in\">break</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'END'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"for\"><a href=\"#for\" class=\"headerlink\" title=\"for\"></a>for</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> &#123;1..100&#125;</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$i</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p><em>？shell 并发线程</em></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检测可用ip</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> &#123;1..253&#125;</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    ping -c1 192.168.1.<span class=\"variable\">$i</span> &amp;&gt; /dev/null</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ $? -ne 0]</span><br><span class=\"line\">        <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"built_in\">echo</span> <span class=\"string\">\"192.168.1.<span class=\"variable\">$i</span>\"</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"case\"><a href=\"#case\" class=\"headerlink\" title=\"case\"></a>case</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ead -p <span class=\"string\">\"username: \"</span> -t 5 uname</span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ -z <span class=\"variable\">$uname</span> ]]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">uname=default</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$uname</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">root)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"welcome <span class=\"variable\">$uname</span>\"</span></span><br><span class=\"line\">;;</span><br><span class=\"line\">seker)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"welcome <span class=\"variable\">$uname</span>\"</span></span><br><span class=\"line\">;;</span><br><span class=\"line\">default)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"welcome <span class=\"variable\">$uname</span>\"</span></span><br><span class=\"line\">;;</span><br><span class=\"line\">*)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"no user <span class=\"variable\">$uname</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">abc</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">'aaa'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">'bbb'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">start</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">'----'</span></span><br><span class=\"line\">    res=$[1+2]</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"variable\">$res</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">start <span class=\"comment\"># 3</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"脚本接收参数\"><a href=\"#脚本接收参数\" class=\"headerlink\" title=\"脚本接收参数\"></a>脚本接收参数</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$1</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$2</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$3</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$4</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$5</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;10&#125;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#test.sh</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$0</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$1</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$2</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$3</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;11&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'$$'</span> $$</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'$*'</span> $*</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'$@'</span> <span class=\"variable\">$@</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'$#'</span> <span class=\"variable\">$#</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'$?'</span> $?</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">''</span><span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">测试：python test.sh 1 2 3 4 5 6 7 8 9 10 11</span></span><br><span class=\"line\"><span class=\"string\">输出结果：</span></span><br><span class=\"line\"><span class=\"string\">./test.sh</span></span><br><span class=\"line\"><span class=\"string\">2</span></span><br><span class=\"line\"><span class=\"string\">11</span></span><br><span class=\"line\"><span class=\"string\">$$ 14312</span></span><br><span class=\"line\"><span class=\"string\">$* 1 2 3 4 5 6 7 8 9 10 11</span></span><br><span class=\"line\"><span class=\"string\">$@ 1 2 3 4 5 6 7 8 9 10 11</span></span><br><span class=\"line\"><span class=\"string\">$# 11</span></span><br><span class=\"line\"><span class=\"string\">$? 0</span></span><br><span class=\"line\"><span class=\"string\">'</span><span class=\"string\">''</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>示例 nginx 进程自动重启</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">ps aux | grep nginx | grep -v <span class=\"string\">'grep'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ $? -ne 0]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        systemctl start nginx</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"计划任务\"><a href=\"#计划任务\" class=\"headerlink\" title=\"计划任务\"></a>计划任务</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status crond</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://www.cnblogs.com/linhaifeng/p/6602149.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/linhaifeng/p/6602149.html</a></li>\n</ul>"},{"title":"Python:消息队列Rabbitmq基本使用","date":"2017-12-18T06:24:45.000Z","_content":"\n\n为什么用Rabbitmq instead of python queue ?\n\n<!-- more -->\n\n>是因为python queue 不能跨进程 \n\n\n**队列的作用:**    \n    1. 存储消息、数据\n    2. 保证消息顺序 \n    3. 保证数据的交付\n\n```sh\n# 斐波那契数列\n1 1 2 3 5 8 13 ...\n# 启动rabbitmq，并验证启动情况 \nrabbitmq-server --detached &ps aux |grep rabbitmq\n# 以服务的方式启动\nservice rabbitmq-server start\n# 启用维护插件\nrabbitmq-plugins enable rabbitmq_management \n# 重启\nservice rabbitmq-server restart\n\n# erroe\npika.exceptions.ProbableAuthenticationError\n# 解决方法\n# 写入信息 并保存/关闭防火墙 'systemctl stop filewallf'\nvim /etc/rabbitmq/rabbitmq.config\n[{rabbit, [{loopback_users, []}]}].\n# 查看当前队列\nrabbitmqctl list_queues\n```\n\n## 基本使用实现\n### 发送端\n\n```python\nimport pika\n\n# 创建连接\nconnection = pika.BlockingConnection(pika.ConnectionParameters('10.211.55.10'))\nchannel = connection.channel()\n\n# 声明消息队列\nchannel.queue_declare(queue='hello')\n\n# 发送消息到上面声明的hello队列，\n# 其中exchange表示交换器，能精确指定消息应该发送到哪个队列，\n# routing_key设置为队列的名称，\n# body就是发送的内容，\nchannel.basic_publish(exchange='',routing_key='hello',body='Hello World!')\n\nprint('[x] Sent \"Hello World!\"')\n\n# sh命令\n# 用 rabbitmqctl list_queues 查看队列\n'''\nListing queues\nhello\t1\n'''\n```\n\n![](https://i.imgur.com/6vYEGPV.jpg)\n\n### 接收端\n\n```python\nimport pika\n\n# 创建连接\nconnection = pika.BlockingConnection(pika.ConnectionParameters('10.211.55.10'))\nchannel = connection.channel()\n\n# 声明消息队列\nchannel.queue_declare(queue='hello')\n\n# 接收消息 回调函数\ndef callbcak(ch,method,properties,body):\n    print(\"Received %r\"%(body))\n\n# 告诉rabbitmq使用callback来接收信息\nchannel.basic_consume(callbcak,queue='hello',no_ack=True)\n\n#开始接收信息，并进入阻塞状态，队列里有信息才会调用callback进行处理。按ctrl+c退出。\nchannel.start_consuming()\n\n# 终端会阻塞住\n'''\nReceived b'Hello World!'\n'''\n```\n\n## 工作队列\n### 消息不丢失\n#### 生产者\n```python\nfor i in range(5):\n    msg = ' '.join(sys.argv[1:])or 'Hello World! %s' % time.time()\n    channel.basic_publish(exchange='',\n                          routing_key='hello',\n                          body=bytes(msg,encoding='utf8'),)\n```\n#### 消费者\n- `no_ack=False` 消费者退出不消息不丢失\n\n```python\n# 修改回调函数\ndef callbcak(ch, method, properties, body):\n    print(\"Received %r\" % (body))\n    time.sleep(5)\n    print(\"[x] Done\")\n```\n\n## 消息持久化\n- 消息持久化存储,\n\n>虽然消息反馈机制，但是如果rabbitmq自身挂掉的话，那么任务还是会丢失。所以需要将任务持久化存储起来。声明持久化存储：\n\n```python\n# 原队列\nchannel.queue_declare(queue='hello', durable=True)\n```\n但是这个程序会执行错误，因为hello这个队列已经存在，并且是非持久化的，rabbitmq不允许使用不同的参数来重新定义存在的队列。重新定义一个队列\n\n```python\n# 重新定义一个队列\nchannel.queue_declare(queue='task_queue', durable=True)\n```\n在发送任务的时候，用delivery_mode=2来标记任务为持久化存储：\n\n```python\nchannel.basic_publish(exchange='',\n       routing_key=\"task_queue\",\n       body=message,\n       properties=pika.BasicProperties(\n          delivery_mode = 2, # make message persistent\n       ))\n```\n\n### 公平调度\n`prefetch_count = 1`\n\n虽然每个工作者是依次分配到任务，但是每个任务不一定一样。可能有的任务比较重，执行时间比较久；有的任务比较轻，执行时间比较短。如果能公平调度就最好了，使用basic_qos设置prefetch_count=1，使得rabbitmq不会在同一时间给工作者分配多个任务，即只有工作者完成任务之后，才会再次接收到任务。\n\n```python\nchannel.basic_qos(prefetch_count=1)\n```\n- new_task.py完整代码\n\n> 发送者/生产者\n\n```python\nimport pika\nimport sys\n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(\n    host='10.211.55.10'))\nchannel = connection.channel()\n\nchannel.queue_declare(queue='task_queue', durable=True)\n\nmessage = ' '.join(sys.argv[1:]) or \"Hello World!\"\nchannel.basic_publish(exchange='',\n                      routing_key='task_queue',\n                      body=message,\n                      properties=pika.BasicProperties(\n                          delivery_mode=2,  # make message persistent\n                      ))\nprint(\" [x] Sent %r\" % (message,))\nconnection.close()\n```\n\n- worker.py完整代码\n\n> 接受者/消费者\n\n```python\nimport pika\nimport time\n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(host='10.211.55.10'))\nchannel = connection.channel()\n\nchannel.queue_declare(queue='task_queue', durable=True)\nprint(' [*] Waiting for messages. To exit press CTRL+C')\n\n\ndef callback(ch, method, properties, body):\n    print(\" [x] Received %r\" % (body,))\n    time.sleep(6)\n    print(\" [x] Done\",ch.basic_ack(delivery_tag=method.delivery_tag))\n\n\nchannel.basic_qos(prefetch_count=1)\nchannel.basic_consume(callback,\n                      queue='task_queue')\n\nchannel.start_consuming()\n```\n\n## 广播\n广播交换机的工作原理：消息发送端先将消息发送给交换机，交换机再将消息发送到绑定的消息队列，而后每个接收端都能从各自的消息队列里接收到信息。\n\n![](https://i.imgur.com/mK7MEC5.jpg)\n\n### 消费者/接收端receive.py代码分析\n\n和最早的receive.py相比，主要是做了两个改动：\n\n- 定义交换机\n- 不使用hello队列了，随机生成一个临时队列，并绑定到交换机上\n\n\n```python\nimport pika\n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(\n    '10.211.55.10'))\nchannel = connection.channel()\n\n# 定义交换机\nchannel.exchange_declare(exchange='messages', type='fanout')\n\n# 随机生成队列，并绑定到交换机上\n# 参数'exclusive=True'表示当接收端退出时，销毁临时产生的队列，这样就不会占用资源。\nresult = channel.queue_declare(exclusive=True)\nqueue_name = result.method.queue\nchannel.queue_bind(exchange='messages', queue=queue_name)\n\n\ndef callback(ch, method, properties, body):\n    print(\" [x] Received %r\" % (body,))\n\n\nchannel.basic_consume(callback, queue=queue_name, no_ack=True)\n\nprint(' [*] Waiting for messages. To exit press CTRL+C')\nchannel.start_consuming()\n```\n执行`rabbitmqctl list_queues`\n\n``` sh\ntask_queue\t0\nhello\t5\n# 定义了交换机\namq.gen-K0M17k_3LVYO0b7m0s-K1g\t0\n```\n\n![](https://i.imgur.com/1EuVNfF.jpg)\n\n### 生产者/发送端send.py代码分析\n和最早的send.py相比，也只做了两个改动：\n\n- 定义交换机\n- 不是将消息发送到hello队列，而是发送到交换机\n\n```python\nimport pika\n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(\n    '10.211.55.10'))\nchannel = connection.channel()\n\n# 定义交换机\n# type='fanout' 表示广播的意思\nchannel.exchange_declare(exchange='messages', type='fanout')\n\n# 将消息发送到交换机\n# basic_publish方法的参数exchange被设定为相应交换机，\n# 因为是要广播出去，发送到所有队列，所以routing_key就不需要设定了。\nchannel.basic_publish(exchange='messages', routing_key='', body='Hello World!')\nprint(\" [x] Sent 'Hello World!'\")\nconnection.close()\n```\n\nexchange如果为空，表示是使用匿名的交换机，在上面交换机信息的图片中可以看到有amq.*这样的交换机，就是系统默认的交换机了。routing_key在使用匿名交换机的时候才需要指定，表示发送到哪个队列的意思。第一篇的例子演示了这个功能。\n\n打开另外一个终端，执行send.py，可以观察到receive.py接收到了消息。如果有多个终端执行receive.py，那么每个receive.py都会接收到消息。\n\n\n## 组播/路由\n\n### 生产者/send.py代码分析\n和广播相比，改动点主要在两个方面：\n\n- 设定交换机的类型（type）为direct。上一篇是设置为fanout，表示广播的意思，会将消息发送到所有接收端，这里设置为direct表示要根据设定的路由键来发送消息。\n- 发送信息时设置发送的路由键。\n\n```python\nimport pika\n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(\n    '10.211.55.10'))\nchannel = connection.channel()\n\n# 定义交换机，设置类型为direct\nchannel.exchange_declare(exchange='messages', type='direct')\n\n# 定义三个路由键\nroutings = ['warning', 'error']\n\n# 将消息依次发送到交换机，并设置路由键\nfor routing in routings:\n    message = '%s message.' % routing\n    channel.basic_publish(exchange='messages',\n                          routing_key=routing,\n                          body=message)\n    print(message)\n\nconnection.close()\n```\n\n### 消费者/receive.py代码分析\n和广播相比，改动点主要在三个方面：\n\n- 设定交换机的类型（type）为direct。\n- 增加命令行获取参数功能，参数即为路由键。\n- 将队列绑定到交换机上时，设定路由键。\n\n\n```python\nimport pika, sys\n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(\n    '10.211.55.10'))\nchannel = connection.channel()\n\n# 定义交换机，设置类型为direct\nchannel.exchange_declare(exchange='messages', type='direct')\n\n# 从命令行获取路由键参数，如果没有，则设置为info\nroutings = sys.argv[1:]\nif not routings:\n    routings = ['info']\n\n# 生成临时队列，并绑定到交换机上，设置路由键\nresult = channel.queue_declare(exclusive=True)\nqueue_name = result.method.queue\nfor routing in routings:\n    channel.queue_bind(exchange='messages',\n                       queue=queue_name,\n                       routing_key=routing)\n\n\ndef callback(ch, method, properties, body):\n    print(\" [x] Received %r\" % (body,))\n\n\nchannel.basic_consume(callback, queue=queue_name, no_ack=True)\n\nprint(' [*] Waiting for messages. To exit press CTRL+C')\nchannel.start_consuming()\n```\n\n打开两个终端，一个运行代码python receive.py info warning，表示只接收info和warning的消息。另外一个终端运行send.py，可以观察到接收终端只接收到了info和warning的消息。如果打开多个终端运行receive.py，并传入不同的路由键参数，可以看到更明显的效果。\n\n当接收端正在运行时，可以使用rabbitmqctl list_bindings来查看绑定情况。\n\n## 按规则发送/正则\n上面路由键/组播的功能，通过设置路由键，可以将消息发送到相应的队列，这里的路由键是要完全匹配，比如info消息的只能发到路由键为info的消息队列。\n\n路由键模糊匹配，就是可以使用正则表达式，和常用的正则表示式不同，这里的话“#”表示所有、全部的意思；“*”只匹配到一个词。看完示例就能明白了。\n\n### send.py代码分析\n因为要进行路由键模糊匹配，所以交换机的类型要设置为topic，设置为topic，就可以使用#，*的匹配符号了。\n\n```python\nimport pika\n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(\n    '10.211.55.10'))\nchannel = connection.channel()\n\n# 定义交换机，设置类型为topic\nchannel.exchange_declare(exchange='messages', type='topic')\n\n# 定义路由键\n# 四种类型的消息\nroutings = ['happy.work', 'happy.life', 'sad.work', 'sad.life']\n\n# 将消息依次发送到交换机，并设定路由键\nfor routing in routings:\n    message = '%s message.' % routing\n    channel.basic_publish(exchange='messages',\n                          routing_key=routing,\n                          body=message)\n    print(message)\n\nconnection.close()\n```\n\n### receive.py代码分析\n类型要设定为topic就可以了。从命令行接收参数的功能稍微调整了一下，没有参数时报错退出。\n\n\n```python\nimport pika, sys\n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(\n    '10.211.55.10'))\nchannel = connection.channel()\n\n# 定义交换机，设置类型为topic\nchannel.exchange_declare(exchange='messages', type='topic')\n\n# 从命令行获取路由参数，如果没有，则报错退出\nroutings = sys.argv[1:]\nif not routings:\n    # print(>> sys.stderr, \"Usage: %s [routing_key]...\" % (sys.argv[0],))\n    print(sys.stderr, \"Usage: %s [routing_key]...\" % (sys.argv[0],))\n    exit()\n\n# 生成临时队列，并绑定到交换机上，设置路由键\nresult = channel.queue_declare(exclusive=True)\nqueue_name = result.method.queue\nfor routing in routings:\n    channel.queue_bind(exchange='messages',\n                       queue=queue_name,\n                       routing_key=routing)\n\n\ndef callback(ch, method, properties, body):\n    print(\" [x] Received %r\" % (body,))\n\n\nchannel.basic_consume(callback, queue=queue_name, no_ack=True)\n\nprint(' [*] Waiting for messages. To exit press CTRL+C')\nchannel.start_consuming()\n```\n\n### 实验运行\n打开多个终端,分别传入不同的规则,观察结果\n如:\n\n```sh\npython3 receive_topic.py \"#\"\npython3 receive_topic.py \"happy.*\"\npython3 receive_topic.py \"*.work\"\n```\n\n### 难点\n1、发送信息时，如果不设置路由键，那么路由键设置为”*”的接收端是否能接收到消息？\n\n>发送信息时，如果不设置路由键，默认是表示广播出去，理论上所有接收端都可以收到消息，但是笔者试了下，路由键设置为\"*\"的接收端收不到任何消息。\n\n>只有发送消息时，设置路由键为一个词，路由键设置为\"*\"的接收端才能收到消息。在这里，每个词使用\".\"符号分开的。\n\n2、发送消息时，如果路由键设置为”..”，那么路由键设置为”#.*”的接收端是否能接收到消息？如果发送消息时，路由键设置为一个词呢？\n>两种情况，笔者都测试过了，可以的。\n\n3、”a.*.#” 和”a.#”的区别\n>- \"a.#\"只要字符串开头的一个词是a就可以了，比如a、a.haha、a.haha.haha。而这样的词是不行的，如abs、abc、abc.haha。\n\n>- \"a.*.#\"必须要满足a.*的字符串才可以，比如a.、a.haha、a.haha.haha。而这样的词是不行的，如a。\n\n## 远程结果返回RPC\nRemote Producre Call\n处理方法描述：\n>发送端在发送信息前，产生一个接收消息的临时队列，该队列用来接收返回的结果。其实在这里接收端、发送端的概念已经比较模糊了，因为发送端也同样要接收消息，接收端同样也要发送消息，所以这里笔者使用另外的示例来演示这一过程。\n\n### compute.py代码分析\n\n```python\nimport pika\n\n# 连接rabbitmq服务器\nconnection = pika.BlockingConnection(pika.ConnectionParameters(\n    host='10.211.55.10'))\nchannel = connection.channel()\n\n# 定义队列\nchannel.queue_declare(queue='compute_queue')\nprint(' [*] Waiting for n')\n\n\n# 将n值加1\ndef increase(n):\n    return n + 1\n\n\n# 定义接收到消息的处理方法\ndef request(ch, method, properties, body):\n    print(\" [.] increase(%s)\" % (body,))\n\n    response = increase(int(body))\n\n    # 将计算结果发送回控制中心\n    ch.basic_publish(exchange='',\n                     routing_key=properties.reply_to,\n                     body=str(response))\n    ch.basic_ack(delivery_tag=method.delivery_tag)\n\n\nchannel.basic_qos(prefetch_count=1)\nchannel.basic_consume(request, queue='compute_queue')\n\nchannel.start_consuming()\n```\n\n### center.py代码分析\n\n```python\nimport pika\n\n\nclass Center(object):\n    def __init__(self):\n        self.connection = pika.BlockingConnection(pika.ConnectionParameters(\n            host='10.211.55.10'))\n\n        self.channel = self.connection.channel()\n\n        # 定义接收返回消息的队列\n        result = self.channel.queue_declare(exclusive=True)\n        self.callback_queue = result.method.queue\n\n        self.channel.basic_consume(self.on_response,\n                                   no_ack=True,\n                                   queue=self.callback_queue)\n\n    # 定义接收到返回消息的处理方法\n    def on_response(self, ch, method, props, body):\n        self.response = body\n\n    def request(self, n):\n        self.response = None\n        # 发送计算请求，并声明返回队列\n        self.channel.basic_publish(exchange='',\n                                   routing_key='compute_queue',\n                                   properties=pika.BasicProperties(\n                                       reply_to=self.callback_queue,\n                                   ),\n                                   body=str(n))\n        # 接收返回的数据\n        while self.response is None:\n            self.connection.process_data_events()\n        return int(self.response)\n\n\ncenter = Center()\n\nprint(\" [x] Requesting increase(30)\")\nresponse = center.request(30)\nprint(\" [.] Got %r\" % (response,))\n```\n上面代码定义了接收返回数据的队列和处理方法，并且在发送请求的时候将该队列赋值给`reply_to`，在计算节点代码中就是通过这个参数来获取返回队列的。\n\n\n## 相互关联编号correlation id\n`correlation id`运行原理：\n>控制中心发送计算请求时设置correlation id，而后计算节点将计算结果，连同接收到的correlation id一起返回，这样控制中心就能通过correlation id来标识请求。其实correlation id也可以理解为请求的唯一标识码。\n\n示例内容：\n>控制中心开启多个线程，每个线程都发起一次计算请求，通过correlation id，每个线程都能准确收到相应的计算结果。\n\n### compute.py代码分析\n和上面相比，只需修改一个地方：\n>将计算结果发送回控制中心时，增加参数correlation_id的设定，该参数的值其实是从控制中心发送过来的，这里只是再次发送回去。代码如下：\n\n```python\nimport pika\n\n# 连接rabbitmq服务器\nconnection = pika.BlockingConnection(pika.ConnectionParameters(\n    host='10.211.55.10'))\nchannel = connection.channel()\n\n# 定义队列\nchannel.queue_declare(queue='compute_queue')\nprint(' [*] Waiting for n')\n\n\n# 将n值加1\ndef increase(n):\n    return n + 1\n\n\n# 定义接收到消息的处理方法\ndef request(ch, method, props, body):\n    print(\" [.] increase(%s)\" % (body,))\n\n    response = increase(int(body))\n\n    # 将计算结果发送回控制中心，增加correlation_id的设定\n    ch.basic_publish(exchange='',\n                     routing_key=props.reply_to,\n                     properties=pika.BasicProperties(correlation_id= \\\n                                                         props.correlation_id),\n                     body=str(response))\n    ch.basic_ack(delivery_tag=method.delivery_tag)\n\n\nchannel.basic_qos(prefetch_count=1)\nchannel.basic_consume(request, queue='compute_queue')\n\nchannel.start_consuming()\n```\n\n### center.py代码分析\n控制中心代码稍微复杂些，其中比较关键的有三个地方：\n\n- 使用python的uuid来产生唯一的correlation_id。\n- 发送计算请求时，设定参数correlation_id。\n- 定义一个字典来保存返回的数据，并且键值为相应线程产生的correlation_id。\n\n```python\nimport pika, threading, uuid\n\n\n# 自定义线程类，继承threading.Thread\nclass MyThread(threading.Thread):\n    def __init__(self, func, num):\n        super(MyThread, self).__init__()\n        self.func = func\n        self.num = num\n\n    def run(self):\n        print(\" [x] Requesting increase(%d)\" % self.num)\n        response = self.func(self.num)\n        print(\" [.] increase(%d)=%d\" % (self.num, response))\n\n\n# 控制中心类\nclass Center(object):\n    def __init__(self):\n        self.connection = pika.BlockingConnection(pika.ConnectionParameters(\n            host='10.211.55.10'))\n\n        self.channel = self.connection.channel()\n\n        # 定义接收返回消息的队列\n        result = self.channel.queue_declare(exclusive=True)\n        self.callback_queue = result.method.queue\n\n        self.channel.basic_consume(self.on_response,\n                                   no_ack=True,\n                                   queue=self.callback_queue)\n\n        # 返回的结果都会存储在该字典里\n        self.response = {}\n\n    # 定义接收到返回消息的处理方法\n    def on_response(self, ch, method, props, body):\n        self.response[props.correlation_id] = body\n\n    def request(self, n):\n        corr_id = str(uuid.uuid4())     #  产生 id\n        self.response[corr_id] = None\n\n        # 发送计算请求，并设定返回队列和correlation_id\n        self.channel.basic_publish(exchange='',\n                                   routing_key='compute_queue',\n                                   properties=pika.BasicProperties(\n                                       reply_to=self.callback_queue,\n                                       correlation_id=corr_id,\n                                   ),\n                                   body=str(n))\n        # 接收返回的数据\n        while self.response[corr_id] is None:\n            self.connection.process_data_events()\n        return int(self.response[corr_id])\n\n\ncenter = Center()\n# 发起5次计算请求\nnums = [10, 20, 30, 40, 50]\nthreads = []\nfor num in nums:\n    threads.append(MyThread(center.request, num))\nfor thread in threads:\n    thread.start()\nfor thread in threads:\n    thread.join()\n```\n\n\n## 参考资料\n<http://blog.csdn.net/chenjiebin/article/details/8253433>\n\n","source":"_posts/rabbitmq-apply.md","raw":"---\ntitle: Python:消息队列Rabbitmq基本使用\ndate: 2017-12-18 14:24:45\ntags: rabbitmq\n---\n\n\n为什么用Rabbitmq instead of python queue ?\n\n<!-- more -->\n\n>是因为python queue 不能跨进程 \n\n\n**队列的作用:**    \n    1. 存储消息、数据\n    2. 保证消息顺序 \n    3. 保证数据的交付\n\n```sh\n# 斐波那契数列\n1 1 2 3 5 8 13 ...\n# 启动rabbitmq，并验证启动情况 \nrabbitmq-server --detached &ps aux |grep rabbitmq\n# 以服务的方式启动\nservice rabbitmq-server start\n# 启用维护插件\nrabbitmq-plugins enable rabbitmq_management \n# 重启\nservice rabbitmq-server restart\n\n# erroe\npika.exceptions.ProbableAuthenticationError\n# 解决方法\n# 写入信息 并保存/关闭防火墙 'systemctl stop filewallf'\nvim /etc/rabbitmq/rabbitmq.config\n[{rabbit, [{loopback_users, []}]}].\n# 查看当前队列\nrabbitmqctl list_queues\n```\n\n## 基本使用实现\n### 发送端\n\n```python\nimport pika\n\n# 创建连接\nconnection = pika.BlockingConnection(pika.ConnectionParameters('10.211.55.10'))\nchannel = connection.channel()\n\n# 声明消息队列\nchannel.queue_declare(queue='hello')\n\n# 发送消息到上面声明的hello队列，\n# 其中exchange表示交换器，能精确指定消息应该发送到哪个队列，\n# routing_key设置为队列的名称，\n# body就是发送的内容，\nchannel.basic_publish(exchange='',routing_key='hello',body='Hello World!')\n\nprint('[x] Sent \"Hello World!\"')\n\n# sh命令\n# 用 rabbitmqctl list_queues 查看队列\n'''\nListing queues\nhello\t1\n'''\n```\n\n![](https://i.imgur.com/6vYEGPV.jpg)\n\n### 接收端\n\n```python\nimport pika\n\n# 创建连接\nconnection = pika.BlockingConnection(pika.ConnectionParameters('10.211.55.10'))\nchannel = connection.channel()\n\n# 声明消息队列\nchannel.queue_declare(queue='hello')\n\n# 接收消息 回调函数\ndef callbcak(ch,method,properties,body):\n    print(\"Received %r\"%(body))\n\n# 告诉rabbitmq使用callback来接收信息\nchannel.basic_consume(callbcak,queue='hello',no_ack=True)\n\n#开始接收信息，并进入阻塞状态，队列里有信息才会调用callback进行处理。按ctrl+c退出。\nchannel.start_consuming()\n\n# 终端会阻塞住\n'''\nReceived b'Hello World!'\n'''\n```\n\n## 工作队列\n### 消息不丢失\n#### 生产者\n```python\nfor i in range(5):\n    msg = ' '.join(sys.argv[1:])or 'Hello World! %s' % time.time()\n    channel.basic_publish(exchange='',\n                          routing_key='hello',\n                          body=bytes(msg,encoding='utf8'),)\n```\n#### 消费者\n- `no_ack=False` 消费者退出不消息不丢失\n\n```python\n# 修改回调函数\ndef callbcak(ch, method, properties, body):\n    print(\"Received %r\" % (body))\n    time.sleep(5)\n    print(\"[x] Done\")\n```\n\n## 消息持久化\n- 消息持久化存储,\n\n>虽然消息反馈机制，但是如果rabbitmq自身挂掉的话，那么任务还是会丢失。所以需要将任务持久化存储起来。声明持久化存储：\n\n```python\n# 原队列\nchannel.queue_declare(queue='hello', durable=True)\n```\n但是这个程序会执行错误，因为hello这个队列已经存在，并且是非持久化的，rabbitmq不允许使用不同的参数来重新定义存在的队列。重新定义一个队列\n\n```python\n# 重新定义一个队列\nchannel.queue_declare(queue='task_queue', durable=True)\n```\n在发送任务的时候，用delivery_mode=2来标记任务为持久化存储：\n\n```python\nchannel.basic_publish(exchange='',\n       routing_key=\"task_queue\",\n       body=message,\n       properties=pika.BasicProperties(\n          delivery_mode = 2, # make message persistent\n       ))\n```\n\n### 公平调度\n`prefetch_count = 1`\n\n虽然每个工作者是依次分配到任务，但是每个任务不一定一样。可能有的任务比较重，执行时间比较久；有的任务比较轻，执行时间比较短。如果能公平调度就最好了，使用basic_qos设置prefetch_count=1，使得rabbitmq不会在同一时间给工作者分配多个任务，即只有工作者完成任务之后，才会再次接收到任务。\n\n```python\nchannel.basic_qos(prefetch_count=1)\n```\n- new_task.py完整代码\n\n> 发送者/生产者\n\n```python\nimport pika\nimport sys\n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(\n    host='10.211.55.10'))\nchannel = connection.channel()\n\nchannel.queue_declare(queue='task_queue', durable=True)\n\nmessage = ' '.join(sys.argv[1:]) or \"Hello World!\"\nchannel.basic_publish(exchange='',\n                      routing_key='task_queue',\n                      body=message,\n                      properties=pika.BasicProperties(\n                          delivery_mode=2,  # make message persistent\n                      ))\nprint(\" [x] Sent %r\" % (message,))\nconnection.close()\n```\n\n- worker.py完整代码\n\n> 接受者/消费者\n\n```python\nimport pika\nimport time\n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(host='10.211.55.10'))\nchannel = connection.channel()\n\nchannel.queue_declare(queue='task_queue', durable=True)\nprint(' [*] Waiting for messages. To exit press CTRL+C')\n\n\ndef callback(ch, method, properties, body):\n    print(\" [x] Received %r\" % (body,))\n    time.sleep(6)\n    print(\" [x] Done\",ch.basic_ack(delivery_tag=method.delivery_tag))\n\n\nchannel.basic_qos(prefetch_count=1)\nchannel.basic_consume(callback,\n                      queue='task_queue')\n\nchannel.start_consuming()\n```\n\n## 广播\n广播交换机的工作原理：消息发送端先将消息发送给交换机，交换机再将消息发送到绑定的消息队列，而后每个接收端都能从各自的消息队列里接收到信息。\n\n![](https://i.imgur.com/mK7MEC5.jpg)\n\n### 消费者/接收端receive.py代码分析\n\n和最早的receive.py相比，主要是做了两个改动：\n\n- 定义交换机\n- 不使用hello队列了，随机生成一个临时队列，并绑定到交换机上\n\n\n```python\nimport pika\n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(\n    '10.211.55.10'))\nchannel = connection.channel()\n\n# 定义交换机\nchannel.exchange_declare(exchange='messages', type='fanout')\n\n# 随机生成队列，并绑定到交换机上\n# 参数'exclusive=True'表示当接收端退出时，销毁临时产生的队列，这样就不会占用资源。\nresult = channel.queue_declare(exclusive=True)\nqueue_name = result.method.queue\nchannel.queue_bind(exchange='messages', queue=queue_name)\n\n\ndef callback(ch, method, properties, body):\n    print(\" [x] Received %r\" % (body,))\n\n\nchannel.basic_consume(callback, queue=queue_name, no_ack=True)\n\nprint(' [*] Waiting for messages. To exit press CTRL+C')\nchannel.start_consuming()\n```\n执行`rabbitmqctl list_queues`\n\n``` sh\ntask_queue\t0\nhello\t5\n# 定义了交换机\namq.gen-K0M17k_3LVYO0b7m0s-K1g\t0\n```\n\n![](https://i.imgur.com/1EuVNfF.jpg)\n\n### 生产者/发送端send.py代码分析\n和最早的send.py相比，也只做了两个改动：\n\n- 定义交换机\n- 不是将消息发送到hello队列，而是发送到交换机\n\n```python\nimport pika\n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(\n    '10.211.55.10'))\nchannel = connection.channel()\n\n# 定义交换机\n# type='fanout' 表示广播的意思\nchannel.exchange_declare(exchange='messages', type='fanout')\n\n# 将消息发送到交换机\n# basic_publish方法的参数exchange被设定为相应交换机，\n# 因为是要广播出去，发送到所有队列，所以routing_key就不需要设定了。\nchannel.basic_publish(exchange='messages', routing_key='', body='Hello World!')\nprint(\" [x] Sent 'Hello World!'\")\nconnection.close()\n```\n\nexchange如果为空，表示是使用匿名的交换机，在上面交换机信息的图片中可以看到有amq.*这样的交换机，就是系统默认的交换机了。routing_key在使用匿名交换机的时候才需要指定，表示发送到哪个队列的意思。第一篇的例子演示了这个功能。\n\n打开另外一个终端，执行send.py，可以观察到receive.py接收到了消息。如果有多个终端执行receive.py，那么每个receive.py都会接收到消息。\n\n\n## 组播/路由\n\n### 生产者/send.py代码分析\n和广播相比，改动点主要在两个方面：\n\n- 设定交换机的类型（type）为direct。上一篇是设置为fanout，表示广播的意思，会将消息发送到所有接收端，这里设置为direct表示要根据设定的路由键来发送消息。\n- 发送信息时设置发送的路由键。\n\n```python\nimport pika\n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(\n    '10.211.55.10'))\nchannel = connection.channel()\n\n# 定义交换机，设置类型为direct\nchannel.exchange_declare(exchange='messages', type='direct')\n\n# 定义三个路由键\nroutings = ['warning', 'error']\n\n# 将消息依次发送到交换机，并设置路由键\nfor routing in routings:\n    message = '%s message.' % routing\n    channel.basic_publish(exchange='messages',\n                          routing_key=routing,\n                          body=message)\n    print(message)\n\nconnection.close()\n```\n\n### 消费者/receive.py代码分析\n和广播相比，改动点主要在三个方面：\n\n- 设定交换机的类型（type）为direct。\n- 增加命令行获取参数功能，参数即为路由键。\n- 将队列绑定到交换机上时，设定路由键。\n\n\n```python\nimport pika, sys\n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(\n    '10.211.55.10'))\nchannel = connection.channel()\n\n# 定义交换机，设置类型为direct\nchannel.exchange_declare(exchange='messages', type='direct')\n\n# 从命令行获取路由键参数，如果没有，则设置为info\nroutings = sys.argv[1:]\nif not routings:\n    routings = ['info']\n\n# 生成临时队列，并绑定到交换机上，设置路由键\nresult = channel.queue_declare(exclusive=True)\nqueue_name = result.method.queue\nfor routing in routings:\n    channel.queue_bind(exchange='messages',\n                       queue=queue_name,\n                       routing_key=routing)\n\n\ndef callback(ch, method, properties, body):\n    print(\" [x] Received %r\" % (body,))\n\n\nchannel.basic_consume(callback, queue=queue_name, no_ack=True)\n\nprint(' [*] Waiting for messages. To exit press CTRL+C')\nchannel.start_consuming()\n```\n\n打开两个终端，一个运行代码python receive.py info warning，表示只接收info和warning的消息。另外一个终端运行send.py，可以观察到接收终端只接收到了info和warning的消息。如果打开多个终端运行receive.py，并传入不同的路由键参数，可以看到更明显的效果。\n\n当接收端正在运行时，可以使用rabbitmqctl list_bindings来查看绑定情况。\n\n## 按规则发送/正则\n上面路由键/组播的功能，通过设置路由键，可以将消息发送到相应的队列，这里的路由键是要完全匹配，比如info消息的只能发到路由键为info的消息队列。\n\n路由键模糊匹配，就是可以使用正则表达式，和常用的正则表示式不同，这里的话“#”表示所有、全部的意思；“*”只匹配到一个词。看完示例就能明白了。\n\n### send.py代码分析\n因为要进行路由键模糊匹配，所以交换机的类型要设置为topic，设置为topic，就可以使用#，*的匹配符号了。\n\n```python\nimport pika\n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(\n    '10.211.55.10'))\nchannel = connection.channel()\n\n# 定义交换机，设置类型为topic\nchannel.exchange_declare(exchange='messages', type='topic')\n\n# 定义路由键\n# 四种类型的消息\nroutings = ['happy.work', 'happy.life', 'sad.work', 'sad.life']\n\n# 将消息依次发送到交换机，并设定路由键\nfor routing in routings:\n    message = '%s message.' % routing\n    channel.basic_publish(exchange='messages',\n                          routing_key=routing,\n                          body=message)\n    print(message)\n\nconnection.close()\n```\n\n### receive.py代码分析\n类型要设定为topic就可以了。从命令行接收参数的功能稍微调整了一下，没有参数时报错退出。\n\n\n```python\nimport pika, sys\n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(\n    '10.211.55.10'))\nchannel = connection.channel()\n\n# 定义交换机，设置类型为topic\nchannel.exchange_declare(exchange='messages', type='topic')\n\n# 从命令行获取路由参数，如果没有，则报错退出\nroutings = sys.argv[1:]\nif not routings:\n    # print(>> sys.stderr, \"Usage: %s [routing_key]...\" % (sys.argv[0],))\n    print(sys.stderr, \"Usage: %s [routing_key]...\" % (sys.argv[0],))\n    exit()\n\n# 生成临时队列，并绑定到交换机上，设置路由键\nresult = channel.queue_declare(exclusive=True)\nqueue_name = result.method.queue\nfor routing in routings:\n    channel.queue_bind(exchange='messages',\n                       queue=queue_name,\n                       routing_key=routing)\n\n\ndef callback(ch, method, properties, body):\n    print(\" [x] Received %r\" % (body,))\n\n\nchannel.basic_consume(callback, queue=queue_name, no_ack=True)\n\nprint(' [*] Waiting for messages. To exit press CTRL+C')\nchannel.start_consuming()\n```\n\n### 实验运行\n打开多个终端,分别传入不同的规则,观察结果\n如:\n\n```sh\npython3 receive_topic.py \"#\"\npython3 receive_topic.py \"happy.*\"\npython3 receive_topic.py \"*.work\"\n```\n\n### 难点\n1、发送信息时，如果不设置路由键，那么路由键设置为”*”的接收端是否能接收到消息？\n\n>发送信息时，如果不设置路由键，默认是表示广播出去，理论上所有接收端都可以收到消息，但是笔者试了下，路由键设置为\"*\"的接收端收不到任何消息。\n\n>只有发送消息时，设置路由键为一个词，路由键设置为\"*\"的接收端才能收到消息。在这里，每个词使用\".\"符号分开的。\n\n2、发送消息时，如果路由键设置为”..”，那么路由键设置为”#.*”的接收端是否能接收到消息？如果发送消息时，路由键设置为一个词呢？\n>两种情况，笔者都测试过了，可以的。\n\n3、”a.*.#” 和”a.#”的区别\n>- \"a.#\"只要字符串开头的一个词是a就可以了，比如a、a.haha、a.haha.haha。而这样的词是不行的，如abs、abc、abc.haha。\n\n>- \"a.*.#\"必须要满足a.*的字符串才可以，比如a.、a.haha、a.haha.haha。而这样的词是不行的，如a。\n\n## 远程结果返回RPC\nRemote Producre Call\n处理方法描述：\n>发送端在发送信息前，产生一个接收消息的临时队列，该队列用来接收返回的结果。其实在这里接收端、发送端的概念已经比较模糊了，因为发送端也同样要接收消息，接收端同样也要发送消息，所以这里笔者使用另外的示例来演示这一过程。\n\n### compute.py代码分析\n\n```python\nimport pika\n\n# 连接rabbitmq服务器\nconnection = pika.BlockingConnection(pika.ConnectionParameters(\n    host='10.211.55.10'))\nchannel = connection.channel()\n\n# 定义队列\nchannel.queue_declare(queue='compute_queue')\nprint(' [*] Waiting for n')\n\n\n# 将n值加1\ndef increase(n):\n    return n + 1\n\n\n# 定义接收到消息的处理方法\ndef request(ch, method, properties, body):\n    print(\" [.] increase(%s)\" % (body,))\n\n    response = increase(int(body))\n\n    # 将计算结果发送回控制中心\n    ch.basic_publish(exchange='',\n                     routing_key=properties.reply_to,\n                     body=str(response))\n    ch.basic_ack(delivery_tag=method.delivery_tag)\n\n\nchannel.basic_qos(prefetch_count=1)\nchannel.basic_consume(request, queue='compute_queue')\n\nchannel.start_consuming()\n```\n\n### center.py代码分析\n\n```python\nimport pika\n\n\nclass Center(object):\n    def __init__(self):\n        self.connection = pika.BlockingConnection(pika.ConnectionParameters(\n            host='10.211.55.10'))\n\n        self.channel = self.connection.channel()\n\n        # 定义接收返回消息的队列\n        result = self.channel.queue_declare(exclusive=True)\n        self.callback_queue = result.method.queue\n\n        self.channel.basic_consume(self.on_response,\n                                   no_ack=True,\n                                   queue=self.callback_queue)\n\n    # 定义接收到返回消息的处理方法\n    def on_response(self, ch, method, props, body):\n        self.response = body\n\n    def request(self, n):\n        self.response = None\n        # 发送计算请求，并声明返回队列\n        self.channel.basic_publish(exchange='',\n                                   routing_key='compute_queue',\n                                   properties=pika.BasicProperties(\n                                       reply_to=self.callback_queue,\n                                   ),\n                                   body=str(n))\n        # 接收返回的数据\n        while self.response is None:\n            self.connection.process_data_events()\n        return int(self.response)\n\n\ncenter = Center()\n\nprint(\" [x] Requesting increase(30)\")\nresponse = center.request(30)\nprint(\" [.] Got %r\" % (response,))\n```\n上面代码定义了接收返回数据的队列和处理方法，并且在发送请求的时候将该队列赋值给`reply_to`，在计算节点代码中就是通过这个参数来获取返回队列的。\n\n\n## 相互关联编号correlation id\n`correlation id`运行原理：\n>控制中心发送计算请求时设置correlation id，而后计算节点将计算结果，连同接收到的correlation id一起返回，这样控制中心就能通过correlation id来标识请求。其实correlation id也可以理解为请求的唯一标识码。\n\n示例内容：\n>控制中心开启多个线程，每个线程都发起一次计算请求，通过correlation id，每个线程都能准确收到相应的计算结果。\n\n### compute.py代码分析\n和上面相比，只需修改一个地方：\n>将计算结果发送回控制中心时，增加参数correlation_id的设定，该参数的值其实是从控制中心发送过来的，这里只是再次发送回去。代码如下：\n\n```python\nimport pika\n\n# 连接rabbitmq服务器\nconnection = pika.BlockingConnection(pika.ConnectionParameters(\n    host='10.211.55.10'))\nchannel = connection.channel()\n\n# 定义队列\nchannel.queue_declare(queue='compute_queue')\nprint(' [*] Waiting for n')\n\n\n# 将n值加1\ndef increase(n):\n    return n + 1\n\n\n# 定义接收到消息的处理方法\ndef request(ch, method, props, body):\n    print(\" [.] increase(%s)\" % (body,))\n\n    response = increase(int(body))\n\n    # 将计算结果发送回控制中心，增加correlation_id的设定\n    ch.basic_publish(exchange='',\n                     routing_key=props.reply_to,\n                     properties=pika.BasicProperties(correlation_id= \\\n                                                         props.correlation_id),\n                     body=str(response))\n    ch.basic_ack(delivery_tag=method.delivery_tag)\n\n\nchannel.basic_qos(prefetch_count=1)\nchannel.basic_consume(request, queue='compute_queue')\n\nchannel.start_consuming()\n```\n\n### center.py代码分析\n控制中心代码稍微复杂些，其中比较关键的有三个地方：\n\n- 使用python的uuid来产生唯一的correlation_id。\n- 发送计算请求时，设定参数correlation_id。\n- 定义一个字典来保存返回的数据，并且键值为相应线程产生的correlation_id。\n\n```python\nimport pika, threading, uuid\n\n\n# 自定义线程类，继承threading.Thread\nclass MyThread(threading.Thread):\n    def __init__(self, func, num):\n        super(MyThread, self).__init__()\n        self.func = func\n        self.num = num\n\n    def run(self):\n        print(\" [x] Requesting increase(%d)\" % self.num)\n        response = self.func(self.num)\n        print(\" [.] increase(%d)=%d\" % (self.num, response))\n\n\n# 控制中心类\nclass Center(object):\n    def __init__(self):\n        self.connection = pika.BlockingConnection(pika.ConnectionParameters(\n            host='10.211.55.10'))\n\n        self.channel = self.connection.channel()\n\n        # 定义接收返回消息的队列\n        result = self.channel.queue_declare(exclusive=True)\n        self.callback_queue = result.method.queue\n\n        self.channel.basic_consume(self.on_response,\n                                   no_ack=True,\n                                   queue=self.callback_queue)\n\n        # 返回的结果都会存储在该字典里\n        self.response = {}\n\n    # 定义接收到返回消息的处理方法\n    def on_response(self, ch, method, props, body):\n        self.response[props.correlation_id] = body\n\n    def request(self, n):\n        corr_id = str(uuid.uuid4())     #  产生 id\n        self.response[corr_id] = None\n\n        # 发送计算请求，并设定返回队列和correlation_id\n        self.channel.basic_publish(exchange='',\n                                   routing_key='compute_queue',\n                                   properties=pika.BasicProperties(\n                                       reply_to=self.callback_queue,\n                                       correlation_id=corr_id,\n                                   ),\n                                   body=str(n))\n        # 接收返回的数据\n        while self.response[corr_id] is None:\n            self.connection.process_data_events()\n        return int(self.response[corr_id])\n\n\ncenter = Center()\n# 发起5次计算请求\nnums = [10, 20, 30, 40, 50]\nthreads = []\nfor num in nums:\n    threads.append(MyThread(center.request, num))\nfor thread in threads:\n    thread.start()\nfor thread in threads:\n    thread.join()\n```\n\n\n## 参考资料\n<http://blog.csdn.net/chenjiebin/article/details/8253433>\n\n","slug":"rabbitmq-apply","published":1,"updated":"2018-04-01T14:19:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfgx5oxi001rmxgogz7tc5qw","content":"<p>为什么用Rabbitmq instead of python queue ?</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>是因为python queue 不能跨进程 </p>\n</blockquote>\n<p><strong>队列的作用:</strong>    </p>\n<pre><code>1. 存储消息、数据\n2. 保证消息顺序 \n3. 保证数据的交付\n</code></pre><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 斐波那契数列</span></span><br><span class=\"line\">1 1 2 3 5 8 13 ...</span><br><span class=\"line\"><span class=\"comment\"># 启动rabbitmq，并验证启动情况 </span></span><br><span class=\"line\">rabbitmq-server --detached &amp;ps aux |grep rabbitmq</span><br><span class=\"line\"><span class=\"comment\"># 以服务的方式启动</span></span><br><span class=\"line\">service rabbitmq-server start</span><br><span class=\"line\"><span class=\"comment\"># 启用维护插件</span></span><br><span class=\"line\">rabbitmq-plugins <span class=\"built_in\">enable</span> rabbitmq_management </span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">service rabbitmq-server restart</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># erroe</span></span><br><span class=\"line\">pika.exceptions.ProbableAuthenticationError</span><br><span class=\"line\"><span class=\"comment\"># 解决方法</span></span><br><span class=\"line\"><span class=\"comment\"># 写入信息 并保存/关闭防火墙 'systemctl stop filewallf'</span></span><br><span class=\"line\">vim /etc/rabbitmq/rabbitmq.config</span><br><span class=\"line\">[&#123;rabbit, [&#123;loopback_users, []&#125;]&#125;].</span><br><span class=\"line\"><span class=\"comment\"># 查看当前队列</span></span><br><span class=\"line\">rabbitmqctl list_queues</span><br></pre></td></tr></table></figure>\n<h2 id=\"基本使用实现\"><a href=\"#基本使用实现\" class=\"headerlink\" title=\"基本使用实现\"></a>基本使用实现</h2><h3 id=\"发送端\"><a href=\"#发送端\" class=\"headerlink\" title=\"发送端\"></a>发送端</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建连接</span></span><br><span class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(<span class=\"string\">'10.211.55.10'</span>))</span><br><span class=\"line\">channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 声明消息队列</span></span><br><span class=\"line\">channel.queue_declare(queue=<span class=\"string\">'hello'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发送消息到上面声明的hello队列，</span></span><br><span class=\"line\"><span class=\"comment\"># 其中exchange表示交换器，能精确指定消息应该发送到哪个队列，</span></span><br><span class=\"line\"><span class=\"comment\"># routing_key设置为队列的名称，</span></span><br><span class=\"line\"><span class=\"comment\"># body就是发送的内容，</span></span><br><span class=\"line\">channel.basic_publish(exchange=<span class=\"string\">''</span>,routing_key=<span class=\"string\">'hello'</span>,body=<span class=\"string\">'Hello World!'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">'[x] Sent \"Hello World!\"'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># sh命令</span></span><br><span class=\"line\"><span class=\"comment\"># 用 rabbitmqctl list_queues 查看队列</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Listing queues</span></span><br><span class=\"line\"><span class=\"string\">hello\t1</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/6vYEGPV.jpg\" alt=\"\"></p>\n<h3 id=\"接收端\"><a href=\"#接收端\" class=\"headerlink\" title=\"接收端\"></a>接收端</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建连接</span></span><br><span class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(<span class=\"string\">'10.211.55.10'</span>))</span><br><span class=\"line\">channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 声明消息队列</span></span><br><span class=\"line\">channel.queue_declare(queue=<span class=\"string\">'hello'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 接收消息 回调函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callbcak</span><span class=\"params\">(ch,method,properties,body)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"Received %r\"</span>%(body))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 告诉rabbitmq使用callback来接收信息</span></span><br><span class=\"line\">channel.basic_consume(callbcak,queue=<span class=\"string\">'hello'</span>,no_ack=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#开始接收信息，并进入阻塞状态，队列里有信息才会调用callback进行处理。按ctrl+c退出。</span></span><br><span class=\"line\">channel.start_consuming()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 终端会阻塞住</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Received b'Hello World!'</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"工作队列\"><a href=\"#工作队列\" class=\"headerlink\" title=\"工作队列\"></a>工作队列</h2><h3 id=\"消息不丢失\"><a href=\"#消息不丢失\" class=\"headerlink\" title=\"消息不丢失\"></a>消息不丢失</h3><h4 id=\"生产者\"><a href=\"#生产者\" class=\"headerlink\" title=\"生产者\"></a>生产者</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">    msg = <span class=\"string\">' '</span>.join(sys.argv[<span class=\"number\">1</span>:])<span class=\"keyword\">or</span> <span class=\"string\">'Hello World! %s'</span> % time.time()</span><br><span class=\"line\">    channel.basic_publish(exchange=<span class=\"string\">''</span>,</span><br><span class=\"line\">                          routing_key=<span class=\"string\">'hello'</span>,</span><br><span class=\"line\">                          body=bytes(msg,encoding=<span class=\"string\">'utf8'</span>),)</span><br></pre></td></tr></table></figure>\n<h4 id=\"消费者\"><a href=\"#消费者\" class=\"headerlink\" title=\"消费者\"></a>消费者</h4><ul>\n<li><code>no_ack=False</code> 消费者退出不消息不丢失</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改回调函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callbcak</span><span class=\"params\">(ch, method, properties, body)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"Received %r\"</span> % (body))</span><br><span class=\"line\">    time.sleep(<span class=\"number\">5</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"[x] Done\"</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"消息持久化\"><a href=\"#消息持久化\" class=\"headerlink\" title=\"消息持久化\"></a>消息持久化</h2><ul>\n<li>消息持久化存储,</li>\n</ul>\n<blockquote>\n<p>虽然消息反馈机制，但是如果rabbitmq自身挂掉的话，那么任务还是会丢失。所以需要将任务持久化存储起来。声明持久化存储：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 原队列</span></span><br><span class=\"line\">channel.queue_declare(queue=<span class=\"string\">'hello'</span>, durable=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n<p>但是这个程序会执行错误，因为hello这个队列已经存在，并且是非持久化的，rabbitmq不允许使用不同的参数来重新定义存在的队列。重新定义一个队列</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 重新定义一个队列</span></span><br><span class=\"line\">channel.queue_declare(queue=<span class=\"string\">'task_queue'</span>, durable=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n<p>在发送任务的时候，用delivery_mode=2来标记任务为持久化存储：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.basic_publish(exchange=<span class=\"string\">''</span>,</span><br><span class=\"line\">       routing_key=<span class=\"string\">\"task_queue\"</span>,</span><br><span class=\"line\">       body=message,</span><br><span class=\"line\">       properties=pika.BasicProperties(</span><br><span class=\"line\">          delivery_mode = <span class=\"number\">2</span>, <span class=\"comment\"># make message persistent</span></span><br><span class=\"line\">       ))</span><br></pre></td></tr></table></figure>\n<h3 id=\"公平调度\"><a href=\"#公平调度\" class=\"headerlink\" title=\"公平调度\"></a>公平调度</h3><p><code>prefetch_count = 1</code></p>\n<p>虽然每个工作者是依次分配到任务，但是每个任务不一定一样。可能有的任务比较重，执行时间比较久；有的任务比较轻，执行时间比较短。如果能公平调度就最好了，使用basic_qos设置prefetch_count=1，使得rabbitmq不会在同一时间给工作者分配多个任务，即只有工作者完成任务之后，才会再次接收到任务。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.basic_qos(prefetch_count=<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>new_task.py完整代码</li>\n</ul>\n<blockquote>\n<p>发送者/生产者</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(</span><br><span class=\"line\">    host=<span class=\"string\">'10.211.55.10'</span>))</span><br><span class=\"line\">channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\">channel.queue_declare(queue=<span class=\"string\">'task_queue'</span>, durable=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">message = <span class=\"string\">' '</span>.join(sys.argv[<span class=\"number\">1</span>:]) <span class=\"keyword\">or</span> <span class=\"string\">\"Hello World!\"</span></span><br><span class=\"line\">channel.basic_publish(exchange=<span class=\"string\">''</span>,</span><br><span class=\"line\">                      routing_key=<span class=\"string\">'task_queue'</span>,</span><br><span class=\"line\">                      body=message,</span><br><span class=\"line\">                      properties=pika.BasicProperties(</span><br><span class=\"line\">                          delivery_mode=<span class=\"number\">2</span>,  <span class=\"comment\"># make message persistent</span></span><br><span class=\"line\">                      ))</span><br><span class=\"line\">print(<span class=\"string\">\" [x] Sent %r\"</span> % (message,))</span><br><span class=\"line\">connection.close()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>worker.py完整代码</li>\n</ul>\n<blockquote>\n<p>接受者/消费者</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class=\"string\">'10.211.55.10'</span>))</span><br><span class=\"line\">channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\">channel.queue_declare(queue=<span class=\"string\">'task_queue'</span>, durable=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">print(<span class=\"string\">' [*] Waiting for messages. To exit press CTRL+C'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\" [x] Received %r\"</span> % (body,))</span><br><span class=\"line\">    time.sleep(<span class=\"number\">6</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\" [x] Done\"</span>,ch.basic_ack(delivery_tag=method.delivery_tag))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">channel.basic_qos(prefetch_count=<span class=\"number\">1</span>)</span><br><span class=\"line\">channel.basic_consume(callback,</span><br><span class=\"line\">                      queue=<span class=\"string\">'task_queue'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">channel.start_consuming()</span><br></pre></td></tr></table></figure>\n<h2 id=\"广播\"><a href=\"#广播\" class=\"headerlink\" title=\"广播\"></a>广播</h2><p>广播交换机的工作原理：消息发送端先将消息发送给交换机，交换机再将消息发送到绑定的消息队列，而后每个接收端都能从各自的消息队列里接收到信息。</p>\n<p><img src=\"https://i.imgur.com/mK7MEC5.jpg\" alt=\"\"></p>\n<h3 id=\"消费者-接收端receive-py代码分析\"><a href=\"#消费者-接收端receive-py代码分析\" class=\"headerlink\" title=\"消费者/接收端receive.py代码分析\"></a>消费者/接收端receive.py代码分析</h3><p>和最早的receive.py相比，主要是做了两个改动：</p>\n<ul>\n<li>定义交换机</li>\n<li>不使用hello队列了，随机生成一个临时队列，并绑定到交换机上</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"></span><br><span class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(</span><br><span class=\"line\">    <span class=\"string\">'10.211.55.10'</span>))</span><br><span class=\"line\">channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义交换机</span></span><br><span class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">'messages'</span>, type=<span class=\"string\">'fanout'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 随机生成队列，并绑定到交换机上</span></span><br><span class=\"line\"><span class=\"comment\"># 参数'exclusive=True'表示当接收端退出时，销毁临时产生的队列，这样就不会占用资源。</span></span><br><span class=\"line\">result = channel.queue_declare(exclusive=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">queue_name = result.method.queue</span><br><span class=\"line\">channel.queue_bind(exchange=<span class=\"string\">'messages'</span>, queue=queue_name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\" [x] Received %r\"</span> % (body,))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">channel.basic_consume(callback, queue=queue_name, no_ack=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">' [*] Waiting for messages. To exit press CTRL+C'</span>)</span><br><span class=\"line\">channel.start_consuming()</span><br></pre></td></tr></table></figure>\n<p>执行<code>rabbitmqctl list_queues</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task_queue\t0</span><br><span class=\"line\">hello\t5</span><br><span class=\"line\"><span class=\"comment\"># 定义了交换机</span></span><br><span class=\"line\">amq.gen-K0M17k_3LVYO0b7m0s-K1g\t0</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/1EuVNfF.jpg\" alt=\"\"></p>\n<h3 id=\"生产者-发送端send-py代码分析\"><a href=\"#生产者-发送端send-py代码分析\" class=\"headerlink\" title=\"生产者/发送端send.py代码分析\"></a>生产者/发送端send.py代码分析</h3><p>和最早的send.py相比，也只做了两个改动：</p>\n<ul>\n<li>定义交换机</li>\n<li>不是将消息发送到hello队列，而是发送到交换机</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"></span><br><span class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(</span><br><span class=\"line\">    <span class=\"string\">'10.211.55.10'</span>))</span><br><span class=\"line\">channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义交换机</span></span><br><span class=\"line\"><span class=\"comment\"># type='fanout' 表示广播的意思</span></span><br><span class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">'messages'</span>, type=<span class=\"string\">'fanout'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将消息发送到交换机</span></span><br><span class=\"line\"><span class=\"comment\"># basic_publish方法的参数exchange被设定为相应交换机，</span></span><br><span class=\"line\"><span class=\"comment\"># 因为是要广播出去，发送到所有队列，所以routing_key就不需要设定了。</span></span><br><span class=\"line\">channel.basic_publish(exchange=<span class=\"string\">'messages'</span>, routing_key=<span class=\"string\">''</span>, body=<span class=\"string\">'Hello World!'</span>)</span><br><span class=\"line\">print(<span class=\"string\">\" [x] Sent 'Hello World!'\"</span>)</span><br><span class=\"line\">connection.close()</span><br></pre></td></tr></table></figure>\n<p>exchange如果为空，表示是使用匿名的交换机，在上面交换机信息的图片中可以看到有amq.*这样的交换机，就是系统默认的交换机了。routing_key在使用匿名交换机的时候才需要指定，表示发送到哪个队列的意思。第一篇的例子演示了这个功能。</p>\n<p>打开另外一个终端，执行send.py，可以观察到receive.py接收到了消息。如果有多个终端执行receive.py，那么每个receive.py都会接收到消息。</p>\n<h2 id=\"组播-路由\"><a href=\"#组播-路由\" class=\"headerlink\" title=\"组播/路由\"></a>组播/路由</h2><h3 id=\"生产者-send-py代码分析\"><a href=\"#生产者-send-py代码分析\" class=\"headerlink\" title=\"生产者/send.py代码分析\"></a>生产者/send.py代码分析</h3><p>和广播相比，改动点主要在两个方面：</p>\n<ul>\n<li>设定交换机的类型（type）为direct。上一篇是设置为fanout，表示广播的意思，会将消息发送到所有接收端，这里设置为direct表示要根据设定的路由键来发送消息。</li>\n<li>发送信息时设置发送的路由键。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"></span><br><span class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(</span><br><span class=\"line\">    <span class=\"string\">'10.211.55.10'</span>))</span><br><span class=\"line\">channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义交换机，设置类型为direct</span></span><br><span class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">'messages'</span>, type=<span class=\"string\">'direct'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义三个路由键</span></span><br><span class=\"line\">routings = [<span class=\"string\">'warning'</span>, <span class=\"string\">'error'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将消息依次发送到交换机，并设置路由键</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> routing <span class=\"keyword\">in</span> routings:</span><br><span class=\"line\">    message = <span class=\"string\">'%s message.'</span> % routing</span><br><span class=\"line\">    channel.basic_publish(exchange=<span class=\"string\">'messages'</span>,</span><br><span class=\"line\">                          routing_key=routing,</span><br><span class=\"line\">                          body=message)</span><br><span class=\"line\">    print(message)</span><br><span class=\"line\"></span><br><span class=\"line\">connection.close()</span><br></pre></td></tr></table></figure>\n<h3 id=\"消费者-receive-py代码分析\"><a href=\"#消费者-receive-py代码分析\" class=\"headerlink\" title=\"消费者/receive.py代码分析\"></a>消费者/receive.py代码分析</h3><p>和广播相比，改动点主要在三个方面：</p>\n<ul>\n<li>设定交换机的类型（type）为direct。</li>\n<li>增加命令行获取参数功能，参数即为路由键。</li>\n<li>将队列绑定到交换机上时，设定路由键。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika, sys</span><br><span class=\"line\"></span><br><span class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(</span><br><span class=\"line\">    <span class=\"string\">'10.211.55.10'</span>))</span><br><span class=\"line\">channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义交换机，设置类型为direct</span></span><br><span class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">'messages'</span>, type=<span class=\"string\">'direct'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从命令行获取路由键参数，如果没有，则设置为info</span></span><br><span class=\"line\">routings = sys.argv[<span class=\"number\">1</span>:]</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> routings:</span><br><span class=\"line\">    routings = [<span class=\"string\">'info'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成临时队列，并绑定到交换机上，设置路由键</span></span><br><span class=\"line\">result = channel.queue_declare(exclusive=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">queue_name = result.method.queue</span><br><span class=\"line\"><span class=\"keyword\">for</span> routing <span class=\"keyword\">in</span> routings:</span><br><span class=\"line\">    channel.queue_bind(exchange=<span class=\"string\">'messages'</span>,</span><br><span class=\"line\">                       queue=queue_name,</span><br><span class=\"line\">                       routing_key=routing)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\" [x] Received %r\"</span> % (body,))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">channel.basic_consume(callback, queue=queue_name, no_ack=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">' [*] Waiting for messages. To exit press CTRL+C'</span>)</span><br><span class=\"line\">channel.start_consuming()</span><br></pre></td></tr></table></figure>\n<p>打开两个终端，一个运行代码python receive.py info warning，表示只接收info和warning的消息。另外一个终端运行send.py，可以观察到接收终端只接收到了info和warning的消息。如果打开多个终端运行receive.py，并传入不同的路由键参数，可以看到更明显的效果。</p>\n<p>当接收端正在运行时，可以使用rabbitmqctl list_bindings来查看绑定情况。</p>\n<h2 id=\"按规则发送-正则\"><a href=\"#按规则发送-正则\" class=\"headerlink\" title=\"按规则发送/正则\"></a>按规则发送/正则</h2><p>上面路由键/组播的功能，通过设置路由键，可以将消息发送到相应的队列，这里的路由键是要完全匹配，比如info消息的只能发到路由键为info的消息队列。</p>\n<p>路由键模糊匹配，就是可以使用正则表达式，和常用的正则表示式不同，这里的话“#”表示所有、全部的意思；“*”只匹配到一个词。看完示例就能明白了。</p>\n<h3 id=\"send-py代码分析\"><a href=\"#send-py代码分析\" class=\"headerlink\" title=\"send.py代码分析\"></a>send.py代码分析</h3><p>因为要进行路由键模糊匹配，所以交换机的类型要设置为topic，设置为topic，就可以使用#，*的匹配符号了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"></span><br><span class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(</span><br><span class=\"line\">    <span class=\"string\">'10.211.55.10'</span>))</span><br><span class=\"line\">channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义交换机，设置类型为topic</span></span><br><span class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">'messages'</span>, type=<span class=\"string\">'topic'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义路由键</span></span><br><span class=\"line\"><span class=\"comment\"># 四种类型的消息</span></span><br><span class=\"line\">routings = [<span class=\"string\">'happy.work'</span>, <span class=\"string\">'happy.life'</span>, <span class=\"string\">'sad.work'</span>, <span class=\"string\">'sad.life'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将消息依次发送到交换机，并设定路由键</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> routing <span class=\"keyword\">in</span> routings:</span><br><span class=\"line\">    message = <span class=\"string\">'%s message.'</span> % routing</span><br><span class=\"line\">    channel.basic_publish(exchange=<span class=\"string\">'messages'</span>,</span><br><span class=\"line\">                          routing_key=routing,</span><br><span class=\"line\">                          body=message)</span><br><span class=\"line\">    print(message)</span><br><span class=\"line\"></span><br><span class=\"line\">connection.close()</span><br></pre></td></tr></table></figure>\n<h3 id=\"receive-py代码分析\"><a href=\"#receive-py代码分析\" class=\"headerlink\" title=\"receive.py代码分析\"></a>receive.py代码分析</h3><p>类型要设定为topic就可以了。从命令行接收参数的功能稍微调整了一下，没有参数时报错退出。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika, sys</span><br><span class=\"line\"></span><br><span class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(</span><br><span class=\"line\">    <span class=\"string\">'10.211.55.10'</span>))</span><br><span class=\"line\">channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义交换机，设置类型为topic</span></span><br><span class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">'messages'</span>, type=<span class=\"string\">'topic'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从命令行获取路由参数，如果没有，则报错退出</span></span><br><span class=\"line\">routings = sys.argv[<span class=\"number\">1</span>:]</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> routings:</span><br><span class=\"line\">    <span class=\"comment\"># print(&gt;&gt; sys.stderr, \"Usage: %s [routing_key]...\" % (sys.argv[0],))</span></span><br><span class=\"line\">    print(sys.stderr, <span class=\"string\">\"Usage: %s [routing_key]...\"</span> % (sys.argv[<span class=\"number\">0</span>],))</span><br><span class=\"line\">    exit()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成临时队列，并绑定到交换机上，设置路由键</span></span><br><span class=\"line\">result = channel.queue_declare(exclusive=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">queue_name = result.method.queue</span><br><span class=\"line\"><span class=\"keyword\">for</span> routing <span class=\"keyword\">in</span> routings:</span><br><span class=\"line\">    channel.queue_bind(exchange=<span class=\"string\">'messages'</span>,</span><br><span class=\"line\">                       queue=queue_name,</span><br><span class=\"line\">                       routing_key=routing)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\" [x] Received %r\"</span> % (body,))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">channel.basic_consume(callback, queue=queue_name, no_ack=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">' [*] Waiting for messages. To exit press CTRL+C'</span>)</span><br><span class=\"line\">channel.start_consuming()</span><br></pre></td></tr></table></figure>\n<h3 id=\"实验运行\"><a href=\"#实验运行\" class=\"headerlink\" title=\"实验运行\"></a>实验运行</h3><p>打开多个终端,分别传入不同的规则,观察结果<br>如:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 receive_topic.py <span class=\"string\">\"#\"</span></span><br><span class=\"line\">python3 receive_topic.py <span class=\"string\">\"happy.*\"</span></span><br><span class=\"line\">python3 receive_topic.py <span class=\"string\">\"*.work\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"难点\"><a href=\"#难点\" class=\"headerlink\" title=\"难点\"></a>难点</h3><p>1、发送信息时，如果不设置路由键，那么路由键设置为”*”的接收端是否能接收到消息？</p>\n<blockquote>\n<p>发送信息时，如果不设置路由键，默认是表示广播出去，理论上所有接收端都可以收到消息，但是笔者试了下，路由键设置为”*”的接收端收不到任何消息。</p>\n</blockquote>\n<blockquote>\n<p>只有发送消息时，设置路由键为一个词，路由键设置为”*”的接收端才能收到消息。在这里，每个词使用”.”符号分开的。</p>\n</blockquote>\n<p>2、发送消息时，如果路由键设置为”..”，那么路由键设置为”#.*”的接收端是否能接收到消息？如果发送消息时，路由键设置为一个词呢？</p>\n<blockquote>\n<p>两种情况，笔者都测试过了，可以的。</p>\n</blockquote>\n<p>3、”a.*.#” 和”a.#”的区别</p>\n<blockquote>\n<ul>\n<li>“a.#”只要字符串开头的一个词是a就可以了，比如a、a.haha、a.haha.haha。而这样的词是不行的，如abs、abc、abc.haha。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>“a.<em>.#”必须要满足a.</em>的字符串才可以，比如a.、a.haha、a.haha.haha。而这样的词是不行的，如a。</li>\n</ul>\n</blockquote>\n<h2 id=\"远程结果返回RPC\"><a href=\"#远程结果返回RPC\" class=\"headerlink\" title=\"远程结果返回RPC\"></a>远程结果返回RPC</h2><p>Remote Producre Call<br>处理方法描述：</p>\n<blockquote>\n<p>发送端在发送信息前，产生一个接收消息的临时队列，该队列用来接收返回的结果。其实在这里接收端、发送端的概念已经比较模糊了，因为发送端也同样要接收消息，接收端同样也要发送消息，所以这里笔者使用另外的示例来演示这一过程。</p>\n</blockquote>\n<h3 id=\"compute-py代码分析\"><a href=\"#compute-py代码分析\" class=\"headerlink\" title=\"compute.py代码分析\"></a>compute.py代码分析</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接rabbitmq服务器</span></span><br><span class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(</span><br><span class=\"line\">    host=<span class=\"string\">'10.211.55.10'</span>))</span><br><span class=\"line\">channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义队列</span></span><br><span class=\"line\">channel.queue_declare(queue=<span class=\"string\">'compute_queue'</span>)</span><br><span class=\"line\">print(<span class=\"string\">' [*] Waiting for n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将n值加1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">increase</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> n + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义接收到消息的处理方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">request</span><span class=\"params\">(ch, method, properties, body)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\" [.] increase(%s)\"</span> % (body,))</span><br><span class=\"line\"></span><br><span class=\"line\">    response = increase(int(body))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 将计算结果发送回控制中心</span></span><br><span class=\"line\">    ch.basic_publish(exchange=<span class=\"string\">''</span>,</span><br><span class=\"line\">                     routing_key=properties.reply_to,</span><br><span class=\"line\">                     body=str(response))</span><br><span class=\"line\">    ch.basic_ack(delivery_tag=method.delivery_tag)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">channel.basic_qos(prefetch_count=<span class=\"number\">1</span>)</span><br><span class=\"line\">channel.basic_consume(request, queue=<span class=\"string\">'compute_queue'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">channel.start_consuming()</span><br></pre></td></tr></table></figure>\n<h3 id=\"center-py代码分析\"><a href=\"#center-py代码分析\" class=\"headerlink\" title=\"center.py代码分析\"></a>center.py代码分析</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Center</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.connection = pika.BlockingConnection(pika.ConnectionParameters(</span><br><span class=\"line\">            host=<span class=\"string\">'10.211.55.10'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        self.channel = self.connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 定义接收返回消息的队列</span></span><br><span class=\"line\">        result = self.channel.queue_declare(exclusive=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">        self.callback_queue = result.method.queue</span><br><span class=\"line\"></span><br><span class=\"line\">        self.channel.basic_consume(self.on_response,</span><br><span class=\"line\">                                   no_ack=<span class=\"keyword\">True</span>,</span><br><span class=\"line\">                                   queue=self.callback_queue)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 定义接收到返回消息的处理方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_response</span><span class=\"params\">(self, ch, method, props, body)</span>:</span></span><br><span class=\"line\">        self.response = body</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">request</span><span class=\"params\">(self, n)</span>:</span></span><br><span class=\"line\">        self.response = <span class=\"keyword\">None</span></span><br><span class=\"line\">        <span class=\"comment\"># 发送计算请求，并声明返回队列</span></span><br><span class=\"line\">        self.channel.basic_publish(exchange=<span class=\"string\">''</span>,</span><br><span class=\"line\">                                   routing_key=<span class=\"string\">'compute_queue'</span>,</span><br><span class=\"line\">                                   properties=pika.BasicProperties(</span><br><span class=\"line\">                                       reply_to=self.callback_queue,</span><br><span class=\"line\">                                   ),</span><br><span class=\"line\">                                   body=str(n))</span><br><span class=\"line\">        <span class=\"comment\"># 接收返回的数据</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> self.response <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            self.connection.process_data_events()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> int(self.response)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">center = Center()</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\" [x] Requesting increase(30)\"</span>)</span><br><span class=\"line\">response = center.request(<span class=\"number\">30</span>)</span><br><span class=\"line\">print(<span class=\"string\">\" [.] Got %r\"</span> % (response,))</span><br></pre></td></tr></table></figure>\n<p>上面代码定义了接收返回数据的队列和处理方法，并且在发送请求的时候将该队列赋值给<code>reply_to</code>，在计算节点代码中就是通过这个参数来获取返回队列的。</p>\n<h2 id=\"相互关联编号correlation-id\"><a href=\"#相互关联编号correlation-id\" class=\"headerlink\" title=\"相互关联编号correlation id\"></a>相互关联编号correlation id</h2><p><code>correlation id</code>运行原理：</p>\n<blockquote>\n<p>控制中心发送计算请求时设置correlation id，而后计算节点将计算结果，连同接收到的correlation id一起返回，这样控制中心就能通过correlation id来标识请求。其实correlation id也可以理解为请求的唯一标识码。</p>\n</blockquote>\n<p>示例内容：</p>\n<blockquote>\n<p>控制中心开启多个线程，每个线程都发起一次计算请求，通过correlation id，每个线程都能准确收到相应的计算结果。</p>\n</blockquote>\n<h3 id=\"compute-py代码分析-1\"><a href=\"#compute-py代码分析-1\" class=\"headerlink\" title=\"compute.py代码分析\"></a>compute.py代码分析</h3><p>和上面相比，只需修改一个地方：</p>\n<blockquote>\n<p>将计算结果发送回控制中心时，增加参数correlation_id的设定，该参数的值其实是从控制中心发送过来的，这里只是再次发送回去。代码如下：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接rabbitmq服务器</span></span><br><span class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(</span><br><span class=\"line\">    host=<span class=\"string\">'10.211.55.10'</span>))</span><br><span class=\"line\">channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义队列</span></span><br><span class=\"line\">channel.queue_declare(queue=<span class=\"string\">'compute_queue'</span>)</span><br><span class=\"line\">print(<span class=\"string\">' [*] Waiting for n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将n值加1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">increase</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> n + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义接收到消息的处理方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">request</span><span class=\"params\">(ch, method, props, body)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\" [.] increase(%s)\"</span> % (body,))</span><br><span class=\"line\"></span><br><span class=\"line\">    response = increase(int(body))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 将计算结果发送回控制中心，增加correlation_id的设定</span></span><br><span class=\"line\">    ch.basic_publish(exchange=<span class=\"string\">''</span>,</span><br><span class=\"line\">                     routing_key=props.reply_to,</span><br><span class=\"line\">                     properties=pika.BasicProperties(correlation_id= \\</span><br><span class=\"line\">                                                         props.correlation_id),</span><br><span class=\"line\">                     body=str(response))</span><br><span class=\"line\">    ch.basic_ack(delivery_tag=method.delivery_tag)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">channel.basic_qos(prefetch_count=<span class=\"number\">1</span>)</span><br><span class=\"line\">channel.basic_consume(request, queue=<span class=\"string\">'compute_queue'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">channel.start_consuming()</span><br></pre></td></tr></table></figure>\n<h3 id=\"center-py代码分析-1\"><a href=\"#center-py代码分析-1\" class=\"headerlink\" title=\"center.py代码分析\"></a>center.py代码分析</h3><p>控制中心代码稍微复杂些，其中比较关键的有三个地方：</p>\n<ul>\n<li>使用python的uuid来产生唯一的correlation_id。</li>\n<li>发送计算请求时，设定参数correlation_id。</li>\n<li>定义一个字典来保存返回的数据，并且键值为相应线程产生的correlation_id。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika, threading, uuid</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自定义线程类，继承threading.Thread</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span><span class=\"params\">(threading.Thread)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, func, num)</span>:</span></span><br><span class=\"line\">        super(MyThread, self).__init__()</span><br><span class=\"line\">        self.func = func</span><br><span class=\"line\">        self.num = num</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\" [x] Requesting increase(%d)\"</span> % self.num)</span><br><span class=\"line\">        response = self.func(self.num)</span><br><span class=\"line\">        print(<span class=\"string\">\" [.] increase(%d)=%d\"</span> % (self.num, response))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 控制中心类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Center</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.connection = pika.BlockingConnection(pika.ConnectionParameters(</span><br><span class=\"line\">            host=<span class=\"string\">'10.211.55.10'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        self.channel = self.connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 定义接收返回消息的队列</span></span><br><span class=\"line\">        result = self.channel.queue_declare(exclusive=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">        self.callback_queue = result.method.queue</span><br><span class=\"line\"></span><br><span class=\"line\">        self.channel.basic_consume(self.on_response,</span><br><span class=\"line\">                                   no_ack=<span class=\"keyword\">True</span>,</span><br><span class=\"line\">                                   queue=self.callback_queue)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 返回的结果都会存储在该字典里</span></span><br><span class=\"line\">        self.response = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 定义接收到返回消息的处理方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_response</span><span class=\"params\">(self, ch, method, props, body)</span>:</span></span><br><span class=\"line\">        self.response[props.correlation_id] = body</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">request</span><span class=\"params\">(self, n)</span>:</span></span><br><span class=\"line\">        corr_id = str(uuid.uuid4())     <span class=\"comment\">#  产生 id</span></span><br><span class=\"line\">        self.response[corr_id] = <span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 发送计算请求，并设定返回队列和correlation_id</span></span><br><span class=\"line\">        self.channel.basic_publish(exchange=<span class=\"string\">''</span>,</span><br><span class=\"line\">                                   routing_key=<span class=\"string\">'compute_queue'</span>,</span><br><span class=\"line\">                                   properties=pika.BasicProperties(</span><br><span class=\"line\">                                       reply_to=self.callback_queue,</span><br><span class=\"line\">                                       correlation_id=corr_id,</span><br><span class=\"line\">                                   ),</span><br><span class=\"line\">                                   body=str(n))</span><br><span class=\"line\">        <span class=\"comment\"># 接收返回的数据</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> self.response[corr_id] <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            self.connection.process_data_events()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> int(self.response[corr_id])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">center = Center()</span><br><span class=\"line\"><span class=\"comment\"># 发起5次计算请求</span></span><br><span class=\"line\">nums = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>]</span><br><span class=\"line\">threads = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">    threads.append(MyThread(center.request, num))</span><br><span class=\"line\"><span class=\"keyword\">for</span> thread <span class=\"keyword\">in</span> threads:</span><br><span class=\"line\">    thread.start()</span><br><span class=\"line\"><span class=\"keyword\">for</span> thread <span class=\"keyword\">in</span> threads:</span><br><span class=\"line\">    thread.join()</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"http://blog.csdn.net/chenjiebin/article/details/8253433\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/chenjiebin/article/details/8253433</a></p>\n","site":{"data":{}},"excerpt":"<p>为什么用Rabbitmq instead of python queue ?</p>","more":"<blockquote>\n<p>是因为python queue 不能跨进程 </p>\n</blockquote>\n<p><strong>队列的作用:</strong>    </p>\n<pre><code>1. 存储消息、数据\n2. 保证消息顺序 \n3. 保证数据的交付\n</code></pre><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 斐波那契数列</span></span><br><span class=\"line\">1 1 2 3 5 8 13 ...</span><br><span class=\"line\"><span class=\"comment\"># 启动rabbitmq，并验证启动情况 </span></span><br><span class=\"line\">rabbitmq-server --detached &amp;ps aux |grep rabbitmq</span><br><span class=\"line\"><span class=\"comment\"># 以服务的方式启动</span></span><br><span class=\"line\">service rabbitmq-server start</span><br><span class=\"line\"><span class=\"comment\"># 启用维护插件</span></span><br><span class=\"line\">rabbitmq-plugins <span class=\"built_in\">enable</span> rabbitmq_management </span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">service rabbitmq-server restart</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># erroe</span></span><br><span class=\"line\">pika.exceptions.ProbableAuthenticationError</span><br><span class=\"line\"><span class=\"comment\"># 解决方法</span></span><br><span class=\"line\"><span class=\"comment\"># 写入信息 并保存/关闭防火墙 'systemctl stop filewallf'</span></span><br><span class=\"line\">vim /etc/rabbitmq/rabbitmq.config</span><br><span class=\"line\">[&#123;rabbit, [&#123;loopback_users, []&#125;]&#125;].</span><br><span class=\"line\"><span class=\"comment\"># 查看当前队列</span></span><br><span class=\"line\">rabbitmqctl list_queues</span><br></pre></td></tr></table></figure>\n<h2 id=\"基本使用实现\"><a href=\"#基本使用实现\" class=\"headerlink\" title=\"基本使用实现\"></a>基本使用实现</h2><h3 id=\"发送端\"><a href=\"#发送端\" class=\"headerlink\" title=\"发送端\"></a>发送端</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建连接</span></span><br><span class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(<span class=\"string\">'10.211.55.10'</span>))</span><br><span class=\"line\">channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 声明消息队列</span></span><br><span class=\"line\">channel.queue_declare(queue=<span class=\"string\">'hello'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发送消息到上面声明的hello队列，</span></span><br><span class=\"line\"><span class=\"comment\"># 其中exchange表示交换器，能精确指定消息应该发送到哪个队列，</span></span><br><span class=\"line\"><span class=\"comment\"># routing_key设置为队列的名称，</span></span><br><span class=\"line\"><span class=\"comment\"># body就是发送的内容，</span></span><br><span class=\"line\">channel.basic_publish(exchange=<span class=\"string\">''</span>,routing_key=<span class=\"string\">'hello'</span>,body=<span class=\"string\">'Hello World!'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">'[x] Sent \"Hello World!\"'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># sh命令</span></span><br><span class=\"line\"><span class=\"comment\"># 用 rabbitmqctl list_queues 查看队列</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Listing queues</span></span><br><span class=\"line\"><span class=\"string\">hello\t1</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/6vYEGPV.jpg\" alt=\"\"></p>\n<h3 id=\"接收端\"><a href=\"#接收端\" class=\"headerlink\" title=\"接收端\"></a>接收端</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建连接</span></span><br><span class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(<span class=\"string\">'10.211.55.10'</span>))</span><br><span class=\"line\">channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 声明消息队列</span></span><br><span class=\"line\">channel.queue_declare(queue=<span class=\"string\">'hello'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 接收消息 回调函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callbcak</span><span class=\"params\">(ch,method,properties,body)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"Received %r\"</span>%(body))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 告诉rabbitmq使用callback来接收信息</span></span><br><span class=\"line\">channel.basic_consume(callbcak,queue=<span class=\"string\">'hello'</span>,no_ack=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#开始接收信息，并进入阻塞状态，队列里有信息才会调用callback进行处理。按ctrl+c退出。</span></span><br><span class=\"line\">channel.start_consuming()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 终端会阻塞住</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Received b'Hello World!'</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"工作队列\"><a href=\"#工作队列\" class=\"headerlink\" title=\"工作队列\"></a>工作队列</h2><h3 id=\"消息不丢失\"><a href=\"#消息不丢失\" class=\"headerlink\" title=\"消息不丢失\"></a>消息不丢失</h3><h4 id=\"生产者\"><a href=\"#生产者\" class=\"headerlink\" title=\"生产者\"></a>生产者</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">    msg = <span class=\"string\">' '</span>.join(sys.argv[<span class=\"number\">1</span>:])<span class=\"keyword\">or</span> <span class=\"string\">'Hello World! %s'</span> % time.time()</span><br><span class=\"line\">    channel.basic_publish(exchange=<span class=\"string\">''</span>,</span><br><span class=\"line\">                          routing_key=<span class=\"string\">'hello'</span>,</span><br><span class=\"line\">                          body=bytes(msg,encoding=<span class=\"string\">'utf8'</span>),)</span><br></pre></td></tr></table></figure>\n<h4 id=\"消费者\"><a href=\"#消费者\" class=\"headerlink\" title=\"消费者\"></a>消费者</h4><ul>\n<li><code>no_ack=False</code> 消费者退出不消息不丢失</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改回调函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callbcak</span><span class=\"params\">(ch, method, properties, body)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"Received %r\"</span> % (body))</span><br><span class=\"line\">    time.sleep(<span class=\"number\">5</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"[x] Done\"</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"消息持久化\"><a href=\"#消息持久化\" class=\"headerlink\" title=\"消息持久化\"></a>消息持久化</h2><ul>\n<li>消息持久化存储,</li>\n</ul>\n<blockquote>\n<p>虽然消息反馈机制，但是如果rabbitmq自身挂掉的话，那么任务还是会丢失。所以需要将任务持久化存储起来。声明持久化存储：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 原队列</span></span><br><span class=\"line\">channel.queue_declare(queue=<span class=\"string\">'hello'</span>, durable=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n<p>但是这个程序会执行错误，因为hello这个队列已经存在，并且是非持久化的，rabbitmq不允许使用不同的参数来重新定义存在的队列。重新定义一个队列</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 重新定义一个队列</span></span><br><span class=\"line\">channel.queue_declare(queue=<span class=\"string\">'task_queue'</span>, durable=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n<p>在发送任务的时候，用delivery_mode=2来标记任务为持久化存储：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.basic_publish(exchange=<span class=\"string\">''</span>,</span><br><span class=\"line\">       routing_key=<span class=\"string\">\"task_queue\"</span>,</span><br><span class=\"line\">       body=message,</span><br><span class=\"line\">       properties=pika.BasicProperties(</span><br><span class=\"line\">          delivery_mode = <span class=\"number\">2</span>, <span class=\"comment\"># make message persistent</span></span><br><span class=\"line\">       ))</span><br></pre></td></tr></table></figure>\n<h3 id=\"公平调度\"><a href=\"#公平调度\" class=\"headerlink\" title=\"公平调度\"></a>公平调度</h3><p><code>prefetch_count = 1</code></p>\n<p>虽然每个工作者是依次分配到任务，但是每个任务不一定一样。可能有的任务比较重，执行时间比较久；有的任务比较轻，执行时间比较短。如果能公平调度就最好了，使用basic_qos设置prefetch_count=1，使得rabbitmq不会在同一时间给工作者分配多个任务，即只有工作者完成任务之后，才会再次接收到任务。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.basic_qos(prefetch_count=<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>new_task.py完整代码</li>\n</ul>\n<blockquote>\n<p>发送者/生产者</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(</span><br><span class=\"line\">    host=<span class=\"string\">'10.211.55.10'</span>))</span><br><span class=\"line\">channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\">channel.queue_declare(queue=<span class=\"string\">'task_queue'</span>, durable=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">message = <span class=\"string\">' '</span>.join(sys.argv[<span class=\"number\">1</span>:]) <span class=\"keyword\">or</span> <span class=\"string\">\"Hello World!\"</span></span><br><span class=\"line\">channel.basic_publish(exchange=<span class=\"string\">''</span>,</span><br><span class=\"line\">                      routing_key=<span class=\"string\">'task_queue'</span>,</span><br><span class=\"line\">                      body=message,</span><br><span class=\"line\">                      properties=pika.BasicProperties(</span><br><span class=\"line\">                          delivery_mode=<span class=\"number\">2</span>,  <span class=\"comment\"># make message persistent</span></span><br><span class=\"line\">                      ))</span><br><span class=\"line\">print(<span class=\"string\">\" [x] Sent %r\"</span> % (message,))</span><br><span class=\"line\">connection.close()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>worker.py完整代码</li>\n</ul>\n<blockquote>\n<p>接受者/消费者</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class=\"string\">'10.211.55.10'</span>))</span><br><span class=\"line\">channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\">channel.queue_declare(queue=<span class=\"string\">'task_queue'</span>, durable=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">print(<span class=\"string\">' [*] Waiting for messages. To exit press CTRL+C'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\" [x] Received %r\"</span> % (body,))</span><br><span class=\"line\">    time.sleep(<span class=\"number\">6</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\" [x] Done\"</span>,ch.basic_ack(delivery_tag=method.delivery_tag))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">channel.basic_qos(prefetch_count=<span class=\"number\">1</span>)</span><br><span class=\"line\">channel.basic_consume(callback,</span><br><span class=\"line\">                      queue=<span class=\"string\">'task_queue'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">channel.start_consuming()</span><br></pre></td></tr></table></figure>\n<h2 id=\"广播\"><a href=\"#广播\" class=\"headerlink\" title=\"广播\"></a>广播</h2><p>广播交换机的工作原理：消息发送端先将消息发送给交换机，交换机再将消息发送到绑定的消息队列，而后每个接收端都能从各自的消息队列里接收到信息。</p>\n<p><img src=\"https://i.imgur.com/mK7MEC5.jpg\" alt=\"\"></p>\n<h3 id=\"消费者-接收端receive-py代码分析\"><a href=\"#消费者-接收端receive-py代码分析\" class=\"headerlink\" title=\"消费者/接收端receive.py代码分析\"></a>消费者/接收端receive.py代码分析</h3><p>和最早的receive.py相比，主要是做了两个改动：</p>\n<ul>\n<li>定义交换机</li>\n<li>不使用hello队列了，随机生成一个临时队列，并绑定到交换机上</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"></span><br><span class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(</span><br><span class=\"line\">    <span class=\"string\">'10.211.55.10'</span>))</span><br><span class=\"line\">channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义交换机</span></span><br><span class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">'messages'</span>, type=<span class=\"string\">'fanout'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 随机生成队列，并绑定到交换机上</span></span><br><span class=\"line\"><span class=\"comment\"># 参数'exclusive=True'表示当接收端退出时，销毁临时产生的队列，这样就不会占用资源。</span></span><br><span class=\"line\">result = channel.queue_declare(exclusive=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">queue_name = result.method.queue</span><br><span class=\"line\">channel.queue_bind(exchange=<span class=\"string\">'messages'</span>, queue=queue_name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\" [x] Received %r\"</span> % (body,))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">channel.basic_consume(callback, queue=queue_name, no_ack=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">' [*] Waiting for messages. To exit press CTRL+C'</span>)</span><br><span class=\"line\">channel.start_consuming()</span><br></pre></td></tr></table></figure>\n<p>执行<code>rabbitmqctl list_queues</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task_queue\t0</span><br><span class=\"line\">hello\t5</span><br><span class=\"line\"><span class=\"comment\"># 定义了交换机</span></span><br><span class=\"line\">amq.gen-K0M17k_3LVYO0b7m0s-K1g\t0</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/1EuVNfF.jpg\" alt=\"\"></p>\n<h3 id=\"生产者-发送端send-py代码分析\"><a href=\"#生产者-发送端send-py代码分析\" class=\"headerlink\" title=\"生产者/发送端send.py代码分析\"></a>生产者/发送端send.py代码分析</h3><p>和最早的send.py相比，也只做了两个改动：</p>\n<ul>\n<li>定义交换机</li>\n<li>不是将消息发送到hello队列，而是发送到交换机</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"></span><br><span class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(</span><br><span class=\"line\">    <span class=\"string\">'10.211.55.10'</span>))</span><br><span class=\"line\">channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义交换机</span></span><br><span class=\"line\"><span class=\"comment\"># type='fanout' 表示广播的意思</span></span><br><span class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">'messages'</span>, type=<span class=\"string\">'fanout'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将消息发送到交换机</span></span><br><span class=\"line\"><span class=\"comment\"># basic_publish方法的参数exchange被设定为相应交换机，</span></span><br><span class=\"line\"><span class=\"comment\"># 因为是要广播出去，发送到所有队列，所以routing_key就不需要设定了。</span></span><br><span class=\"line\">channel.basic_publish(exchange=<span class=\"string\">'messages'</span>, routing_key=<span class=\"string\">''</span>, body=<span class=\"string\">'Hello World!'</span>)</span><br><span class=\"line\">print(<span class=\"string\">\" [x] Sent 'Hello World!'\"</span>)</span><br><span class=\"line\">connection.close()</span><br></pre></td></tr></table></figure>\n<p>exchange如果为空，表示是使用匿名的交换机，在上面交换机信息的图片中可以看到有amq.*这样的交换机，就是系统默认的交换机了。routing_key在使用匿名交换机的时候才需要指定，表示发送到哪个队列的意思。第一篇的例子演示了这个功能。</p>\n<p>打开另外一个终端，执行send.py，可以观察到receive.py接收到了消息。如果有多个终端执行receive.py，那么每个receive.py都会接收到消息。</p>\n<h2 id=\"组播-路由\"><a href=\"#组播-路由\" class=\"headerlink\" title=\"组播/路由\"></a>组播/路由</h2><h3 id=\"生产者-send-py代码分析\"><a href=\"#生产者-send-py代码分析\" class=\"headerlink\" title=\"生产者/send.py代码分析\"></a>生产者/send.py代码分析</h3><p>和广播相比，改动点主要在两个方面：</p>\n<ul>\n<li>设定交换机的类型（type）为direct。上一篇是设置为fanout，表示广播的意思，会将消息发送到所有接收端，这里设置为direct表示要根据设定的路由键来发送消息。</li>\n<li>发送信息时设置发送的路由键。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"></span><br><span class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(</span><br><span class=\"line\">    <span class=\"string\">'10.211.55.10'</span>))</span><br><span class=\"line\">channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义交换机，设置类型为direct</span></span><br><span class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">'messages'</span>, type=<span class=\"string\">'direct'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义三个路由键</span></span><br><span class=\"line\">routings = [<span class=\"string\">'warning'</span>, <span class=\"string\">'error'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将消息依次发送到交换机，并设置路由键</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> routing <span class=\"keyword\">in</span> routings:</span><br><span class=\"line\">    message = <span class=\"string\">'%s message.'</span> % routing</span><br><span class=\"line\">    channel.basic_publish(exchange=<span class=\"string\">'messages'</span>,</span><br><span class=\"line\">                          routing_key=routing,</span><br><span class=\"line\">                          body=message)</span><br><span class=\"line\">    print(message)</span><br><span class=\"line\"></span><br><span class=\"line\">connection.close()</span><br></pre></td></tr></table></figure>\n<h3 id=\"消费者-receive-py代码分析\"><a href=\"#消费者-receive-py代码分析\" class=\"headerlink\" title=\"消费者/receive.py代码分析\"></a>消费者/receive.py代码分析</h3><p>和广播相比，改动点主要在三个方面：</p>\n<ul>\n<li>设定交换机的类型（type）为direct。</li>\n<li>增加命令行获取参数功能，参数即为路由键。</li>\n<li>将队列绑定到交换机上时，设定路由键。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika, sys</span><br><span class=\"line\"></span><br><span class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(</span><br><span class=\"line\">    <span class=\"string\">'10.211.55.10'</span>))</span><br><span class=\"line\">channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义交换机，设置类型为direct</span></span><br><span class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">'messages'</span>, type=<span class=\"string\">'direct'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从命令行获取路由键参数，如果没有，则设置为info</span></span><br><span class=\"line\">routings = sys.argv[<span class=\"number\">1</span>:]</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> routings:</span><br><span class=\"line\">    routings = [<span class=\"string\">'info'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成临时队列，并绑定到交换机上，设置路由键</span></span><br><span class=\"line\">result = channel.queue_declare(exclusive=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">queue_name = result.method.queue</span><br><span class=\"line\"><span class=\"keyword\">for</span> routing <span class=\"keyword\">in</span> routings:</span><br><span class=\"line\">    channel.queue_bind(exchange=<span class=\"string\">'messages'</span>,</span><br><span class=\"line\">                       queue=queue_name,</span><br><span class=\"line\">                       routing_key=routing)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\" [x] Received %r\"</span> % (body,))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">channel.basic_consume(callback, queue=queue_name, no_ack=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">' [*] Waiting for messages. To exit press CTRL+C'</span>)</span><br><span class=\"line\">channel.start_consuming()</span><br></pre></td></tr></table></figure>\n<p>打开两个终端，一个运行代码python receive.py info warning，表示只接收info和warning的消息。另外一个终端运行send.py，可以观察到接收终端只接收到了info和warning的消息。如果打开多个终端运行receive.py，并传入不同的路由键参数，可以看到更明显的效果。</p>\n<p>当接收端正在运行时，可以使用rabbitmqctl list_bindings来查看绑定情况。</p>\n<h2 id=\"按规则发送-正则\"><a href=\"#按规则发送-正则\" class=\"headerlink\" title=\"按规则发送/正则\"></a>按规则发送/正则</h2><p>上面路由键/组播的功能，通过设置路由键，可以将消息发送到相应的队列，这里的路由键是要完全匹配，比如info消息的只能发到路由键为info的消息队列。</p>\n<p>路由键模糊匹配，就是可以使用正则表达式，和常用的正则表示式不同，这里的话“#”表示所有、全部的意思；“*”只匹配到一个词。看完示例就能明白了。</p>\n<h3 id=\"send-py代码分析\"><a href=\"#send-py代码分析\" class=\"headerlink\" title=\"send.py代码分析\"></a>send.py代码分析</h3><p>因为要进行路由键模糊匹配，所以交换机的类型要设置为topic，设置为topic，就可以使用#，*的匹配符号了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"></span><br><span class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(</span><br><span class=\"line\">    <span class=\"string\">'10.211.55.10'</span>))</span><br><span class=\"line\">channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义交换机，设置类型为topic</span></span><br><span class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">'messages'</span>, type=<span class=\"string\">'topic'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义路由键</span></span><br><span class=\"line\"><span class=\"comment\"># 四种类型的消息</span></span><br><span class=\"line\">routings = [<span class=\"string\">'happy.work'</span>, <span class=\"string\">'happy.life'</span>, <span class=\"string\">'sad.work'</span>, <span class=\"string\">'sad.life'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将消息依次发送到交换机，并设定路由键</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> routing <span class=\"keyword\">in</span> routings:</span><br><span class=\"line\">    message = <span class=\"string\">'%s message.'</span> % routing</span><br><span class=\"line\">    channel.basic_publish(exchange=<span class=\"string\">'messages'</span>,</span><br><span class=\"line\">                          routing_key=routing,</span><br><span class=\"line\">                          body=message)</span><br><span class=\"line\">    print(message)</span><br><span class=\"line\"></span><br><span class=\"line\">connection.close()</span><br></pre></td></tr></table></figure>\n<h3 id=\"receive-py代码分析\"><a href=\"#receive-py代码分析\" class=\"headerlink\" title=\"receive.py代码分析\"></a>receive.py代码分析</h3><p>类型要设定为topic就可以了。从命令行接收参数的功能稍微调整了一下，没有参数时报错退出。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika, sys</span><br><span class=\"line\"></span><br><span class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(</span><br><span class=\"line\">    <span class=\"string\">'10.211.55.10'</span>))</span><br><span class=\"line\">channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义交换机，设置类型为topic</span></span><br><span class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">'messages'</span>, type=<span class=\"string\">'topic'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从命令行获取路由参数，如果没有，则报错退出</span></span><br><span class=\"line\">routings = sys.argv[<span class=\"number\">1</span>:]</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> routings:</span><br><span class=\"line\">    <span class=\"comment\"># print(&gt;&gt; sys.stderr, \"Usage: %s [routing_key]...\" % (sys.argv[0],))</span></span><br><span class=\"line\">    print(sys.stderr, <span class=\"string\">\"Usage: %s [routing_key]...\"</span> % (sys.argv[<span class=\"number\">0</span>],))</span><br><span class=\"line\">    exit()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成临时队列，并绑定到交换机上，设置路由键</span></span><br><span class=\"line\">result = channel.queue_declare(exclusive=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">queue_name = result.method.queue</span><br><span class=\"line\"><span class=\"keyword\">for</span> routing <span class=\"keyword\">in</span> routings:</span><br><span class=\"line\">    channel.queue_bind(exchange=<span class=\"string\">'messages'</span>,</span><br><span class=\"line\">                       queue=queue_name,</span><br><span class=\"line\">                       routing_key=routing)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\" [x] Received %r\"</span> % (body,))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">channel.basic_consume(callback, queue=queue_name, no_ack=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">' [*] Waiting for messages. To exit press CTRL+C'</span>)</span><br><span class=\"line\">channel.start_consuming()</span><br></pre></td></tr></table></figure>\n<h3 id=\"实验运行\"><a href=\"#实验运行\" class=\"headerlink\" title=\"实验运行\"></a>实验运行</h3><p>打开多个终端,分别传入不同的规则,观察结果<br>如:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 receive_topic.py <span class=\"string\">\"#\"</span></span><br><span class=\"line\">python3 receive_topic.py <span class=\"string\">\"happy.*\"</span></span><br><span class=\"line\">python3 receive_topic.py <span class=\"string\">\"*.work\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"难点\"><a href=\"#难点\" class=\"headerlink\" title=\"难点\"></a>难点</h3><p>1、发送信息时，如果不设置路由键，那么路由键设置为”*”的接收端是否能接收到消息？</p>\n<blockquote>\n<p>发送信息时，如果不设置路由键，默认是表示广播出去，理论上所有接收端都可以收到消息，但是笔者试了下，路由键设置为”*”的接收端收不到任何消息。</p>\n</blockquote>\n<blockquote>\n<p>只有发送消息时，设置路由键为一个词，路由键设置为”*”的接收端才能收到消息。在这里，每个词使用”.”符号分开的。</p>\n</blockquote>\n<p>2、发送消息时，如果路由键设置为”..”，那么路由键设置为”#.*”的接收端是否能接收到消息？如果发送消息时，路由键设置为一个词呢？</p>\n<blockquote>\n<p>两种情况，笔者都测试过了，可以的。</p>\n</blockquote>\n<p>3、”a.*.#” 和”a.#”的区别</p>\n<blockquote>\n<ul>\n<li>“a.#”只要字符串开头的一个词是a就可以了，比如a、a.haha、a.haha.haha。而这样的词是不行的，如abs、abc、abc.haha。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>“a.<em>.#”必须要满足a.</em>的字符串才可以，比如a.、a.haha、a.haha.haha。而这样的词是不行的，如a。</li>\n</ul>\n</blockquote>\n<h2 id=\"远程结果返回RPC\"><a href=\"#远程结果返回RPC\" class=\"headerlink\" title=\"远程结果返回RPC\"></a>远程结果返回RPC</h2><p>Remote Producre Call<br>处理方法描述：</p>\n<blockquote>\n<p>发送端在发送信息前，产生一个接收消息的临时队列，该队列用来接收返回的结果。其实在这里接收端、发送端的概念已经比较模糊了，因为发送端也同样要接收消息，接收端同样也要发送消息，所以这里笔者使用另外的示例来演示这一过程。</p>\n</blockquote>\n<h3 id=\"compute-py代码分析\"><a href=\"#compute-py代码分析\" class=\"headerlink\" title=\"compute.py代码分析\"></a>compute.py代码分析</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接rabbitmq服务器</span></span><br><span class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(</span><br><span class=\"line\">    host=<span class=\"string\">'10.211.55.10'</span>))</span><br><span class=\"line\">channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义队列</span></span><br><span class=\"line\">channel.queue_declare(queue=<span class=\"string\">'compute_queue'</span>)</span><br><span class=\"line\">print(<span class=\"string\">' [*] Waiting for n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将n值加1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">increase</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> n + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义接收到消息的处理方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">request</span><span class=\"params\">(ch, method, properties, body)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\" [.] increase(%s)\"</span> % (body,))</span><br><span class=\"line\"></span><br><span class=\"line\">    response = increase(int(body))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 将计算结果发送回控制中心</span></span><br><span class=\"line\">    ch.basic_publish(exchange=<span class=\"string\">''</span>,</span><br><span class=\"line\">                     routing_key=properties.reply_to,</span><br><span class=\"line\">                     body=str(response))</span><br><span class=\"line\">    ch.basic_ack(delivery_tag=method.delivery_tag)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">channel.basic_qos(prefetch_count=<span class=\"number\">1</span>)</span><br><span class=\"line\">channel.basic_consume(request, queue=<span class=\"string\">'compute_queue'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">channel.start_consuming()</span><br></pre></td></tr></table></figure>\n<h3 id=\"center-py代码分析\"><a href=\"#center-py代码分析\" class=\"headerlink\" title=\"center.py代码分析\"></a>center.py代码分析</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Center</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.connection = pika.BlockingConnection(pika.ConnectionParameters(</span><br><span class=\"line\">            host=<span class=\"string\">'10.211.55.10'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        self.channel = self.connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 定义接收返回消息的队列</span></span><br><span class=\"line\">        result = self.channel.queue_declare(exclusive=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">        self.callback_queue = result.method.queue</span><br><span class=\"line\"></span><br><span class=\"line\">        self.channel.basic_consume(self.on_response,</span><br><span class=\"line\">                                   no_ack=<span class=\"keyword\">True</span>,</span><br><span class=\"line\">                                   queue=self.callback_queue)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 定义接收到返回消息的处理方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_response</span><span class=\"params\">(self, ch, method, props, body)</span>:</span></span><br><span class=\"line\">        self.response = body</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">request</span><span class=\"params\">(self, n)</span>:</span></span><br><span class=\"line\">        self.response = <span class=\"keyword\">None</span></span><br><span class=\"line\">        <span class=\"comment\"># 发送计算请求，并声明返回队列</span></span><br><span class=\"line\">        self.channel.basic_publish(exchange=<span class=\"string\">''</span>,</span><br><span class=\"line\">                                   routing_key=<span class=\"string\">'compute_queue'</span>,</span><br><span class=\"line\">                                   properties=pika.BasicProperties(</span><br><span class=\"line\">                                       reply_to=self.callback_queue,</span><br><span class=\"line\">                                   ),</span><br><span class=\"line\">                                   body=str(n))</span><br><span class=\"line\">        <span class=\"comment\"># 接收返回的数据</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> self.response <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            self.connection.process_data_events()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> int(self.response)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">center = Center()</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\" [x] Requesting increase(30)\"</span>)</span><br><span class=\"line\">response = center.request(<span class=\"number\">30</span>)</span><br><span class=\"line\">print(<span class=\"string\">\" [.] Got %r\"</span> % (response,))</span><br></pre></td></tr></table></figure>\n<p>上面代码定义了接收返回数据的队列和处理方法，并且在发送请求的时候将该队列赋值给<code>reply_to</code>，在计算节点代码中就是通过这个参数来获取返回队列的。</p>\n<h2 id=\"相互关联编号correlation-id\"><a href=\"#相互关联编号correlation-id\" class=\"headerlink\" title=\"相互关联编号correlation id\"></a>相互关联编号correlation id</h2><p><code>correlation id</code>运行原理：</p>\n<blockquote>\n<p>控制中心发送计算请求时设置correlation id，而后计算节点将计算结果，连同接收到的correlation id一起返回，这样控制中心就能通过correlation id来标识请求。其实correlation id也可以理解为请求的唯一标识码。</p>\n</blockquote>\n<p>示例内容：</p>\n<blockquote>\n<p>控制中心开启多个线程，每个线程都发起一次计算请求，通过correlation id，每个线程都能准确收到相应的计算结果。</p>\n</blockquote>\n<h3 id=\"compute-py代码分析-1\"><a href=\"#compute-py代码分析-1\" class=\"headerlink\" title=\"compute.py代码分析\"></a>compute.py代码分析</h3><p>和上面相比，只需修改一个地方：</p>\n<blockquote>\n<p>将计算结果发送回控制中心时，增加参数correlation_id的设定，该参数的值其实是从控制中心发送过来的，这里只是再次发送回去。代码如下：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接rabbitmq服务器</span></span><br><span class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(</span><br><span class=\"line\">    host=<span class=\"string\">'10.211.55.10'</span>))</span><br><span class=\"line\">channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义队列</span></span><br><span class=\"line\">channel.queue_declare(queue=<span class=\"string\">'compute_queue'</span>)</span><br><span class=\"line\">print(<span class=\"string\">' [*] Waiting for n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将n值加1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">increase</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> n + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义接收到消息的处理方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">request</span><span class=\"params\">(ch, method, props, body)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\" [.] increase(%s)\"</span> % (body,))</span><br><span class=\"line\"></span><br><span class=\"line\">    response = increase(int(body))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 将计算结果发送回控制中心，增加correlation_id的设定</span></span><br><span class=\"line\">    ch.basic_publish(exchange=<span class=\"string\">''</span>,</span><br><span class=\"line\">                     routing_key=props.reply_to,</span><br><span class=\"line\">                     properties=pika.BasicProperties(correlation_id= \\</span><br><span class=\"line\">                                                         props.correlation_id),</span><br><span class=\"line\">                     body=str(response))</span><br><span class=\"line\">    ch.basic_ack(delivery_tag=method.delivery_tag)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">channel.basic_qos(prefetch_count=<span class=\"number\">1</span>)</span><br><span class=\"line\">channel.basic_consume(request, queue=<span class=\"string\">'compute_queue'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">channel.start_consuming()</span><br></pre></td></tr></table></figure>\n<h3 id=\"center-py代码分析-1\"><a href=\"#center-py代码分析-1\" class=\"headerlink\" title=\"center.py代码分析\"></a>center.py代码分析</h3><p>控制中心代码稍微复杂些，其中比较关键的有三个地方：</p>\n<ul>\n<li>使用python的uuid来产生唯一的correlation_id。</li>\n<li>发送计算请求时，设定参数correlation_id。</li>\n<li>定义一个字典来保存返回的数据，并且键值为相应线程产生的correlation_id。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika, threading, uuid</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自定义线程类，继承threading.Thread</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span><span class=\"params\">(threading.Thread)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, func, num)</span>:</span></span><br><span class=\"line\">        super(MyThread, self).__init__()</span><br><span class=\"line\">        self.func = func</span><br><span class=\"line\">        self.num = num</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\" [x] Requesting increase(%d)\"</span> % self.num)</span><br><span class=\"line\">        response = self.func(self.num)</span><br><span class=\"line\">        print(<span class=\"string\">\" [.] increase(%d)=%d\"</span> % (self.num, response))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 控制中心类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Center</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.connection = pika.BlockingConnection(pika.ConnectionParameters(</span><br><span class=\"line\">            host=<span class=\"string\">'10.211.55.10'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        self.channel = self.connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 定义接收返回消息的队列</span></span><br><span class=\"line\">        result = self.channel.queue_declare(exclusive=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">        self.callback_queue = result.method.queue</span><br><span class=\"line\"></span><br><span class=\"line\">        self.channel.basic_consume(self.on_response,</span><br><span class=\"line\">                                   no_ack=<span class=\"keyword\">True</span>,</span><br><span class=\"line\">                                   queue=self.callback_queue)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 返回的结果都会存储在该字典里</span></span><br><span class=\"line\">        self.response = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 定义接收到返回消息的处理方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_response</span><span class=\"params\">(self, ch, method, props, body)</span>:</span></span><br><span class=\"line\">        self.response[props.correlation_id] = body</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">request</span><span class=\"params\">(self, n)</span>:</span></span><br><span class=\"line\">        corr_id = str(uuid.uuid4())     <span class=\"comment\">#  产生 id</span></span><br><span class=\"line\">        self.response[corr_id] = <span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 发送计算请求，并设定返回队列和correlation_id</span></span><br><span class=\"line\">        self.channel.basic_publish(exchange=<span class=\"string\">''</span>,</span><br><span class=\"line\">                                   routing_key=<span class=\"string\">'compute_queue'</span>,</span><br><span class=\"line\">                                   properties=pika.BasicProperties(</span><br><span class=\"line\">                                       reply_to=self.callback_queue,</span><br><span class=\"line\">                                       correlation_id=corr_id,</span><br><span class=\"line\">                                   ),</span><br><span class=\"line\">                                   body=str(n))</span><br><span class=\"line\">        <span class=\"comment\"># 接收返回的数据</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> self.response[corr_id] <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            self.connection.process_data_events()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> int(self.response[corr_id])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">center = Center()</span><br><span class=\"line\"><span class=\"comment\"># 发起5次计算请求</span></span><br><span class=\"line\">nums = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>]</span><br><span class=\"line\">threads = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">    threads.append(MyThread(center.request, num))</span><br><span class=\"line\"><span class=\"keyword\">for</span> thread <span class=\"keyword\">in</span> threads:</span><br><span class=\"line\">    thread.start()</span><br><span class=\"line\"><span class=\"keyword\">for</span> thread <span class=\"keyword\">in</span> threads:</span><br><span class=\"line\">    thread.join()</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"http://blog.csdn.net/chenjiebin/article/details/8253433\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/chenjiebin/article/details/8253433</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjfgx5owa0002mxgow3zhkttr","category_id":"cjfgx5owf0005mxgognozgdo5","_id":"cjfgx5owo000emxgoo3s9bvwk"},{"post_id":"cjfgx5owi0007mxgoxg3w09gy","category_id":"cjfgx5owl000bmxgoihgktvj6","_id":"cjfgx5owu000lmxgoc8r1p9v4"},{"post_id":"cjfgx5owm000cmxgoggo5x7dx","category_id":"cjfgx5owr000hmxgo53k6ztxl","_id":"cjfgx5owz000qmxgod4k8znv4"},{"post_id":"cjfgx5owt000kmxgo9xo6renv","category_id":"cjfgx5owf0005mxgognozgdo5","_id":"cjfgx5ox0000tmxgo9tej83ld"},{"post_id":"cjfgx5own000dmxgo9jp9m61x","category_id":"cjfgx5owr000hmxgo53k6ztxl","_id":"cjfgx5ox2000xmxgo30af4jgi"},{"post_id":"cjfgx5ox3000zmxgo9a8nhekw","category_id":"cjfgx5ox1000umxgo5tjpi96a","_id":"cjfgx5ox70015mxgodn41o6k9"},{"post_id":"cjfgx5owy000omxgo3f7jnjkp","category_id":"cjfgx5ox1000umxgo5tjpi96a","_id":"cjfgx5ox80018mxgo0cwck0f7"},{"post_id":"cjfgx5ox50012mxgo29keowai","category_id":"cjfgx5owl000bmxgoihgktvj6","_id":"cjfgx5oxa001bmxgo5e23ps9x"},{"post_id":"cjfgx5ox0000smxgo87ty1kf8","category_id":"cjfgx5ox1000umxgo5tjpi96a","_id":"cjfgx5oxb001emxgo37opuorf"},{"post_id":"cjfgx5ox80017mxgo8pfshca6","category_id":"cjfgx5ox1000umxgo5tjpi96a","_id":"cjfgx5oxc001hmxgoxb0ry55n"},{"post_id":"cjfgx5ox1000vmxgo7da8rmo5","category_id":"cjfgx5ox1000umxgo5tjpi96a","_id":"cjfgx5oxe001kmxgojwbz8cwc"},{"post_id":"cjfgx5ox9001amxgo0qgvugn8","category_id":"cjfgx5owl000bmxgoihgktvj6","_id":"cjfgx5oxf001mmxgokun8urf4"},{"post_id":"cjfgx5oxa001dmxgoe27lw4zi","category_id":"cjfgx5oxa001cmxgow4oxh7c6","_id":"cjfgx5oxh001qmxgoaoshdjni"},{"post_id":"cjfgx5ox60014mxgo7vcbdhpk","category_id":"cjfgx5oxa001cmxgow4oxh7c6","_id":"cjfgx5oxj001smxgoqba309ln"},{"post_id":"cjfgx5oxd001jmxgo33cs7ifm","category_id":"cjfgx5owl000bmxgoihgktvj6","_id":"cjfgx5oxl001umxgohed7wois"},{"post_id":"cjfgx5oxg001omxgovz1x2fmi","category_id":"cjfgx5ox1000umxgo5tjpi96a","_id":"cjfgx5oxm001wmxgow8cibwms"}],"PostTag":[{"post_id":"cjfgx5ow60001mxgo0c7e9xmr","tag_id":"cjfgx5owc0003mxgomg0jd9ri","_id":"cjfgx5owk0009mxgo2fw947or"},{"post_id":"cjfgx5owg0006mxgoe7lttnkl","tag_id":"cjfgx5owk0008mxgoir0x22c6","_id":"cjfgx5owp000fmxgoqgec2v3s"},{"post_id":"cjfgx5owp000gmxgoxvmg9vby","tag_id":"cjfgx5owt000jmxgoz1455yna","_id":"cjfgx5ox0000rmxgoy7smcuja"},{"post_id":"cjfgx5ows000imxgoz3b358kw","tag_id":"cjfgx5owt000jmxgoz1455yna","_id":"cjfgx5ox3000ymxgon8nqn1aw"},{"post_id":"cjfgx5oww000nmxgok2oncrae","tag_id":"cjfgx5ox2000wmxgoa6i8wn53","_id":"cjfgx5ox60013mxgoiomgfyl7"},{"post_id":"cjfgx5ox60014mxgo7vcbdhpk","tag_id":"cjfgx5ox90019mxgob62gq22q","_id":"cjfgx5oxd001imxgomx0mdbce"},{"post_id":"cjfgx5ox9001amxgo0qgvugn8","tag_id":"cjfgx5oxc001gmxgo7atsf52p","_id":"cjfgx5oxh001pmxgotlhct0of"},{"post_id":"cjfgx5oxb001fmxgoyffau0fk","tag_id":"cjfgx5oxf001nmxgofqkhy81w","_id":"cjfgx5oxl001vmxgoq2199gr0"},{"post_id":"cjfgx5oxf001lmxgobcolrjac","tag_id":"cjfgx5oxk001tmxgolnfe73lp","_id":"cjfgx5oxn001zmxgonlh8h5tz"},{"post_id":"cjfgx5oxf001lmxgobcolrjac","tag_id":"cjfgx5oxm001xmxgoyvsbt66f","_id":"cjfgx5oxn0020mxgoomjmk6an"},{"post_id":"cjfgx5oxi001rmxgogz7tc5qw","tag_id":"cjfgx5oxm001ymxgodlra3h63","_id":"cjfgx5oxn0021mxgoj115u4mr"}],"Tag":[{"name":"charles","_id":"cjfgx5owc0003mxgomg0jd9ri"},{"name":"phantomjs","_id":"cjfgx5owk0008mxgoir0x22c6"},{"name":"django","_id":"cjfgx5owt000jmxgoz1455yna"},{"name":"hexo","_id":"cjfgx5ox2000wmxgoa6i8wn53"},{"name":"express","_id":"cjfgx5ox90019mxgob62gq22q"},{"name":"Python","_id":"cjfgx5oxc001gmxgo7atsf52p"},{"name":"docker","_id":"cjfgx5oxf001nmxgofqkhy81w"},{"name":"heapq","_id":"cjfgx5oxk001tmxgolnfe73lp"},{"name":"nlargest","_id":"cjfgx5oxm001xmxgoyvsbt66f"},{"name":"rabbitmq","_id":"cjfgx5oxm001ymxgodlra3h63"}]}}